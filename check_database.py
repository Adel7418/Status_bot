"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
"""

import io
import sqlite3
import sys


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    conn = sqlite3.connect("bot_database.db")
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(
        """
        SELECT id, telegram_id, username, first_name, last_name, role, created_at
        FROM users
        ORDER BY created_at DESC
    """
    )
    users = cursor.fetchall()

    if users:
        users_data = []
        for user in users:
            users_data.append(
                [
                    user["id"],
                    user["telegram_id"],
                    user["username"] or "-",
                    user["first_name"] or "-",
                    user["last_name"] or "-",
                    user["role"],  # –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å "DISPATCHER,MASTER"
                ]
            )

    else:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
    cursor.execute(
        """
        SELECT m.id, m.telegram_id, u.first_name, u.last_name,
               m.phone, m.specialization, m.is_active, m.is_approved,
               m.work_chat_id
        FROM masters m
        LEFT JOIN users u ON m.telegram_id = u.telegram_id
        ORDER BY m.created_at DESC
    """
    )
    masters = cursor.fetchall()

    if masters:
        masters_data = []
        for master in masters:
            name = f"{master['first_name'] or ''} {master['last_name'] or ''}".strip() or "-"
            status = "‚úÖ" if master["is_approved"] else "‚è≥"
            active = "üü¢" if master["is_active"] else "üî¥"
            work_chat = master["work_chat_id"] if master["work_chat_id"] else "-"

            masters_data.append(
                [
                    master["id"],
                    master["telegram_id"],
                    name,
                    master["phone"],
                    master["specialization"],
                    f"{status} {active}",
                    work_chat,
                ]
            )

    else:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫
    cursor.execute(
        """
        SELECT o.id, o.equipment_type, o.client_name, o.status,
               u1.first_name || ' ' || u1.last_name as dispatcher_name,
               u2.first_name || ' ' || u2.last_name as master_name,
               o.total_amount, o.created_at
        FROM orders o
        LEFT JOIN users u1 ON o.dispatcher_id = u1.telegram_id
        LEFT JOIN masters m ON o.assigned_master_id = m.id
        LEFT JOIN users u2 ON m.telegram_id = u2.telegram_id
        ORDER BY o.created_at DESC
        LIMIT 20
    """
    )
    orders = cursor.fetchall()

    if orders:
        orders_data = []
        for order in orders:
            status_emoji = {
                "NEW": "üÜï",
                "ASSIGNED": "üë®‚Äçüîß",
                "ACCEPTED": "‚úÖ",
                "ONSITE": "üè†",
                "CLOSED": "üí∞",
                "REFUSED": "‚ùå",
                "DR": "‚è≥",
            }.get(order["status"], "‚ùì")

            orders_data.append(
                [
                    order["id"],
                    order["equipment_type"][:20],
                    order["client_name"][:15],
                    f"{status_emoji} {order['status']}",
                    (order["dispatcher_name"] or "-")[:15],
                    (order["master_name"] or "-")[:15],
                    f"{order['total_amount']:.0f} ‚ÇΩ" if order["total_amount"] else "-",
                ]
            )

    else:
        pass

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
    cursor.execute(
        """
        SELECT status, COUNT(*) as count
        FROM orders
        GROUP BY status
        ORDER BY count DESC
    """
    )
    stats = cursor.fetchall()

    if stats:
        stats_data = []
        for stat in stats:
            status_names = {
                "NEW": "–ù–æ–≤—ã–µ",
                "ASSIGNED": "–ù–∞–∑–Ω–∞—á–µ–Ω—ã",
                "ACCEPTED": "–ü—Ä–∏–Ω—è—Ç—ã",
                "ONSITE": "–ù–∞ –æ–±—ä–µ–∫—Ç–µ",
                "CLOSED": "–ó–∞–≤–µ—Ä—à–µ–Ω—ã",
                "REFUSED": "–û—Ç–∫–ª–æ–Ω–µ–Ω—ã",
                "DR": "–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
            }
            stats_data.append([status_names.get(stat["status"], stat["status"]), stat["count"]])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    cursor.execute(
        """
        SELECT telegram_id, username, first_name, last_name, role
        FROM users
        WHERE role LIKE '%,%'
        ORDER BY created_at DESC
    """
    )
    multi_role_users = cursor.fetchall()

    if multi_role_users:
        multi_data = []
        for user in multi_role_users:
            name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip() or "-"
            roles = user["role"].split(",")
            role_names = {
                "ADMIN": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "DISPATCHER": "–î–∏—Å–ø–µ—Ç—á–µ—Ä",
                "MASTER": "–ú–∞—Å—Ç–µ—Ä",
                "UNKNOWN": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            }
            roles_str = ", ".join([role_names.get(r.strip(), r) for r in roles])

            multi_data.append([user["telegram_id"], user["username"] or "-", name, roles_str])

    else:
        pass

    conn.close()


if __name__ == "__main__":
    try:
        check_database()
    except Exception:
        import traceback

        traceback.print_exc()
