"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
"""
import sqlite3
from datetime import datetime
from tabulate import tabulate
import sys
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    print("\n" + "="*80)
    print("üìä –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –ë–û–¢–ê")
    print("="*80 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
    print("-" * 80)
    cursor.execute("""
        SELECT id, telegram_id, username, first_name, last_name, role, created_at 
        FROM users 
        ORDER BY created_at DESC
    """)
    users = cursor.fetchall()
    
    if users:
        users_data = []
        for user in users:
            users_data.append([
                user['id'],
                user['telegram_id'],
                user['username'] or '-',
                user['first_name'] or '-',
                user['last_name'] or '-',
                user['role']  # –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å "DISPATCHER,MASTER"
            ])
        
        print(tabulate(users_data, 
                      headers=['ID', 'Telegram ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–†–æ–ª–∏'],
                      tablefmt='grid'))
        print(f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n")
    else:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
    print("\nüîß –ú–ê–°–¢–ï–†–ê:")
    print("-" * 80)
    cursor.execute("""
        SELECT m.id, m.telegram_id, u.first_name, u.last_name, 
               m.phone, m.specialization, m.is_active, m.is_approved,
               m.work_chat_id
        FROM masters m
        LEFT JOIN users u ON m.telegram_id = u.telegram_id
        ORDER BY m.created_at DESC
    """)
    masters = cursor.fetchall()
    
    if masters:
        masters_data = []
        for master in masters:
            name = f"{master['first_name'] or ''} {master['last_name'] or ''}".strip() or '-'
            status = '‚úÖ' if master['is_approved'] else '‚è≥'
            active = 'üü¢' if master['is_active'] else 'üî¥'
            work_chat = master['work_chat_id'] if master['work_chat_id'] else '-'
            
            masters_data.append([
                master['id'],
                master['telegram_id'],
                name,
                master['phone'],
                master['specialization'],
                f"{status} {active}",
                work_chat
            ])
        
        print(tabulate(masters_data,
                      headers=['ID', 'Telegram ID', '–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–°—Ç–∞—Ç—É—Å', '–ì—Ä—É–ø–ø–∞'],
                      tablefmt='grid'))
        print(f"\n–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(masters)}\n")
    else:
        print("–ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫
    print("\nüìã –ó–ê–Ø–í–ö–ò:")
    print("-" * 80)
    cursor.execute("""
        SELECT o.id, o.equipment_type, o.client_name, o.status, 
               u1.first_name || ' ' || u1.last_name as dispatcher_name,
               u2.first_name || ' ' || u2.last_name as master_name,
               o.total_amount, o.created_at
        FROM orders o
        LEFT JOIN users u1 ON o.dispatcher_id = u1.telegram_id
        LEFT JOIN masters m ON o.assigned_master_id = m.id
        LEFT JOIN users u2 ON m.telegram_id = u2.telegram_id
        ORDER BY o.created_at DESC
        LIMIT 20
    """)
    orders = cursor.fetchall()
    
    if orders:
        orders_data = []
        for order in orders:
            status_emoji = {
                'NEW': 'üÜï',
                'ASSIGNED': 'üë®‚Äçüîß',
                'ACCEPTED': '‚úÖ',
                'ONSITE': 'üè†',
                'CLOSED': 'üí∞',
                'REFUSED': '‚ùå',
                'DR': '‚è≥'
            }.get(order['status'], '‚ùì')
            
            orders_data.append([
                order['id'],
                order['equipment_type'][:20],
                order['client_name'][:15],
                f"{status_emoji} {order['status']}",
                (order['dispatcher_name'] or '-')[:15],
                (order['master_name'] or '-')[:15],
                f"{order['total_amount']:.0f} ‚ÇΩ" if order['total_amount'] else '-'
            ])
        
        print(tabulate(orders_data,
                      headers=['ID', '–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏', '–ö–ª–∏–µ–Ω—Ç', '–°—Ç–∞—Ç—É—Å', '–î–∏—Å–ø–µ—Ç—á–µ—Ä', '–ú–∞—Å—Ç–µ—Ä', '–°—É–º–º–∞'],
                      tablefmt='grid'))
        print(f"\n–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –∑–∞—è–≤–æ–∫\n")
    else:
        print("–ù–µ—Ç –∑–∞—è–≤–æ–∫\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–Ø–í–ö–ê–ú:")
    print("-" * 80)
    cursor.execute("""
        SELECT status, COUNT(*) as count
        FROM orders
        GROUP BY status
        ORDER BY count DESC
    """)
    stats = cursor.fetchall()
    
    if stats:
        stats_data = []
        for stat in stats:
            status_names = {
                'NEW': '–ù–æ–≤—ã–µ',
                'ASSIGNED': '–ù–∞–∑–Ω–∞—á–µ–Ω—ã',
                'ACCEPTED': '–ü—Ä–∏–Ω—è—Ç—ã',
                'ONSITE': '–ù–∞ –æ–±—ä–µ–∫—Ç–µ',
                'CLOSED': '–ó–∞–≤–µ—Ä—à–µ–Ω—ã',
                'REFUSED': '–û—Ç–∫–ª–æ–Ω–µ–Ω—ã',
                'DR': '–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç'
            }
            stats_data.append([
                status_names.get(stat['status'], stat['status']),
                stat['count']
            ])
        
        print(tabulate(stats_data,
                      headers=['–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                      tablefmt='grid'))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    print("\n\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –†–û–õ–Ø–ú–ò:")
    print("-" * 80)
    cursor.execute("""
        SELECT telegram_id, username, first_name, last_name, role
        FROM users
        WHERE role LIKE '%,%'
        ORDER BY created_at DESC
    """)
    multi_role_users = cursor.fetchall()
    
    if multi_role_users:
        multi_data = []
        for user in multi_role_users:
            name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip() or '-'
            roles = user['role'].split(',')
            role_names = {
                'ADMIN': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'DISPATCHER': '–î–∏—Å–ø–µ—Ç—á–µ—Ä',
                'MASTER': '–ú–∞—Å—Ç–µ—Ä',
                'UNKNOWN': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }
            roles_str = ', '.join([role_names.get(r.strip(), r) for r in roles])
            
            multi_data.append([
                user['telegram_id'],
                user['username'] or '-',
                name,
                roles_str
            ])
        
        print(tabulate(multi_data,
                      headers=['Telegram ID', 'Username', '–ò–º—è', '–†–æ–ª–∏'],
                      tablefmt='grid'))
        print(f"\n–í—Å–µ–≥–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–æ–ª—è–º–∏: {len(multi_role_users)}")
    else:
        print("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–æ–ª—è–º–∏")
    
    conn.close()
    
    print("\n" + "="*80)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("="*80 + "\n")


if __name__ == "__main__":
    try:
        check_database()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}\n")
        import traceback
        traceback.print_exc()

