# ========================================
# Docker Compose для production
# Использование: docker-compose -f docker-compose.prod.yml up -d
# ========================================

services:
  bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: telegram_repair_bot_prod
    restart: always
    env_file:
      - ../.env
    environment:
      - DATABASE_PATH=/app/data/bot_database.db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - DEV_MODE=false
    volumes:
      - bot_data:/app/data
      - bot_logs:/app/logs
      - bot_backups:/app/backups
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bot_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/data/bot_database.db') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  redis:
    image: redis:7-alpine
    container_name: telegram_bot_redis_prod
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus для мониторинга (опционально)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: telegram_bot_prometheus
  #   restart: always
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - bot_network

  # Grafana для визуализации (опционально)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: telegram_bot_grafana
  #   restart: always
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - bot_network
  #   depends_on:
  #     - prometheus

networks:
  bot_network:
    driver: bridge

volumes:
  bot_data:
    driver: local
  bot_logs:
    driver: local
  bot_backups:
    driver: local
  redis_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local

