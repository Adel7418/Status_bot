"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞—â–∏—Ç—ã PII (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
–ó–∞–ø—É—Å–∫: python demo_pii_protection.py
"""

from app.utils.pii_masking import (
    mask_phone,
    mask_name,
    mask_address,
    mask_username,
    safe_str_user,
    safe_str_order,
    safe_log_order_details,
    sanitize_log_message,
    mask_dict,
)


def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70)


def demo_phone_masking():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
    print_section("üì± –ú–ê–°–ö–ò–†–û–í–ê–ù–ò–ï –¢–ï–õ–ï–§–û–ù–û–í")
    
    test_phones = [
        "+79991234567",
        "89991234567",
        "+7 (999) 123-45-67",
        "+7-999-123-45-67",
    ]
    
    for phone in test_phones:
        masked = mask_phone(phone)
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π:     {phone:25} ‚Üí  –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {masked}")


def demo_name_masking():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω"""
    print_section("üë§ –ú–ê–°–ö–ò–†–û–í–ê–ù–ò–ï –ò–ú–ï–ù")
    
    test_names = [
        "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á",
        "–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è",
        "–°–∏–¥–æ—Ä–æ–≤",
        "–õ–∏",
    ]
    
    for name in test_names:
        masked = mask_name(name)
        print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ:     {name:25} ‚Üí  –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ: {masked}")


def demo_address_masking():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
    print_section("üìç –ú–ê–°–ö–ò–†–û–í–ê–ù–ò–ï –ê–î–†–ï–°–û–í")
    
    test_addresses = [
        "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 100",
        "–ö–∞–∑–∞–Ω—å, –ø—Ä–æ—Å–ø–µ–∫—Ç –ü–æ–±–µ–¥—ã, 20",
        "–ú–æ—Å–∫–≤–∞",
    ]
    
    for address in test_addresses:
        masked = mask_address(address)
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π:     {address}")
        print(f"–ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {masked}\n")


def demo_username_masking():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è username"""
    print_section("üí¨ –ú–ê–°–ö–ò–†–û–í–ê–ù–ò–ï USERNAME")
    
    test_usernames = [
        "john_doe",
        "maria123",
        "alex",
        "ab",
        "a",
    ]
    
    for username in test_usernames:
        masked = mask_username(username)
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π:     @{username:20} ‚Üí  –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: @{masked}")


def demo_user_object():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è User –æ–±—ä–µ–∫—Ç–æ–≤"""
    print_section("üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï USER")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º User –æ–±—ä–µ–∫—Ç
    user_dict = {
        "id": 1,
        "telegram_id": 123456789,
        "username": "john_doe",
        "first_name": "–ò–≤–∞–Ω",
        "last_name": "–ü–µ—Ç—Ä–æ–≤",
        "role": "DISPATCHER,MASTER",
    }
    
    print("‚ùå –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ):")
    print(f"   logger.info(f'User: {{user}}')")
    print(f"   ‚Üí User: {user_dict}")
    print(f"   ‚ö†Ô∏è  –í–∏–¥–Ω—ã: username, first_name, last_name\n")
    
    print("‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û (–∫–∞–∫ —Å—Ç–∞–ª–æ):")
    print(f"   logger.info(f'User: {{safe_str_user(user)}}')")
    print(f"   ‚Üí User: {safe_str_user(user_dict)}")
    print(f"   ‚úÖ –°–∫—Ä—ã—Ç—ã –≤—Å–µ PII, –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ ID –∏ —Ä–æ–ª—å")


def demo_order_object():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Order –æ–±—ä–µ–∫—Ç–æ–≤"""
    print_section("üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ORDER")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º Order –æ–±—ä–µ–∫—Ç
    order_dict = {
        "id": 1,
        "equipment_type": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
        "description": "–ù–µ –æ—Ö–ª–∞–∂–¥–∞–µ—Ç",
        "client_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á",
        "client_phone": "+79991234567",
        "client_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5",
        "status": "ASSIGNED",
        "assigned_master_id": 5,
    }
    
    print("‚ùå –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ):")
    print(f"   logger.info(f'Creating order for {{order.client_name}}')")
    print(f"   ‚Üí Creating order for {order_dict['client_name']}")
    print(f"   ‚ö†Ô∏è  –í–∏–¥–Ω–æ –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞!\n")
    
    print("‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û - –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print(f"   logger.info(f'Order: {{safe_str_order(order)}}')")
    print(f"   ‚Üí {safe_str_order(order_dict)}")
    print(f"   ‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞\n")
    
    print("‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û - —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏):")
    print(f"   logger.debug(safe_log_order_details(order, show_client_info=True))")
    
    class MockOrder:
        def __init__(self, data):
            for key, value in data.items():
                setattr(self, key, value)
    
    mock_order = MockOrder(order_dict)
    print(f"   ‚Üí {safe_log_order_details(mock_order, show_client_info=True)}")
    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã")


def demo_sanitize_message():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç PII"""
    print_section("üßπ –û–ß–ò–°–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ PII")
    
    test_messages = [
        "–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: +79991234567",
        "Email: ivan.petrov@example.com",
        "–¢–µ–ª–µ—Ñ–æ–Ω: 89991234567, email: test@mail.ru",
    ]
    
    for message in test_messages:
        cleaned = sanitize_log_message(message)
        print(f"–ò—Å—Ö–æ–¥–Ω–æ–µ:     {message}")
        print(f"–û—á–∏—â–µ–Ω–Ω–æ–µ:    {cleaned}\n")


def demo_dict_masking():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π"""
    print_section("üì¶ –ú–ê–°–ö–ò–†–û–í–ê–ù–ò–ï –°–õ–û–í–ê–†–ï–ô")
    
    data = {
        "id": 1,
        "client_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
        "client_phone": "+79991234567",
        "client_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 10",
        "username": "john_doe",
        "status": "NEW",
        "total_amount": 5000,
    }
    
    print("‚ùå –ò–°–•–û–î–ù–´–ô –°–õ–û–í–ê–†–¨ (—Å PII):")
    for key, value in data.items():
        print(f"   {key:20} = {value}")
    
    masked = mask_dict(data)
    
    print("\n‚úÖ –ú–ê–°–ö–ò–†–û–í–ê–ù–ù–´–ô –°–õ–û–í–ê–†–¨:")
    for key, value in masked.items():
        print(f"   {key:20} = {value}")


def demo_real_world_scenario():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    print_section("üéØ –†–ï–ê–õ–¨–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    
    print("–°–∏—Ç—É–∞—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏\n")
    
    print("‚ùå –ö–ê–ö –ë–´–õ–û (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ):")
    print("""
    order = await db.create_order(...)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è {order.client_name}")
    logger.info(f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}")
    logger.info(f"–ê–¥—Ä–µ—Å: {order.client_address}")
    
    ‚Üí –õ–û–ì–ò:
      INFO: –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á
      INFO: –¢–µ–ª–µ—Ñ–æ–Ω: +79991234567
      INFO: –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5
      ‚ö†Ô∏è  –í–°–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –í –û–¢–ö–†–´–¢–û–ú –í–ò–î–ï!
    """)
    
    print("\n‚úÖ –ö–ê–ö –°–¢–ê–õ–û (–±–µ–∑–æ–ø–∞—Å–Ω–æ):")
    print("""
    from app.utils import safe_str_order
    
    order = await db.create_order(...)
    logger.info(f"Order: {safe_str_order(order)}")
    
    ‚Üí –õ–û–ì–ò:
      INFO: Order: Order(#1, NEW, –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, master=Unassigned)
      ‚úÖ –ù–ï–¢ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•!
    """)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\n" + "=" * 70)
    print("  DEMONSTRATSIYA ZASHCHITY PERSONALNYKH DANNYKH (PII)")
    print("  Sootvetstvie: GDPR, 152-FZ RF, ISO 27001")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_phone_masking()
    demo_name_masking()
    demo_address_masking()
    demo_username_masking()
    demo_user_object()
    demo_order_object()
    demo_sanitize_message()
    demo_dict_masking()
    demo_real_world_scenario()
    
    print_section("‚úÖ –ò–¢–û–ì")
    print("""
    ‚úÖ –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è
    ‚úÖ 34 —Ç–µ—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
    ‚úÖ Coverage: 87.01%
    ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ GDPR, 152-–§–ó –†–§, ISO 27001
    
    üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
       - docs/PII_LOGGING_SECURITY.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
       - PII_QUICK_SUMMARY.md - –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
       - PII_README.md - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    
    üéì –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ:
       from app.utils import safe_str_user, safe_str_order, mask_phone
    """)
    print("=" * 70 + "\n")


if __name__ == "__main__":
    main()

