"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è config
"""
import pytest
from app.config import UserRole, OrderStatus, EquipmentType, Config


class TestUserRole:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ UserRole"""

    def test_all_roles(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
        roles = UserRole.all_roles()
        assert UserRole.ADMIN in roles
        assert UserRole.DISPATCHER in roles
        assert UserRole.MASTER in roles
        assert UserRole.UNKNOWN in roles


class TestOrderStatus:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ OrderStatus"""

    def test_all_statuses(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤"""
        statuses = OrderStatus.all_statuses()
        assert OrderStatus.NEW in statuses
        assert OrderStatus.ASSIGNED in statuses
        assert OrderStatus.ACCEPTED in statuses
        assert OrderStatus.ONSITE in statuses
        assert OrderStatus.CLOSED in statuses
        assert OrderStatus.REFUSED in statuses
        assert OrderStatus.DR in statuses

    def test_get_status_emoji(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        assert OrderStatus.get_status_emoji(OrderStatus.NEW) == "üÜï"
        assert OrderStatus.get_status_emoji(OrderStatus.ASSIGNED) == "üë®‚Äçüîß"
        assert OrderStatus.get_status_emoji(OrderStatus.CLOSED) == "üí∞"

    def test_get_status_name(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        assert OrderStatus.get_status_name(OrderStatus.NEW) == "–ù–æ–≤–∞—è"
        assert OrderStatus.get_status_name(OrderStatus.ASSIGNED) == "–ù–∞–∑–Ω–∞—á–µ–Ω–∞"
        assert OrderStatus.get_status_name(OrderStatus.CLOSED) == "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"


class TestEquipmentType:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ EquipmentType"""

    def test_all_types(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏"""
        types = EquipmentType.all_types()
        assert EquipmentType.WASHING_MACHINE in types
        assert EquipmentType.DISHWASHER in types
        assert EquipmentType.TV in types
        assert len(types) == 8


class TestConfig:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ Config"""

    def test_validate_with_empty_token(self, monkeypatch):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
        monkeypatch.setattr(Config, "BOT_TOKEN", "")
        monkeypatch.setattr(Config, "ADMIN_IDS", [123])
        
        with pytest.raises(ValueError, match="BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"):
            Config.validate()

    def test_validate_with_empty_admin_ids(self, monkeypatch):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤"""
        monkeypatch.setattr(Config, "BOT_TOKEN", "test_token")
        monkeypatch.setattr(Config, "ADMIN_IDS", [])
        
        with pytest.raises(ValueError, match="ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"):
            Config.validate()

    def test_validate_success(self, monkeypatch):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        monkeypatch.setattr(Config, "BOT_TOKEN", "test_token")
        monkeypatch.setattr(Config, "ADMIN_IDS", [123])
        
        assert Config.validate() is True

