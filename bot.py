"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏
"""

import asyncio
import logging
import os
import sys
from logging.handlers import RotatingFileHandler
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, UpdateType
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage

from app.config import Config
from app.database import Database
from app.handlers import routers
from app.middlewares import (
    LoggingMiddleware,
    RateLimitMiddleware,
    RoleCheckMiddleware,
    ValidationHandlerMiddleware,
    global_error_handler,
)
from app.services.scheduler import TaskScheduler
from app.utils.sentry import init_sentry


# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
Path("logs").mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
log_formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# Rotating file handler (–º–∞–∫—Å 10MB, —Ö—Ä–∞–Ω–∏—Ç—å 5 —Ñ–∞–π–ª–æ–≤)
file_handler = RotatingFileHandler(
    "logs/bot.log",
    maxBytes=10 * 1024 * 1024,  # 10 MB
    backupCount=5,
    encoding="utf-8",
)
file_handler.setFormatter(log_formatter)

# Console handler
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(log_formatter)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ root logger
# –ò—Å–ø–æ–ª—å–∑—É–µ–º LOG_LEVEL –∏–∑ .env (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO)
log_level = getattr(logging, Config.LOG_LEVEL.upper(), logging.INFO)

logging.basicConfig(
    level=log_level,
    handlers=[file_handler, console_handler],
)

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
if log_level == logging.DEBUG:
    logging.getLogger("app").setLevel(logging.DEBUG)
    logging.getLogger("aiogram").setLevel(logging.INFO)  # aiogram –æ—Å—Ç–∞–µ—Ç—Å—è INFO —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    logging.getLogger("apscheduler").setLevel(logging.INFO)
    logger.info("DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω (LOG_LEVEL=DEBUG)")
else:
    # Production/INFO - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.getLogger("app").setLevel(log_level)
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    logging.getLogger("apscheduler").setLevel(logging.WARNING)


async def on_startup(bot: Bot, db: Database, scheduler: TaskScheduler):
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        scheduler: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    """
    # –ë–î —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ main()

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    await scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    # for admin_id in Config.ADMIN_IDS:
    #     try:
    #         await bot.send_message(
    #             admin_id,
    #             "‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
    #             "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.",
    #             parse_mode="HTML"
    #         )
    #     except Exception as e:
    #         logger.error("Failed to notify admin %s: %s", admin_id, e)

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")


async def on_shutdown(bot: Bot, db: Database, scheduler: TaskScheduler):
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        scheduler: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    """
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    await scheduler.stop()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    await db.disconnect()
    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    for admin_id in Config.ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                "üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n" "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∞ —Ä–∞–±–æ—Ç—É.",
                parse_mode="HTML",
            )
        except Exception as e:
            logger.error("Failed to notify admin %s: %s", admin_id, e)

    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    bot = None
    db = None
    scheduler = None
    dp = None

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sentry (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        init_sentry()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            Config.validate()
        except ValueError as e:
            logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", e)
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = Bot(token=Config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –¥–ª—è production, MemoryStorage –¥–ª—è development
        redis_url = os.getenv("REDIS_URL")

        # –û–¢–õ–ê–î–ö–ê: –Ø–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ storage
        logger.info("=" * 60)
        logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FSM Storage:")
        logger.info(f"  REDIS_URL: {redis_url}")
        logger.info(f"  DEV_MODE: {Config.DEV_MODE}")
        logger.info(f"  –£—Å–ª–æ–≤–∏–µ (redis_url and not DEV_MODE): {redis_url and not Config.DEV_MODE}")
        logger.info("=" * 60)

        if redis_url and not Config.DEV_MODE:
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RedisStorage –¥–ª—è FSM: %s", redis_url)
            storage = RedisStorage.from_url(redis_url)
        else:
            logger.warning("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MemoryStorage (—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ)")
            logger.warning(f"   –ü—Ä–∏—á–∏–Ω–∞: redis_url={redis_url}, DEV_MODE={Config.DEV_MODE}")
            storage = MemoryStorage()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher(storage=storage)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("=" * 60)
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        logger.info(f"   USE_ORM: {Config.USE_ORM}")
        logger.info(f"   DATABASE_PATH: {Config.DATABASE_PATH}")
        logger.info("=" * 60)
        
        db = Database()
        await db.connect()

        # –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –î–û –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è middleware
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        # ORM –Ω–µ —Ç—Ä–µ–±—É–µ—Ç init_db - —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
        if hasattr(db, "init_db"):
            await db.init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–ø–µ—Ä–µ–¥–∞–µ–º shared DB instance)
        scheduler = TaskScheduler(bot, db)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î)
        # 1. Logging middleware (–ø–µ—Ä–≤—ã–º - –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è)
        logging_middleware = LoggingMiddleware()
        dp.message.middleware(logging_middleware)
        dp.callback_query.middleware(logging_middleware)

        # 2. Rate Limit middleware (–∑–∞—â–∏—Ç–∞ –æ—Ç spam –∏ DoS –∞—Ç–∞–∫)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏: 2 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É, burst –¥–æ 4 –∑–∞–ø—Ä–æ—Å–æ–≤
        # –° –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–±–∞–Ω–æ–º –ø–æ—Å–ª–µ 30 –Ω–∞—Ä—É—à–µ–Ω–∏–π
        rate_limit_middleware = RateLimitMiddleware(
            rate=2,  # 2 –∑–∞–ø—Ä–æ—Å–∞/—Å–µ–∫
            period=1,  # –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
            burst=4,  # –º–∞–∫—Å–∏–º—É–º 4 –ø–æ–¥—Ä—è–¥
            max_violations=30,  # –±–∞–Ω –ø–æ—Å–ª–µ 30 –Ω–∞—Ä—É—à–µ–Ω–∏–π
            violation_window=60,  # –≤ —Ç–µ—á–µ–Ω–∏–∏ 60 —Å–µ–∫—É–Ω–¥
        )
        dp.message.middleware(rate_limit_middleware)
        dp.callback_query.middleware(rate_limit_middleware)
        logger.info("Rate limiting: 2 req/sec, burst 4, auto-ban after 30 violations/min")

        # 3. Role check middleware (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        role_middleware = RoleCheckMiddleware(db)
        dp.message.middleware(role_middleware)
        dp.callback_query.middleware(role_middleware)

        # 4. Validation handler middleware (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ State Machine)
        validation_middleware = ValidationHandlerMiddleware()
        dp.message.middleware(validation_middleware)
        dp.callback_query.middleware(validation_middleware)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
        for router in routers:
            dp.include_router(router)

        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ %s —Ä–æ—É—Ç–µ—Ä–æ–≤", len(routers))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ error handler
        dp.errors.register(global_error_handler)

        # –í—ã–∑–æ–≤ startup —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        await on_startup(bot, db, scheduler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∏–ø—ã updates
        allowed_updates_list = [
            UpdateType.MESSAGE,
            UpdateType.CALLBACK_QUERY,
            # –ù–µ –ø–æ–ª—É—á–∞–µ–º –ª–∏—à–Ω–∏–µ update types:
            # - edited_message, channel_post –∏ —Ç.–¥. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        ]

        await dp.start_polling(
            bot,
            allowed_updates=allowed_updates_list,
            drop_pending_updates=True,
        )

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e)
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if scheduler:
            try:
                await scheduler.stop()
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ scheduler: %s", e)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        if db:
            try:
                await db.disconnect()
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ë–î: %s", e)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ storage (–¥–ª—è Redis)
        if dp and hasattr(dp.storage, "close"):
            try:
                await dp.storage.close()
                logger.info("Storage –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ storage: %s", e)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ bot session (–∫—Ä–∏—Ç–∏—á–Ω–æ!)
        if bot:
            try:
                await bot.session.close()
                logger.info("Bot session –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot session: %s", e)

        logger.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
        sys.exit(1)
