# Database Migrations with Alembic

## Структура

```
migrations/
├── env.py              # Конфигурация окружения Alembic
├── script.py.mako      # Шаблон для генерации миграций
├── versions/           # Директория с миграциями
│   └── *.py           # Файлы миграций
└── README             # Этот файл
```

## Основные команды

### Создание новой миграции

```bash
# Автоматическая генерация миграции
alembic revision --autogenerate -m "описание изменений"

# Создание пустой миграции
alembic revision -m "описание изменений"
```

### Применение миграций

```bash
# Применить все миграции
alembic upgrade head

# Применить следующую миграцию
alembic upgrade +1

# Применить конкретную миграцию
alembic upgrade <revision_id>
```

### Откат миграций

```bash
# Откатить последнюю миграцию
alembic downgrade -1

# Откатить все миграции
alembic downgrade base

# Откатить до конкретной миграции
alembic downgrade <revision_id>
```

### Информация о миграциях

```bash
# Текущая версия БД
alembic current

# История миграций
alembic history

# Показать SQL без применения
alembic upgrade head --sql
```

## Workflow

### 1. Изменение моделей

Внесите изменения в модели данных в `app/database/models.py`

### 2. Создание миграции

```bash
alembic revision --autogenerate -m "добавил поле email в таблицу users"
```

### 3. Проверка миграции

Откройте созданный файл в `migrations/versions/` и проверьте:
- Корректность SQL команд
- Наличие upgrade() и downgrade()
- Зависимости между миграциями

### 4. Применение миграции

```bash
alembic upgrade head
```

### 5. Тестирование

Протестируйте изменения в базе данных

### 6. Коммит

Закоммитьте файл миграции в git

## Пример миграции

```python
"""добавил поле email в таблицу users

Revision ID: abc123def456
Revises: previous_revision
Create Date: 2024-01-01 12:00:00

"""
from alembic import op
import sqlalchemy as sa

revision = 'abc123def456'
down_revision = 'previous_revision'

def upgrade():
    op.add_column('users', sa.Column('email', sa.String(255), nullable=True))
    op.create_index('idx_users_email', 'users', ['email'])

def downgrade():
    op.drop_index('idx_users_email', 'users')
    op.drop_column('users', 'email')
```

## Best Practices

1. **Всегда проверяйте автосгенерированные миграции**
   - Alembic может не обнаружить все изменения
   - Проверьте логику upgrade/downgrade

2. **Делайте миграции атомарными**
   - Одна миграция = одно логическое изменение
   - Упрощает откат при проблемах

3. **Тестируйте миграции**
   - Проверьте upgrade
   - Проверьте downgrade
   - Убедитесь в сохранности данных

4. **Описывайте изменения**
   - Используйте понятные сообщения
   - Добавляйте комментарии в код миграции

5. **Версионируйте миграции**
   - Всегда коммитьте файлы миграций
   - Не изменяйте уже применённые миграции

## Troubleshooting

### Alembic не видит изменения

```bash
# Убедитесь что target_metadata настроен правильно в env.py
# Проверьте импорты моделей
```

### База данных заблокирована

```bash
# Остановите бота перед миграцией
# SQLite не поддерживает concurrent migrations
```

### Конфликт миграций

```bash
# Посмотрите текущее состояние
alembic current

# Синхронизируйте с репозиторием
git pull

# Примените отсутствующие миграции
alembic upgrade head
```

### Откат не работает

```bash
# Проверьте функцию downgrade() в миграции
# Убедитесь что она реализована корректно
```

## Migration Testing

```bash
# 1. Создать тестовую копию БД
cp bot_database.db bot_database_test.db

# 2. Применить миграцию
DATABASE_PATH=bot_database_test.db alembic upgrade head

# 3. Проверить результат
sqlite3 bot_database_test.db ".schema"

# 4. Откатить
DATABASE_PATH=bot_database_test.db alembic downgrade -1

# 5. Удалить тестовую копию
rm bot_database_test.db
```
