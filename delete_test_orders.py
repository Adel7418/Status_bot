"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞ "–î–∏—Å–ø"
"""
import sqlite3
import sys
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


def delete_test_orders():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞ '–î–∏—Å–ø'"""
    
    print("\n" + "="*80)
    print("üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ó–ê–Ø–í–û–ö")
    print("="*80 + "\n")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º ID –º–∞—Å—Ç–µ—Ä–∞ "–î–∏—Å–ø"
        cursor.execute("""
            SELECT m.id, m.telegram_id, u.first_name 
            FROM masters m
            JOIN users u ON m.telegram_id = u.telegram_id
            WHERE u.first_name = '–î–∏—Å–ø'
        """)
        master = cursor.fetchone()
        
        if not master:
            print("‚ùå –ú–∞—Å—Ç–µ—Ä '–î–∏—Å–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            conn.close()
            return
        
        master_id = master['id']
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä '–î–∏—Å–ø' (ID: {master_id}, Telegram ID: {master['telegram_id']})\n")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        cursor.execute("""
            SELECT id, equipment_type, client_name, status, created_at
            FROM orders
            WHERE assigned_master_id = ?
        """, (master_id,))
        
        orders = cursor.fetchall()
        
        if not orders:
            print("‚ÑπÔ∏è  –£ –º–∞—Å—Ç–µ—Ä–∞ '–î–∏—Å–ø' –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            conn.close()
            return
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(orders)}\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        print("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:")
        print("-" * 80)
        for order in orders:
            print(f"  ID: {order['id']:3} | {order['equipment_type']:25} | {order['client_name']:20} | {order['status']}")
        print()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        response = input("‚ùì –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –∑–∞—è–≤–∫–∏? (yes/y –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è): ").strip().lower()
        
        if response not in ['yes', 'y', '–¥–∞', '–¥']:
            print("\n‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            conn.close()
            return
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫...")
        cursor.execute("DELETE FROM orders WHERE assigned_master_id = ?", (master_id,))
        deleted_count = cursor.rowcount
        
        conn.commit()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {deleted_count}\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute("SELECT COUNT(*) FROM orders")
        total_orders = cursor.fetchone()[0]
        
        print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞—è–≤–æ–∫ –≤ –ë–î: {total_orders}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        import traceback
        traceback.print_exc()
    finally:
        conn.close()
    
    print("\n" + "="*80)
    print("‚úÖ –ì–û–¢–û–í–û!")
    print("="*80 + "\n")


if __name__ == "__main__":
    delete_test_orders()

