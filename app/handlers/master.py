"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
"""

import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config import OrderStatus, UserRole
from app.database import Database
from app.keyboards.inline import get_order_actions_keyboard, get_order_list_keyboard
from app.states import CompleteOrderStates
from app.utils import calculate_profit_split, format_datetime, log_action


logger = logging.getLogger(__name__)

router = Router(name="master")
# –§–∏–ª—å—Ç—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç.–∫. –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –î–û middleware
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def btn_my_orders(message: Message, state: FSMContext):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await state.clear()

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = await db.get_master_by_telegram_id(message.from_user.id)

        if not master:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=True)

        if not orders:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n" "–ó–∞—è–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º."
            )
            return

        text = "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        by_status = {}
        for order in orders:
            if order.status not in by_status:
                by_status[order.status] = []
            by_status[order.status].append(order)

        # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_order = [
            OrderStatus.ASSIGNED,
            OrderStatus.ACCEPTED,
            OrderStatus.ONSITE,
            OrderStatus.DR,
        ]

        for status in status_order:
            if status in by_status:
                status_emoji = OrderStatus.get_status_emoji(status)
                status_name = OrderStatus.get_status_name(status)

                text += f"\n<b>{status_emoji} {status_name}:</b>\n"

                for order in by_status[status]:
                    text += f"  ‚Ä¢ –ó–∞—è–≤–∫–∞ #{order.id} - {order.equipment_type}\n"

                text += "\n"

        keyboard = get_order_list_keyboard(orders, for_master=True)

        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("view_order_master:"))
async def callback_view_order_master(callback: CallbackQuery, user_roles: list):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –º–∞—Å—Ç–µ—Ä–∞
    if UserRole.MASTER not in user_roles:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        status_emoji = OrderStatus.get_status_emoji(order.status)
        status_name = OrderStatus.get_status_name(order.status)

        text = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç
        if order.status in [OrderStatus.ONSITE, OrderStatus.DR, OrderStatus.CLOSED]:
            text += (
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
            )
        elif order.status == OrderStatus.ACCEPTED:
            text += (
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
            )
        else:
            text += (
                "<i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞\n" "–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏.</i>\n\n"
            )

        if order.notes:
            text += f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.scheduled_time:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n\n"

        if order.created_at:
            text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"

        keyboard = get_order_actions_keyboard(order, UserRole.MASTER)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("accept_order:"))
async def callback_accept_order(callback: CallbackQuery):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.ACCEPTED)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ACCEPT_ORDER",
            details=f"Accepted order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order_id}",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞.\n"
            f"–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "ACCEPT_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")


@router.callback_query(F.data.startswith("refuse_order_master:"))
async def callback_refuse_order_master(callback: CallbackQuery):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ NEW –∏ —É–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.connection.execute(
            "UPDATE orders SET status = ?, assigned_master_id = NULL WHERE id = ?",
            (OrderStatus.NEW, order_id),
        )
        await db.connection.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REFUSE_ORDER_MASTER",
            details=f"Master refused order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚ùå –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{order_id}\n"
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n" f"–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )

        log_action(callback.from_user.id, "REFUSE_ORDER_MASTER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


@router.callback_query(F.data.startswith("onsite_order:"))
async def callback_onsite_order(callback: CallbackQuery):
    """
    –ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.ONSITE)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ONSITE_ORDER",
            details=f"Master on site for order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"üè† –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–ó–∞—è–≤–∫–∞ #{order_id})",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        await callback.message.edit_text(
            f"üè† <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–ó–∞—è–≤–∫–∞ #{order_id} - –≤—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ.\n"
            f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É.",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "ONSITE_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data.startswith("complete_order:"))
async def callback_complete_order(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        await state.update_data(order_id=order_id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        from app.states import CompleteOrderStates

        await state.set_state(CompleteOrderStates.enter_total_amount)

        await callback.message.edit_text(
            f"üí∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "START_COMPLETE_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("dr_order:"))
async def callback_dr_order(callback: CallbackQuery):
    """
    –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.DR)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="DR_ORDER",
            details=f"Order #{order_id} marked as long-term repair",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚è≥ –ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç\n"
                    f"–ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        await callback.message.edit_text(
            f"‚è≥ <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n" f"–ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç.",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "DR_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_my_stats(message: Message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    db = Database()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(message.from_user.id)

        if not master:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=False)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(orders)
        by_status = {}

        for order in orders:
            by_status[order.status] = by_status.get(order.status, 0) + 1

        completed = by_status.get(OrderStatus.CLOSED, 0)
        active = sum(
            by_status.get(s, 0)
            for s in [OrderStatus.ASSIGNED, OrderStatus.ACCEPTED, OrderStatus.ONSITE]
        )
        dr = by_status.get(OrderStatus.DR, 0)

        text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n"
            f"üîß <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {master.specialization}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {master.phone}\n\n"
            f"üìà <b>–ó–∞—è–≤–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
            f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}\n"
            f"‚Ä¢ üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
            f"‚Ä¢ ‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç: {dr}\n\n"
        )

        if total > 0:
            completion_rate = (completed / total) * 100
            text += f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {completion_rate:.1f}%\n"

        await message.answer(text, parse_mode="HTML")

    finally:
        await db.disconnect()


@router.message(CompleteOrderStates.enter_total_amount)
async def process_total_amount(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –ª–∏—á–∫–µ, –∏ –≤ –≥—Ä—É–ø–ø–µ)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞
    try:
        total_amount = float(message.text.replace(",", ".").strip())
        if total_amount <= 0:
            await message.reply(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50):"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    await state.update_data(total_amount=total_amount)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    await state.set_state(CompleteOrderStates.enter_materials_cost)

    await message.reply(
        f"‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{total_amount:.2f} ‚ÇΩ</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50\n\n"
        f"–ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ –±—ã–ª–æ, –≤–≤–µ–¥–∏—Ç–µ: 0",
        parse_mode="HTML",
    )


@router.message(CompleteOrderStates.enter_materials_cost)
async def process_materials_cost(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –∑–∞–ø—Ä–æ—Å –æ–± –æ—Ç–∑—ã–≤–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –ª–∏—á–∫–µ, –∏ –≤ –≥—Ä—É–ø–ø–µ)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞
    try:
        materials_cost = float(message.text.replace(",", ".").strip())
        if materials_cost < 0:
            await message.reply(
                "‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ):"
            )
            return
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 0):"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    await state.update_data(materials_cost=materials_cost)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ–± –æ—Ç–∑—ã–≤–µ
    await state.set_state(CompleteOrderStates.confirm_review)

    await message.reply(
        f"‚úÖ –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: <b>{materials_cost:.2f} ‚ÇΩ</b>\n\n"
        f"‚ùì <b>–í–∑—è–ª–∏ –ª–∏ –≤—ã –æ—Ç–∑—ã–≤ —É –∫–ª–∏–µ–Ω—Ç–∞?</b>\n"
        f"(–ó–∞ –æ—Ç–∑—ã–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +10% –∫ –ø—Ä–∏–±—ã–ª–∏)\n\n"
        f"–û—Ç–≤–µ—Ç—å—Ç–µ:\n"
        f"‚Ä¢ <b>–î–∞</b> - –µ—Å–ª–∏ –≤–∑—è–ª–∏ –æ—Ç–∑—ã–≤\n"
        f"‚Ä¢ <b>–ù–µ—Ç</b> - –µ—Å–ª–∏ –Ω–µ –≤–∑—è–ª–∏",
        parse_mode="HTML",
    )


@router.message(CompleteOrderStates.confirm_review)
async def process_review_confirmation(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –æ—Ç–∑—ã–≤–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –ª–∏—á–∫–µ, –∏ –≤ –≥—Ä—É–ø–ø–µ)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    answer = message.text.strip().lower()

    if answer in ["–¥–∞", "yes", "lf", "+"]:
        has_review = True
    elif answer in ["–Ω–µ—Ç", "no", "ytn", "-"]:
        has_review = False
    else:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ <b>–î–∞</b> –∏–ª–∏ <b>–ù–µ—Ç</b>", parse_mode="HTML")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    order_id = data.get("order_id")
    total_amount = data.get("total_amount")
    materials_cost = data.get("materials_cost")

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(message.from_user.id)

        if not master or not order or order.assigned_master_id != master.id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            await state.clear()
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º –æ—Ç–∑—ã–≤–∞
        master_profit, company_profit = calculate_profit_split(
            total_amount, materials_cost, has_review
        )
        net_profit = total_amount - materials_cost

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        profit_rate = "50/50" if net_profit >= 7000 else "40/60"
        review_bonus_text = " + –±–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤" if has_review else ""

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.update_order_amounts(
            order_id=order_id,
            total_amount=total_amount,
            materials_cost=materials_cost,
            master_profit=master_profit,
            company_profit=company_profit,
            has_review=has_review,
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ CLOSED
        await db.update_order_status(order_id, OrderStatus.CLOSED)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=message.from_user.id,
            action="COMPLETE_ORDER",
            details=f"Completed order #{order_id}, total: {total_amount}, materials: {materials_cost}",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –æ—Ç—Ç—É–¥–∞
        group_chat_id = data.get("group_chat_id")
        group_message_id = data.get("group_message_id")

        if group_chat_id and group_message_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=group_chat_id,
                    message_id=group_message_id,
                    text=(
                        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                        f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
                        f"üìã –°—Ç–∞—Ç—É—Å: {OrderStatus.get_status_name(OrderStatus.CLOSED)}\n"
                        f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {format_datetime(datetime.now())}\n\n"
                        f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
                        f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
                        f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
                        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}\n\n"
                        f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount:.2f} ‚ÇΩ</b>\n"
                        f"‚Ä¢ –†–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: <b>{materials_cost:.2f} ‚ÇΩ</b>\n"
                        f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{net_profit:.2f} ‚ÇΩ</b>\n"
                        f"‚Ä¢ –û—Ç–∑—ã–≤: {'‚úÖ –í–∑—è—Ç (+10%)' if has_review else '‚ùå –ù–µ –≤–∑—è—Ç'}\n\n"
                        f"üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ ({profit_rate}{review_bonus_text}):</b>\n"
                        f"‚Ä¢ –ú–∞—Å—Ç–µ—Ä: <b>{master_profit:.2f} ‚ÇΩ</b>\n"
                        f"‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: <b>{company_profit:.2f} ‚ÇΩ</b>\n\n"
                        f"üéâ –†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
                    ),
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to update group message: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await message.bot.send_message(
                    order.dispatcher_id,
                    f"üí∞ <b>–ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
                    f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount:.2f} ‚ÇΩ</b>\n"
                    f"üîß –†–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: <b>{materials_cost:.2f} ‚ÇΩ</b>\n"
                    f"üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{net_profit:.2f} ‚ÇΩ</b>\n"
                    f"‚≠ê –û—Ç–∑—ã–≤: {'‚úÖ –í–∑—è—Ç (+10%)' if has_review else '‚ùå –ù–µ –≤–∑—è—Ç'}\n\n"
                    f"üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ({profit_rate}{review_bonus_text}):</b>\n"
                    f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: <b>{master_profit:.2f} ‚ÇΩ</b>\n"
                    f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: <b>{company_profit:.2f} ‚ÇΩ</b>",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (reply –¥–ª—è –≥—Ä—É–ø–ø, answer –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤)
        review_text = (
            "‚≠ê <b>–û—Ç–∑—ã–≤ –≤–∑—è—Ç!</b> –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ +10%\n" if has_review else ""
        )
        completion_message = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"{review_text}"
            f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount:.2f} ‚ÇΩ</b>\n"
            f"‚Ä¢ –†–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: <b>{materials_cost:.2f} ‚ÇΩ</b>\n"
            f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{net_profit:.2f} ‚ÇΩ</b>\n\n"
            f"üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ ({profit_rate}{review_bonus_text}):</b>\n"
            f"üë®‚Äçüîß –í–∞—à–∞ –¥–æ–ª—è: <b>{master_profit:.2f} ‚ÇΩ</b>\n"
            f"üè¢ –î–æ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: <b>{company_profit:.2f} ‚ÇΩ</b>\n\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ"
        )

        if message.chat.type in ["group", "supergroup"]:
            await message.reply(completion_message, parse_mode="HTML")
        else:
            await message.answer(completion_message, parse_mode="HTML")

        log_action(message.from_user.id, "COMPLETE_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()
        await state.clear()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def btn_settings_master(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    db = Database()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(message.from_user.id)

        if not master:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        user = await db.get_user_by_telegram_id(message.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        role_names = {
            UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            UserRole.DISPATCHER: "–î–∏—Å–ø–µ—Ç—á–µ—Ä",
            UserRole.MASTER: "–ú–∞—Å—Ç–µ—Ä",
            UserRole.UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        }

        if user:
            user_roles = user.get_roles()
            roles_display = ", ".join([role_names.get(r, r) for r in user_roles])
        else:
            roles_display = role_names[UserRole.MASTER]

        settings_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {master.get_display_name()}\n"
            f"üÜî <b>Telegram ID:</b> <code>{master.telegram_id}</code>\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {master.phone}\n"
            f"üîß <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {master.specialization}\n"
            f"üëî <b>–†–æ–ª–∏:</b> {roles_display}\n"
        )

        if user and user.username:
            settings_text += f"üì± <b>Username:</b> @{user.username}\n"

        status_emoji = "‚úÖ" if master.is_approved else "‚è≥"
        active_emoji = "üü¢" if master.is_active else "üî¥"

        settings_text += f"\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–û–¥–æ–±—Ä–µ–Ω' if master.is_approved else '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è'}\n"
        settings_text += f"üîÑ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {active_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if master.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"

        await message.answer(settings_text, parse_mode="HTML")

    finally:
        await db.disconnect()
