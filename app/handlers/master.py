"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
"""

import logging
from datetime import UTC, datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config import OrderStatus, UserRole
from app.database import Database
from app.keyboards.inline import get_order_actions_keyboard, get_order_list_keyboard
from app.states import CompleteOrderStates, LongRepairStates, RescheduleOrderStates
from app.utils import format_datetime, get_now, log_action


logger = logging.getLogger(__name__)

router = Router(name="master")
# –§–∏–ª—å—Ç—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç.–∫. –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –î–û middleware
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def btn_my_orders(message: Message, state: FSMContext):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type == "private":
        await message.answer(
            "‚ö†Ô∏è <b>–†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ!</b>\n\n"
            "–î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ.",
            parse_mode="HTML",
        )
        return

    await state.clear()

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = await db.get_master_by_telegram_id(message.from_user.id)

        if not master:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=True)

        if not orders:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n" "–ó–∞—è–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º."
            )
            return

        text = "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        by_status = {}
        for order in orders:
            if order.status not in by_status:
                by_status[order.status] = []
            by_status[order.status].append(order)

        # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_order = [
            OrderStatus.ASSIGNED,
            OrderStatus.ACCEPTED,
            OrderStatus.ONSITE,
            OrderStatus.DR,
        ]

        for status in status_order:
            if status in by_status:
                status_emoji = OrderStatus.get_status_emoji(status)
                status_name = OrderStatus.get_status_name(status)

                text += f"\n<b>{status_emoji} {status_name}:</b>\n"

                for order in by_status[status]:
                    text += f"  ‚Ä¢ –ó–∞—è–≤–∫–∞ #{order.id} - {order.equipment_type}\n"

                text += "\n"

        keyboard = get_order_list_keyboard(orders, for_master=True)

        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("view_order_master:"))
async def callback_view_order_master(callback: CallbackQuery, user_roles: list):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –º–∞—Å—Ç–µ—Ä–∞
    if UserRole.MASTER not in user_roles:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        status_emoji = OrderStatus.get_status_emoji(order.status)
        status_name = OrderStatus.get_status_name(order.status)

        text = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç
        if order.status in [OrderStatus.ONSITE, OrderStatus.DR, OrderStatus.CLOSED]:
            text += (
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
            )
        elif order.status == OrderStatus.ACCEPTED:
            text += (
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
            )
        else:
            text += (
                "<i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞\n" "–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏.</i>\n\n"
            )

        if order.notes:
            text += f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.scheduled_time:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–º–æ–Ω—Ç–µ
        if order.status == OrderStatus.DR:
            if order.estimated_completion_date:
                text += f"‚è∞ <b>–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {order.estimated_completion_date}\n"
            if order.prepayment_amount:
                text += f"üí∞ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> {order.prepayment_amount:.2f} ‚ÇΩ\n"
            text += "\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫
        if order.status == OrderStatus.CLOSED and order.total_amount:
            net_profit = order.total_amount - (order.materials_cost or 0)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É
            base_rate = "50/50" if net_profit >= 7000 else "40/60"

            text += "\nüí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            text += f"‚Ä¢ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{order.total_amount:.2f} ‚ÇΩ</b>\n"
            text += f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{net_profit:.2f} ‚ÇΩ</b>\n"
            text += f"\nüìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ({base_rate}):</b>\n"

            if order.master_profit:
                master_percent = (order.master_profit / net_profit * 100) if net_profit > 0 else 0
                text += (
                    f"‚Ä¢ –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å: <b>{order.master_profit:.2f} ‚ÇΩ</b> ({master_percent:.0f}%)\n"
                )
            if order.company_profit:
                company_percent = (order.company_profit / net_profit * 100) if net_profit > 0 else 0
                text += f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏: <b>{order.company_profit:.2f} ‚ÇΩ</b> ({company_percent:.0f}%)\n"

            # –ù–∞–¥–±–∞–≤–∫–∏ –∏ –±–æ–Ω—É—Å—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ True)
            bonuses = []
            if order.has_review is True:
                bonuses.append("‚úÖ –û—Ç–∑—ã–≤ (+10% –≤–∞–º)")
            if order.out_of_city is True:
                bonuses.append("‚úÖ –í—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥")

            if bonuses:
                text += f"\nüéÅ <b>–ù–∞–¥–±–∞–≤–∫–∏:</b> {', '.join(bonuses)}\n"

            text += "\n"

        if order.created_at:
            text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"

        keyboard = get_order_actions_keyboard(order, UserRole.MASTER)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("accept_order:"))
async def callback_accept_order(callback: CallbackQuery, user_roles: list):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        callback: Callback query
        user_roles: –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–∑ RoleCheckMiddleware)
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ State Machine)
        await db.update_order_status(
            order_id=order_id,
            status=OrderStatus.ACCEPTED,
            changed_by=callback.from_user.id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ACCEPT_ORDER",
            details=f"Accepted order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if order.dispatcher_id:
            from app.utils import safe_send_message

            result = await safe_send_message(
                callback.bot,
                order.dispatcher_id,
                f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order_id}",
                parse_mode="HTML",
            )
            if not result:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id} after retries")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
        acceptance_text = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if order.notes:
            acceptance_text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if order.scheduled_time:
            acceptance_text += f"\n‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É:</b> {order.scheduled_time}\n"

        acceptance_text += (
            "\n<b>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç.</b>\n"
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –Ω–∞ –º–µ—Å—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–Ø –Ω–∞ –æ–±—ä–µ–∫—Ç–µ"
        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        keyboard_builder = InlineKeyboardBuilder()
        keyboard_builder.row(
            InlineKeyboardButton(text="üè† –Ø –Ω–∞ –æ–±—ä–µ–∫—Ç–µ", callback_data=f"onsite_order:{order_id}")
        )

        await callback.message.edit_text(
            acceptance_text, parse_mode="HTML", reply_markup=keyboard_builder.as_markup()
        )

        log_action(callback.from_user.id, "ACCEPT_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞: 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    from app.utils import safe_answer_callback

    await safe_answer_callback(callback, "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!", cache_time=10)


@router.callback_query(F.data.startswith("refuse_order_master:"))
async def callback_refuse_order_master(callback: CallbackQuery):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ NEW –∏ —É–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (ORM compatible)
        if hasattr(db, "unassign_master_from_order"):
            await db.unassign_master_from_order(order_id)
        else:
            # Legacy: –ø—Ä—è–º–æ–π SQL
            await db.connection.execute(
                "UPDATE orders SET status = ?, assigned_master_id = NULL WHERE id = ?",
                (OrderStatus.NEW, order_id),
            )
            await db.connection.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REFUSE_ORDER_MASTER",
            details=f"Master refused order #{order_id}",
        )

        # –ú–µ–Ω—é –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ update_order_status

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if order.dispatcher_id:
            from app.utils import safe_send_message

            result = await safe_send_message(
                callback.bot,
                order.dispatcher_id,
                f"‚ùå –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{order_id}\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
                parse_mode="HTML",
            )
            if not result:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id} after retries")

        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n" f"–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )

        log_action(callback.from_user.id, "REFUSE_ORDER_MASTER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞: 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    from app.utils import safe_answer_callback

    await safe_answer_callback(callback, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", cache_time=8)


@router.callback_query(F.data.startswith("onsite_order:"))
async def callback_onsite_order(callback: CallbackQuery, user_roles: list):
    """
    –ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ

    Args:
        callback: Callback query
        user_roles: –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–∑ RoleCheckMiddleware)
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ State Machine)
        await db.update_order_status(
            order_id=order_id,
            status=OrderStatus.ONSITE,
            changed_by=callback.from_user.id,
            user_roles=user_roles,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ONSITE_ORDER",
            details=f"Master on site for order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if order.dispatcher_id:
            from app.utils import safe_send_message

            result = await safe_send_message(
                callback.bot,
                order.dispatcher_id,
                f"üè† –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–ó–∞—è–≤–∫–∞ #{order_id})",
                parse_mode="HTML",
            )
            if not result:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id} after retries")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        keyboard_builder = InlineKeyboardBuilder()
        keyboard_builder.row(
            InlineKeyboardButton(text="üí∞ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_order:{order_id}")
        )
        keyboard_builder.row(
            InlineKeyboardButton(text="‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", callback_data=f"dr_order:{order_id}")
        )

        await callback.message.edit_text(
            f"üè† <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–ó–∞—è–≤–∫–∞ #{order_id} - –≤—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ.\n\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:</b> {order.client_phone}\n\n"
            f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=keyboard_builder.as_markup(),
        )

        log_action(callback.from_user.id, "ONSITE_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data.startswith("complete_order:"))
async def callback_complete_order(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        await state.update_data(order_id=order_id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        from app.states import CompleteOrderStates

        await state.set_state(CompleteOrderStates.enter_total_amount)

        await callback.message.edit_text(
            f"üí∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 5000, 5000.50 –∏–ª–∏ 0",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "START_COMPLETE_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("dr_order:"))
async def callback_dr_order(callback: CallbackQuery, state: FSMContext):
    """
    –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç - –∑–∞–ø—Ä–æ—Å —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    order_id = int(callback.data.split(":")[1])

    logger.debug(f"[DR] Starting DR process for order #{order_id} by user {callback.from_user.id}")

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        logger.debug(f"[DR] Order found: {order is not None}, Master found: {master is not None}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            logger.warning(
                f"[DR] Access denied - Master ID: {master.id if master else None}, Assigned: {order.assigned_master_id if order else None}"
            )
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ state
        await state.update_data(order_id=order_id)

        logger.debug("[DR] Transitioning to LongRepairStates.enter_completion_date_and_prepayment")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
        await state.set_state(LongRepairStates.enter_completion_date_and_prepayment)

        await callback.message.edit_text(
            f"‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç - –ó–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞</b> –∏ <b>–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É</b> (–µ—Å–ª–∏ –±—ã–ª–∞).\n\n"
            f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            f"‚Ä¢ <code>20.10.2025</code>\n"
            f"‚Ä¢ <code>20.10.2025 –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 2000</code>\n"
            f"‚Ä¢ <code>—á–µ—Ä–µ–∑ 3 –¥–Ω—è</code>\n"
            f"‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞, –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 1500</code>\n"
            f"‚Ä¢ <code>–Ω–µ–¥–µ–ª—è</code>\n\n"
            f"<i>–ï—Å–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ –±—ã–ª–æ - –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫.</i>",
            parse_mode="HTML",
        )

        await callback.answer()

    finally:
        await db.disconnect()


@router.message(LongRepairStates.enter_completion_date_and_prepayment, F.text)
async def process_dr_info(message: Message, state: FSMContext, user_roles: list):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –¥–ª—è DR

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    import re

    logger.debug(f"[DR] Processing DR info from user {message.from_user.id}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    order_id = data.get("order_id")

    logger.debug(f"[DR] Order ID from state: {order_id}, FSM data: {data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ä–æ–∫–∞—Ö –∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ."
        )
        return

    # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = message.text.strip()
    logger.debug(f"[DR] Input text: '{text}'")

    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –∏ —Å—É–º–º—É
    prepayment_amount = None
    completion_date = text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã: "–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 2000" –∏–ª–∏ "–∞–≤–∞–Ω—Å 1500" –∏ —Ç.–¥.
    prepayment_patterns = [
        r"–ø—Ä–µ–¥–æ–ø–ª–∞—Ç[–∞—ã]?\s+(\d+(?:[.,]\d+)?)",
        r"–∞–≤–∞–Ω—Å\s+(\d+(?:[.,]\d+)?)",
        r"–ø—Ä–µ–¥–≤\.?\s+(\d+(?:[.,]\d+)?)",
    ]

    for pattern in prepayment_patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            prepayment_str = match.group(1).replace(",", ".")
            logger.debug(f"[DR] Found prepayment pattern: {pattern}, value: {prepayment_str}")
            try:
                prepayment_amount = float(prepayment_str)
                # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –∏–∑ —Å—Ä–æ–∫–∞
                completion_date = re.sub(pattern, "", text, flags=re.IGNORECASE).strip()
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã
                completion_date = re.sub(r"\s*,\s*$", "", completion_date).strip()
                logger.debug(
                    f"[DR] Parsed - completion_date: '{completion_date}', prepayment: {prepayment_amount}"
                )
                break
            except ValueError as e:
                logger.warning(f"[DR] Failed to parse prepayment amount '{prepayment_str}': {e}")

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            logger.error(f"[DR] Error - Order not found: {order_id}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –î–ª—è –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        master = await db.get_master_by_telegram_id(message.from_user.id)

        logger.debug(f"[DR] Order found: {order is not None}, Master found: {master is not None}")

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω
        if master and order.assigned_master_id != master.id:
            logger.error(f"[DR] Master {master.id} not assigned to order {order_id}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞: —ç—Ç–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –º–∞—Å—Ç–µ—Ä—É")
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        logger.debug(
            f"[DR] Updating order #{order_id}: "
            f"completion_date='{completion_date}', prepayment={prepayment_amount}"
        )

        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è DR
        await db.connection.execute(
            """
            UPDATE orders
            SET estimated_completion_date = ?,
                prepayment_amount = ?
            WHERE id = ?
            """,
            (completion_date, prepayment_amount, order_id),
        )
        await db.connection.commit()

        # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ State Machine
        await db.update_order_status(
            order_id=order_id,
            status=OrderStatus.DR,
            changed_by=message.from_user.id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        logger.info(f"[DR] Order #{order_id} updated to DR status successfully")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=message.from_user.id,
            action="DR_ORDER",
            details=f"Order #{order_id} marked as long-term repair. Completion: {completion_date}, Prepayment: {prepayment_amount or 0}",
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_text = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç</b>\n\n"
            f"‚è∞ <b>–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫:</b> {completion_date}\n"
        )

        if prepayment_amount:
            result_text += f"üí∞ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> {prepayment_amount:.2f} ‚ÇΩ\n"
        else:
            result_text += "üí∞ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> –Ω–µ –±—ã–ª–æ\n"

        result_text += "\n<i>–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</i>"

        await message.reply(result_text, parse_mode="HTML")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –ø–µ—Ä–µ–≤–µ–ª –∑–∞—è–≤–∫—É –≤ DR
            initiator_name = master.get_display_name() if master else message.from_user.full_name

            notification = (
                f"‚è≥ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç</b>\n\n"
                f"üë®‚Äçüîß –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {initiator_name}\n"
                f"‚è∞ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫: {completion_date}\n"
            )

            if prepayment_amount:
                notification += f"üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {prepayment_amount:.2f} ‚ÇΩ"

            logger.debug(f"[DR] Sending notification to dispatcher {order.dispatcher_id}")

            try:
                await message.bot.send_message(order.dispatcher_id, notification, parse_mode="HTML")
                logger.debug("[DR] Dispatcher notification sent successfully")
            except Exception as e:
                logger.error(f"[DR] Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(message.from_user.id, "DR_ORDER", f"Order #{order_id}")

        logger.info(f"[DR] ‚úÖ Order #{order_id} successfully marked as DR")

    except Exception as e:
        logger.exception(f"[DR] ‚ùå Error processing DR for order #{order_id}: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–∞—è–≤–∫–∏ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É."
        )
    finally:
        await db.disconnect()
        await state.clear()
        logger.debug(f"[DR] State cleared and DB disconnected for order #{order_id}")


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_my_stats(message: Message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.type == "private":
        await message.answer(
            "‚ö†Ô∏è <b>–†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ!</b>\n\n"
            "–î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ.",
            parse_mode="HTML",
        )
        return

    db = Database()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(message.from_user.id)

        if not master:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=False)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(orders)
        by_status = {}

        for order in orders:
            by_status[order.status] = by_status.get(order.status, 0) + 1

        completed = by_status.get(OrderStatus.CLOSED, 0)
        active = sum(
            by_status.get(s, 0)
            for s in [OrderStatus.ASSIGNED, OrderStatus.ACCEPTED, OrderStatus.ONSITE]
        )
        dr = by_status.get(OrderStatus.DR, 0)

        text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n"
            f"üîß <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {master.specialization}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {master.phone}\n\n"
            f"üìà <b>–ó–∞—è–≤–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
            f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}\n"
            f"‚Ä¢ üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
            f"‚Ä¢ ‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç: {dr}\n\n"
        )

        if total > 0:
            completion_rate = (completed / total) * 100
            text += f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {completion_rate:.1f}%\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
        from app.keyboards.inline import get_master_stats_keyboard

        keyboard = get_master_stats_keyboard(master.id)

        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()


@router.message(CompleteOrderStates.enter_total_amount)
async def process_total_amount(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –ª–∏—á–∫–µ, –∏ –≤ –≥—Ä—É–ø–ø–µ)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞
    try:
        total_amount = float(message.text.replace(",", ".").strip())
        if total_amount < 0:
            await message.reply("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000, 5000.50 –∏–ª–∏ 0):"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    await state.update_data(total_amount=total_amount)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    await state.set_state(CompleteOrderStates.enter_materials_cost)

    await message.reply(
        f"‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{total_amount:.2f} ‚ÇΩ</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50\n\n"
        f"–ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ –±—ã–ª–æ, –≤–≤–µ–¥–∏—Ç–µ: 0",
        parse_mode="HTML",
    )


@router.message(CompleteOrderStates.enter_materials_cost)
async def process_materials_cost(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –∑–∞–ø—Ä–æ—Å –æ–± –æ—Ç–∑—ã–≤–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ –ª–∏—á–∫–µ, –∏ –≤ –≥—Ä—É–ø–ø–µ)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞
    try:
        materials_cost = float(message.text.replace(",", ".").strip())
        if materials_cost < 0:
            await message.reply(
                "‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ):"
            )
            return
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 0):"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    await state.update_data(materials_cost=materials_cost)

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    data = await state.get_data()
    order_id = data.get("order_id")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ–± –æ—Ç–∑—ã–≤–µ
    await state.set_state(CompleteOrderStates.confirm_review)

    from app.keyboards.inline import get_yes_no_keyboard

    await message.reply(
        f"‚úÖ –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: <b>{materials_cost:.2f} ‚ÇΩ</b>\n\n"
        f"‚ùì <b>–í–∑—è–ª–∏ –ª–∏ –≤—ã –æ—Ç–∑—ã–≤ —É –∫–ª–∏–µ–Ω—Ç–∞?</b>\n"
        f"(–ó–∞ –æ—Ç–∑—ã–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +10% –∫ –ø—Ä–∏–±—ã–ª–∏)",
        parse_mode="HTML",
        reply_markup=get_yes_no_keyboard("confirm_review", order_id),
    )


@router.callback_query(lambda c: c.data.startswith("confirm_review"))
async def process_review_confirmation_callback(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏

    Args:
        callback_query: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    from app.utils import parse_callback_data

    callback_data = parse_callback_data(callback_query.data)
    order_id = callback_data["params"][0] if len(callback_data["params"]) > 0 else None
    answer = callback_data["params"][1] if len(callback_data["params"]) > 1 else None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç
    has_review = answer == "yes"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—Ç–∑—ã–≤–µ
    await state.update_data(has_review=has_review)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –≤—ã–µ–∑–¥–∞ –∑–∞ –≥–æ—Ä–æ–¥
    await state.set_state(CompleteOrderStates.confirm_out_of_city)

    review_text = "‚úÖ –û—Ç–∑—ã–≤ –≤–∑—è—Ç!" if has_review else "‚ùå –û—Ç–∑—ã–≤ –Ω–µ –≤–∑—è—Ç"

    from app.keyboards.inline import get_yes_no_keyboard

    await callback_query.message.edit_text(
        f"{review_text}\n\n"
        f"üöó <b>–ë—ã–ª –ª–∏ –≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥?</b>\n"
        f"(–ó–∞ –≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +10% –∫ –ø—Ä–∏–±—ã–ª–∏)",
        parse_mode="HTML",
        reply_markup=get_yes_no_keyboard("confirm_out_of_city", int(order_id)),
    )

    await callback_query.answer()


@router.message(CompleteOrderStates.confirm_review)
async def process_review_confirmation_fallback(message: Message, state: FSMContext):
    """
    Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await message.reply(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )


@router.callback_query(lambda c: c.data.startswith("confirm_out_of_city"))
async def process_out_of_city_confirmation_callback(
    callback_query: CallbackQuery, state: FSMContext, user_roles: list
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–µ–∑–¥–∞ –∑–∞ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

    Args:
        callback_query: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    from app.utils import parse_callback_data

    callback_data = parse_callback_data(callback_query.data)
    order_id = callback_data["params"][0] if len(callback_data["params"]) > 0 else None
    answer = callback_data["params"][1] if len(callback_data["params"]) > 1 else None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç
    out_of_city = answer == "yes"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    total_amount = data.get("total_amount")
    materials_cost = data.get("materials_cost")
    has_review = data.get("has_review")
    acting_as_master_id = data.get(
        "acting_as_master_id"
    )  # ID –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç –µ–≥–æ –∏–º–µ–Ω–∏

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(int(order_id))

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞
        if acting_as_master_id:
            master = await db.get_master_by_telegram_id(acting_as_master_id)
        else:
            master = await db.get_master_by_telegram_id(callback_query.from_user.id)

        if not master or not order or order.assigned_master_id != master.id:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º."
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º –æ—Ç–∑—ã–≤–∞ –∏ –≤—ã–µ–∑–¥–∞ –∑–∞ –≥–æ—Ä–æ–¥
        from app.utils.helpers import calculate_profit_split

        master_profit, company_profit = calculate_profit_split(
            total_amount, materials_cost, has_review, out_of_city
        )
        net_profit = total_amount - materials_cost

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        profit_rate = "50/50" if net_profit >= 7000 else "40/60"
        bonus_text = ""
        if has_review:
            bonus_text += " + –±–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤"
        if out_of_city:
            bonus_text += " + –±–æ–Ω—É—Å –∑–∞ –≤—ã–µ–∑–¥"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.update_order_amounts(
            order_id=int(order_id),
            total_amount=total_amount,
            materials_cost=materials_cost,
            master_profit=master_profit,
            company_profit=company_profit,
            has_review=has_review,
            out_of_city=out_of_city,
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ CLOSED (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ State Machine)
        from app.config import OrderStatus

        await db.update_order_status(
            order_id=int(order_id),
            status=OrderStatus.CLOSED,
            changed_by=callback_query.from_user.id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑—É
        try:
            from app.services.order_reports import OrderReportsService

            order_reports_service = OrderReportsService()

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            updated_order = await db.get_order_by_id(int(order_id))

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            dispatcher = None
            if updated_order.dispatcher_id:
                dispatcher = await db.get_user_by_telegram_id(updated_order.dispatcher_id)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç—á–µ—Ç–µ
            await order_reports_service.create_order_report(updated_order, master, dispatcher)
            logger.info(f"Order report created for order #{order_id}")

        except Exception as e:
            logger.error(f"Failed to create order report for #{order_id}: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback_query.from_user.id,
            action="COMPLETE_ORDER",
            details=f"Completed order #{order_id}, total: {total_amount}, materials: {materials_cost}",
        )

        # ‚ú® –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–ò–°–ü–ï–¢–ß–ï–†–ê –û –ó–ê–ö–†–´–¢–ò–ò –ó–ê–Ø–í–ö–ò
        if order.dispatcher_id:
            from app.utils import safe_send_message

            notification_text = (
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìã <b>–ó–∞—è–≤–∫–∞ #{order_id}</b>\n"
                f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n\n"
                f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
                f"‚îî –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} ‚ÇΩ\n"
                f"‚îî –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {materials_cost:.2f} ‚ÇΩ\n"
                f"‚îî –ü—Ä–∏–±—ã–ª—å: {net_profit:.2f} ‚ÇΩ\n\n"
                f"üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n"
                f"‚îî –ú–∞—Å—Ç–µ—Ä: {master_profit:.2f} ‚ÇΩ\n"
                f"‚îî –ö–æ–º–ø–∞–Ω–∏—è: {company_profit:.2f} ‚ÇΩ\n"
            )

            if has_review:
                notification_text += "\n‚≠ê <b>–û—Ç–∑—ã–≤:</b> –î–∞"
            if out_of_city:
                notification_text += "\nüöó <b>–í—ã–µ–∑–¥:</b> –î–∞"

            result = await safe_send_message(
                callback_query.bot,
                order.dispatcher_id,
                notification_text,
                parse_mode="HTML",
            )

            if not result:
                logger.error(
                    f"Failed to notify dispatcher {order.dispatcher_id} about order #{order_id} completion"
                )
            else:
                logger.info(
                    f"Dispatcher {order.dispatcher_id} notified about order #{order_id} completion"
                )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        out_of_city_text = "üöó –î–∞" if out_of_city else "‚ùå –ù–µ—Ç"
        review_text = "‚≠ê –î–∞" if has_review else "‚ùå –ù–µ—Ç"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä <b>–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            f"‚îî –û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount:.2f} ‚ÇΩ</b>\n"
            f"‚îî –†–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: <b>{materials_cost:.2f} ‚ÇΩ</b>\n"
            f"‚îî –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{net_profit:.2f} ‚ÇΩ</b>\n\n"
            f"üí∞ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ ({profit_rate}{bonus_text}):</b>\n"
            f"‚îî –ú–∞—Å—Ç–µ—Ä: <b>{master_profit:.2f} ‚ÇΩ</b>\n"
            f"‚îî –ö–æ–º–ø–∞–Ω–∏—è: <b>{company_profit:.2f} ‚ÇΩ</b>\n\n"
            f"üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
            f"‚îî –û—Ç–∑—ã–≤: {review_text}\n"
            f"‚îî –í—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥: {out_of_city_text}",
            parse_mode="HTML",
        )

        await callback_query.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        logger.error(f"Error completing order #{order_id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    finally:
        await db.disconnect()


@router.message(CompleteOrderStates.confirm_out_of_city)
async def process_out_of_city_confirmation_fallback(message: Message, state: FSMContext):
    """
    Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await message.reply(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def btn_settings_master(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    db = Database()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(message.from_user.id)

        if not master:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        user = await db.get_user_by_telegram_id(message.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        role_names = {
            UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            UserRole.DISPATCHER: "–î–∏—Å–ø–µ—Ç—á–µ—Ä",
            UserRole.MASTER: "–ú–∞—Å—Ç–µ—Ä",
            UserRole.UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        }

        if user:
            user_roles = user.get_roles()
            roles_display = ", ".join([role_names.get(r, r) for r in user_roles])
        else:
            roles_display = role_names[UserRole.MASTER]

        settings_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {master.get_display_name()}\n"
            f"üÜî <b>Telegram ID:</b> <code>{master.telegram_id}</code>\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {master.phone}\n"
            f"üîß <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {master.specialization}\n"
            f"üëî <b>–†–æ–ª–∏:</b> {roles_display}\n"
        )

        if user and user.username:
            settings_text += f"üì± <b>Username:</b> @{user.username}\n"

        status_emoji = "‚úÖ" if master.is_approved else "‚è≥"
        active_emoji = "üü¢" if master.is_active else "üî¥"

        settings_text += f"\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–û–¥–æ–±—Ä–µ–Ω' if master.is_approved else '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è'}\n"
        settings_text += f"üîÑ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {active_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if master.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"

        await message.answer(settings_text, parse_mode="HTML")

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("export_order:"))
async def callback_export_order_master(callback: CallbackQuery):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏ –≤ Excel (–¥–ª—è –º–∞—Å—Ç–µ—Ä–∞)

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    await callback.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel —Ñ–∞–π–ª...")

    from app.services.order_export import OrderExportService

    excel_file = await OrderExportService.export_order_to_excel(order_id)

    if excel_file:
        await callback.message.answer_document(
            document=excel_file, caption=f"üìä –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #{order_id}"
        )
        logger.info(f"Order #{order_id} exported to Excel by master {callback.from_user.id}")
    else:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


# ==================== –ü–ï–†–ï–ù–û–° –ó–ê–Ø–í–ö–ò ====================


@router.callback_query(F.data.startswith("reschedule_order:"))
async def callback_reschedule_order(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞—è–≤–∫–∏

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ ASSIGNED –∏–ª–∏ ACCEPTED
        if order.status not in [OrderStatus.ASSIGNED, OrderStatus.ACCEPTED]:
            await callback.answer(
                "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '–ù–∞–∑–Ω–∞—á–µ–Ω–∞' –∏–ª–∏ '–ü—Ä–∏–Ω—è—Ç–∞'", show_alert=True
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
        await state.update_data(order_id=order_id, reschedule_initiated_by=callback.from_user.id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(RescheduleOrderStates.enter_new_time)

        current_time = order.scheduled_time or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        await callback.message.edit_text(
            f"üìÖ <b>–ü–µ—Ä–µ–Ω–æ—Å –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
            f"‚è∞ –°–µ–π—á–∞—Å: {current_time}\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ 14:00, —Å–µ–≥–æ–¥–Ω—è 18:00, —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞</i>",
            parse_mode="HTML",
        )

        await callback.answer()

    finally:
        await db.disconnect()


@router.message(RescheduleOrderStates.enter_new_time)
async def process_reschedule_new_time(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞—è–≤–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    new_time = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
    await state.update_data(new_scheduled_time=new_time)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ø—Ä–∏—á–∏–Ω—ã
    await state.set_state(RescheduleOrderStates.enter_reason)

    await message.reply(
        f"‚úÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: <b>{new_time}</b>\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ–Ω–æ—Å–∞:\n"
        f"<i>(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)</i>",
        parse_mode="HTML",
    )


@router.message(RescheduleOrderStates.enter_reason)
async def process_reschedule_reason(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    reason = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª "-", –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—Ç
    if reason == "-":
        reason = None

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    order_id = data.get("order_id")
    new_time = data.get("new_scheduled_time")
    initiated_by = data.get("reschedule_initiated_by")

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        old_time = order.scheduled_time or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        await db.connection.execute(
            """
            UPDATE orders
            SET scheduled_time = ?,
                rescheduled_count = rescheduled_count + 1,
                last_rescheduled_at = ?,
                reschedule_reason = ?
            WHERE id = ?
            """,
            (new_time, get_now(), reason, order_id),
        )
        await db.connection.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=message.from_user.id,
            action="RESCHEDULE_ORDER",
            details=f"Order #{order_id} rescheduled from '{old_time}' to '{new_time}'. Reason: {reason or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}",
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_text = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞</b>\n\n"
            f"–ë—ã–ª–æ: {old_time}\n"
            f"–°—Ç–∞–ª–æ: <b>{new_time}</b>\n"
        )

        if reason:
            result_text += f"\nüìù {reason}"

        result_text += "\n\n<i>–î–∏—Å–ø–µ—Ç—á–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω</i>"

        await message.reply(result_text, parse_mode="HTML")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            master = await db.get_master_by_telegram_id(initiated_by)
            master_name = master.get_display_name() if master else f"ID: {initiated_by}"

            notification = (
                f"üìÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞</b>\n\n"
                f"üë®‚Äçüîß {master_name}\n"
                f"üë§ {order.client_name} - {order.client_phone}\n"
                f"üîß {order.equipment_type}\n\n"
                f"–ë—ã–ª–æ: {old_time}\n"
                f"<b>–°—Ç–∞–ª–æ: {new_time}</b>\n"
            )

            if reason:
                notification += f"\nüìù {reason}"

            notification += "\n\nüí° –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

            try:
                await message.bot.send_message(order.dispatcher_id, notification, parse_mode="HTML")
                logger.info(f"Reschedule notification sent to dispatcher {order.dispatcher_id}")
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(message.from_user.id, "RESCHEDULE_ORDER", f"Order #{order_id}")

        logger.info(f"‚úÖ Order #{order_id} successfully rescheduled to '{new_time}'")

    except Exception as e:
        logger.exception(f"‚ùå Error rescheduling order #{order_id}: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É."
        )
    finally:
        await db.disconnect()
        await state.clear()


# ==================== EXCEL –û–¢–ß–ï–¢–´ –î–õ–Ø –ú–ê–°–¢–ï–†–û–í ====================


@router.callback_query(F.data.startswith("master_report_excel:"))
async def callback_master_report_excel(callback: CallbackQuery):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Excel –æ—Ç—á–µ—Ç–∞ –º–∞—Å—Ç–µ—Ä—É

    Args:
        callback: Callback query
    """
    master_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–π –æ—Ç—á–µ—Ç
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        if not master or master.id != master_id:
            await callback.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ—Ç—á–µ—Ç—ã", show_alert=True)
            return

        await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")

        await callback.message.edit_text(
            "‚è≥ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", parse_mode="HTML"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        from app.services.master_reports import MasterReportsService

        reports_service = MasterReportsService(db)

        excel_file = await reports_service.generate_master_report_excel(
            master_id=master_id,
            save_to_archive=False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤, —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=excel_file,
            caption=(
                f"üìä <b>–í–∞—à –ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
                f"üë§ –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now(UTC).strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–í –æ—Ç—á–µ—Ç–µ 2 –ª–∏—Å—Ç–∞:\n"
                f"‚Ä¢ üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
                f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
            ),
            parse_mode="HTML",
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await callback.message.delete()

        logger.info(f"Excel –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä—É {master_id}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
        )
    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("master_reports_archive:"))
async def callback_master_reports_archive(callback: CallbackQuery):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
    """
    master_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Ç–µ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ –æ—Ç—á–µ—Ç—ã
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        if not master or master.id != master_id:
            await callback.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ—Ç—á–µ—Ç—ã", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        from app.services.master_reports import MasterReportsService

        reports_service = MasterReportsService(db)

        archived_reports = await reports_service.get_master_archived_reports(master_id, limit=10)

        if not archived_reports:
            await callback.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n\n"
                "–ê—Ä—Ö–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π.",
                show_alert=True,
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üìö <b>–ê—Ä—Ö–∏–≤ –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
        text += f"–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {len(archived_reports)}\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç—á–µ—Ç, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –µ–≥–æ:"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏
        from app.keyboards.inline import get_master_archived_reports_keyboard

        keyboard = get_master_archived_reports_keyboard(archived_reports, master_id)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("download_archive_report:"))
async def callback_download_archive_report(callback: CallbackQuery):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

    Args:
        callback: Callback query
    """
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: report_id_master_id
    data = callback.data.split(":")[1]
    report_id, master_id = map(int, data.split("_"))

    db = Database()
    await db.connect()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        if not master or master.id != master_id:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –æ—Ç—á–µ—Ç—É", show_alert=True)
            return

        await callback.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç—á–µ—Ç...")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
        from app.services.master_reports import MasterReportsService

        reports_service = MasterReportsService(db)

        excel_file = await reports_service.get_archived_report_file(report_id, master_id)

        if not excel_file:
            await callback.answer("‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ
        report = await db.get_master_report_archive_by_id(report_id)

        caption = (
            f"üìö <b>–ê—Ä—Ö–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {report.period_start.strftime('%d.%m.%Y')} - {report.period_end.strftime('%d.%m.%Y')}\n"
            f"üìã –ó–∞—è–≤–æ–∫: {report.total_orders}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {report.completed_orders}\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: {report.total_revenue:.2f} ‚ÇΩ"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=excel_file, caption=caption, parse_mode="HTML"
        )

        logger.info(f"–ê—Ä—Ö–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç {report_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä—É {master_id}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞", show_alert=True)
    finally:
        await db.disconnect()

    await callback.answer()
