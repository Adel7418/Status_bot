"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.config import OrderStatus, UserRole
from app.filters import IsMaster
from app.database import Database
from app.keyboards.inline import get_order_actions_keyboard, get_order_list_keyboard
from app.utils import log_action, format_datetime
from app.decorators import require_role

logger = logging.getLogger(__name__)

router = Router(name='master')
# –§–∏–ª—å—Ç—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç.–∫. –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –î–û middleware
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def btn_my_orders(message: Message, state: FSMContext):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –º–∞—Å—Ç–µ—Ä–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await state.clear()
    
    db = Database()
    await db.connect()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = await db.get_master_by_telegram_id(message.from_user.id)
        
        if not master:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=True)
        
        if not orders:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
                "–ó–∞—è–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º."
            )
            return
        
        text = "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        by_status = {}
        for order in orders:
            if order.status not in by_status:
                by_status[order.status] = []
            by_status[order.status].append(order)
        
        # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_order = [
            OrderStatus.ASSIGNED,
            OrderStatus.ACCEPTED,
            OrderStatus.ONSITE,
            OrderStatus.DR
        ]
        
        for status in status_order:
            if status in by_status:
                status_emoji = OrderStatus.get_status_emoji(status)
                status_name = OrderStatus.get_status_name(status)
                
                text += f"\n<b>{status_emoji} {status_name}:</b>\n"
                
                for order in by_status[status]:
                    text += f"  ‚Ä¢ –ó–∞—è–≤–∫–∞ #{order.id} - {order.equipment_type}\n"
                
                text += "\n"
        
        keyboard = get_order_list_keyboard(orders)
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("view_order:"), IsMaster())
async def callback_view_order_master(callback: CallbackQuery):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
    
    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])
    
    db = Database()
    await db.connect()
    
    try:
        order = await db.get_order_by_id(order_id)
        
        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        master = await db.get_master_by_telegram_id(callback.from_user.id)
        
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return
        
        status_emoji = OrderStatus.get_status_emoji(order.status)
        status_name = OrderStatus.get_status_name(order.status)
        
        text = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
        if order.status in [OrderStatus.ACCEPTED, OrderStatus.ONSITE, OrderStatus.DR, OrderStatus.CLOSED]:
            text += (
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
            )
        else:
            text += (
                f"<i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞\n"
                f"–ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏.</i>\n\n"
            )
        
        if order.notes:
            text += f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"
        
        if order.created_at:
            text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
        
        from app.config import UserRole
        keyboard = get_order_actions_keyboard(order, UserRole.MASTER)
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    finally:
        await db.disconnect()
    
    await callback.answer()


@router.callback_query(F.data.startswith("accept_order:"))
async def callback_accept_order(callback: CallbackQuery):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º
    
    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])
    
    db = Database()
    await db.connect()
    
    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.ACCEPTED)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ACCEPT_ORDER",
            details=f"Accepted order #{order_id}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order_id}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞.\n"
            f"–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.",
            parse_mode="HTML"
        )
        
        log_action(callback.from_user.id, "ACCEPT_ORDER", f"Order #{order_id}")
        
    finally:
        await db.disconnect()
    
    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")


@router.callback_query(F.data.startswith("refuse_order_master:"))
async def callback_refuse_order_master(callback: CallbackQuery):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º
    
    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])
    
    db = Database()
    await db.connect()
    
    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ NEW –∏ —É–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.connection.execute(
            "UPDATE orders SET status = ?, assigned_master_id = NULL WHERE id = ?",
            (OrderStatus.NEW, order_id)
        )
        await db.connection.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REFUSE_ORDER_MASTER",
            details=f"Master refused order #{order_id}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚ùå –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{order_id}\n"
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")
        
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
            f"–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )
        
        log_action(callback.from_user.id, "REFUSE_ORDER_MASTER", f"Order #{order_id}")
        
    finally:
        await db.disconnect()
    
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


@router.callback_query(F.data.startswith("onsite_order:"))
async def callback_onsite_order(callback: CallbackQuery):
    """
    –ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
    
    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])
    
    db = Database()
    await db.connect()
    
    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.ONSITE)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ONSITE_ORDER",
            details=f"Master on site for order #{order_id}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"üè† –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–ó–∞—è–≤–∫–∞ #{order_id})",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")
        
        await callback.message.edit_text(
            f"üè† <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–ó–∞—è–≤–∫–∞ #{order_id} - –≤—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ.\n"
            f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É.",
            parse_mode="HTML"
        )
        
        log_action(callback.from_user.id, "ONSITE_ORDER", f"Order #{order_id}")
        
    finally:
        await db.disconnect()
    
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data.startswith("complete_order:"))
async def callback_complete_order(callback: CallbackQuery):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º
    
    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])
    
    db = Database()
    await db.connect()
    
    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.CLOSED)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="COMPLETE_ORDER",
            details=f"Completed order #{order_id}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"üí∞ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞—è–≤–∫—É #{order_id}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ",
            parse_mode="HTML"
        )
        
        log_action(callback.from_user.id, "COMPLETE_ORDER", f"Order #{order_id}")
        
    finally:
        await db.disconnect()
    
    await callback.answer("–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


@router.callback_query(F.data.startswith("dr_order:"))
async def callback_dr_order(callback: CallbackQuery):
    """
    –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç
    
    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])
    
    db = Database()
    await db.connect()
    
    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.DR)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="DR_ORDER",
            details=f"Order #{order_id} marked as long-term repair"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚è≥ –ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç\n"
                    f"–ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")
        
        await callback.message.edit_text(
            f"‚è≥ <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–ó–∞—è–≤–∫–∞ #{order_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç.",
            parse_mode="HTML"
        )
        
        log_action(callback.from_user.id, "DR_ORDER", f"Order #{order_id}")
        
    finally:
        await db.disconnect()
    
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_my_stats(message: Message):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    db = Database()
    await db.connect()
    
    try:
        master = await db.get_master_by_telegram_id(message.from_user.id)
        
        if not master:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=False)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(orders)
        by_status = {}
        
        for order in orders:
            by_status[order.status] = by_status.get(order.status, 0) + 1
        
        completed = by_status.get(OrderStatus.CLOSED, 0)
        active = sum(by_status.get(s, 0) for s in [OrderStatus.ASSIGNED, OrderStatus.ACCEPTED, OrderStatus.ONSITE])
        dr = by_status.get(OrderStatus.DR, 0)
        
        text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n"
            f"üîß <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {master.specialization}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {master.phone}\n\n"
            f"üìà <b>–ó–∞—è–≤–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
            f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}\n"
            f"‚Ä¢ üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
            f"‚Ä¢ ‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç: {dr}\n\n"
        )
        
        if total > 0:
            completion_rate = (completed / total) * 100
            text += f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {completion_rate:.1f}%\n"
        
        await message.answer(text, parse_mode="HTML")
        
    finally:
        await db.disconnect()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def btn_settings_master(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
    """
    db = Database()
    await db.connect()
    
    try:
        master = await db.get_master_by_telegram_id(message.from_user.id)
        
        if not master:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
            return
        
        user = await db.get_user_by_telegram_id(message.from_user.id)
        
        settings_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {master.get_display_name()}\n"
            f"üÜî <b>Telegram ID:</b> <code>{master.telegram_id}</code>\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {master.phone}\n"
            f"üîß <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {master.specialization}\n"
            f"üëî <b>–†–æ–ª—å:</b> {user.role if user else 'MASTER'}\n"
        )
        
        if user and user.username:
            settings_text += f"üì± <b>Username:</b> @{user.username}\n"
        
        status_emoji = "‚úÖ" if master.is_approved else "‚è≥"
        active_emoji = "üü¢" if master.is_active else "üî¥"
        
        settings_text += f"\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–û–¥–æ–±—Ä–µ–Ω' if master.is_approved else '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è'}\n"
        settings_text += f"üîÑ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {active_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if master.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        
        await message.answer(settings_text, parse_mode="HTML")
        
    finally:
        await db.disconnect()
