"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ (–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
"""

import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from pydantic import ValidationError

from app.config import MAX_DESCRIPTION_LENGTH, MAX_NOTES_LENGTH, OrderStatus, UserRole
from app.database import Database
from app.decorators import handle_errors
from app.keyboards.inline import (
    get_equipment_types_keyboard,
    get_masters_list_keyboard,
    get_order_actions_keyboard,
    get_order_list_keyboard,
    get_orders_filter_keyboard,
)
from app.keyboards.reply import (
    get_cancel_keyboard,
    get_client_data_confirm_keyboard,
    get_confirm_keyboard,
    get_skip_cancel_keyboard,
)
from app.schemas import OrderCreateSchema
from app.states import AdminCloseOrderStates, CreateOrderStates
from app.utils import (
    escape_html,
    format_datetime,
    format_datetime_for_storage,
    format_datetime_user_friendly,
    get_now,
    log_action,
    parse_natural_datetime,
    safe_send_message,
    should_parse_as_date,
    validate_parsed_datetime,
)


logger = logging.getLogger(__name__)

router = Router(name="dispatcher")
# –§–∏–ª—å—Ç—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç.–∫. –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –î–û middleware
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä


# ==================== –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ====================


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
@handle_errors
async def btn_create_order(message: Message, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.clear()
    await state.set_state(CreateOrderStates.equipment_type)

    await message.answer(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏</b>\n\n" "–®–∞–≥ 1/7: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:",
        parse_mode="HTML",
        reply_markup=get_equipment_types_keyboard(),
    )


@router.callback_query(F.data.startswith("equipment:"), CreateOrderStates.equipment_type)
@handle_errors
async def process_equipment_type(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    equipment_type = callback.data.split(":", 1)[1]

    await state.update_data(equipment_type=equipment_type)
    await state.set_state(CreateOrderStates.description)

    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {equipment_type}\n\n" f"–®–∞–≥ 2/7: –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", parse_mode="HTML"
    )

    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n" f"<i>(–º–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )

    await callback.answer()


@router.message(CreateOrderStates.description, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_description(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n"
            f"–ú–∏–Ω–∏–º—É–º {4} —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    description = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ö–µ–º—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ description
        from pydantic import BaseModel, Field, field_validator

        class DescriptionValidator(BaseModel):
            description: str = Field(..., min_length=4, max_length=MAX_DESCRIPTION_LENGTH)

            @field_validator("description")
            @classmethod
            def validate_description(cls, v: str) -> str:
                import re

                v = v.strip()
                if len(v) < 4:
                    raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")

                # –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç SQL injection
                suspicious_patterns = [
                    r";\s*(DROP|DELETE|UPDATE|INSERT|ALTER)\s+",
                    r"--",
                    r"/\*.*\*/",
                    r"UNION\s+SELECT",
                ]
                for pattern in suspicious_patterns:
                    if re.search(pattern, v, re.IGNORECASE):
                        raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")

                return v

        validated = DescriptionValidator(description=description)
        description = validated.description

    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(description=description)
    await state.set_state(CreateOrderStates.client_address)

    await message.answer(
        "üìç –®–∞–≥ 3/7: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(CreateOrderStates.client_name, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_client_name(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞.\n"
            "–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    client_name = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
    try:
        import re

        from pydantic import BaseModel, Field, field_validator

        class ClientNameValidator(BaseModel):
            client_name: str = Field(..., min_length=2, max_length=200)

            @field_validator("client_name")
            @classmethod
            def validate_client_name(cls, v: str) -> str:
                v = v.strip()

                # –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞
                if len(v) < 2:
                    raise ValueError("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É
                if not re.search(r"[–ê-–Ø–∞-—è–Å—ëA-Za-z]", v):
                    raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã")

                return v

        validated = ClientNameValidator(client_name=client_name)
        client_name = validated.client_name

    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(client_name=client_name)
    await state.set_state(CreateOrderStates.client_phone)

    await message.answer(
        "üìû –®–∞–≥ 5/7: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:\n" "<i>(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(CreateOrderStates.client_address, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_client_address(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"[CLIENT_ADDRESS] Processing client address: '{message.text}'")

    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –∫–ª–∏–µ–Ω—Ç–∞.\n"
            "–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    client_address = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
    try:
        import re

        from pydantic import BaseModel, Field, field_validator

        class ClientAddressValidator(BaseModel):
            client_address: str = Field(..., min_length=4, max_length=500)

            @field_validator("client_address")
            @classmethod
            def validate_client_address(cls, v: str) -> str:
                v = v.strip()

                if len(v) < 4:
                    raise ValueError("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É (–Ω–æ–º–µ—Ä –¥–æ–º–∞)
                if not re.search(r"\d", v):
                    raise ValueError("–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä –¥–æ–º–∞")

                return v

        validated = ClientAddressValidator(client_address=client_address)
        client_address = validated.client_address

    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(client_address=client_address)
    await state.set_state(CreateOrderStates.client_name)

    await message.answer(
        "üë§ –®–∞–≥ 4/7: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(CreateOrderStates.client_phone, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_client_phone(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"[CLIENT_PHONE] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}, —Ä–æ–ª—å: {user_role}")

    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        logger.warning(f"[CLIENT_PHONE] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: {user_role}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX"
        )
        return

    phone = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞ —á—Ç–æ –∏ –≤ —Å—Ö–µ–º–µ)
    try:
        import re

        from pydantic import BaseModel, Field, field_validator

        class ClientPhoneValidator(BaseModel):
            client_phone: str = Field(..., min_length=10, max_length=20)

            @field_validator("client_phone")
            @classmethod
            def validate_client_phone(cls, v: str) -> str:
                cleaned = re.sub(r"[^\d+]", "", v.strip())
                patterns = [r"^\+7\d{10}$", r"^8\d{10}$", r"^7\d{10}$"]

                if not any(re.match(pattern, cleaned) for pattern in patterns):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è: +7XXXXXXXXXX")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                if cleaned.startswith("8") and len(cleaned) == 11:
                    cleaned = "+7" + cleaned[1:]
                elif cleaned.startswith("7") and len(cleaned) == 11:
                    cleaned = "+" + cleaned

                return cleaned

        validated = ClientPhoneValidator(client_phone=phone)
        phone = validated.client_phone
        logger.info(f"[CLIENT_PHONE] –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: {phone}")

    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    try:
        from app.database import Database

        db = Database()
        await db.connect()

        # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_orders = await db.get_orders_by_client_phone(phone)
        await db.disconnect()

        if existing_orders:
            # –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            latest_order = existing_orders[0]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É

            await message.answer(
                f"üîç <b>–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {escape_html(latest_order.client_name)}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape_html(latest_order.client_phone)}\n"
                f"üè† <b>–ê–¥—Ä–µ—Å:</b> {escape_html(latest_order.client_address)}\n\n"
                f"üìä <b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {len(existing_orders)}\n"
                f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞:</b> #{latest_order.id} ({latest_order.status})\n\n"
                f"<i>–ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏?</i>",
                parse_mode="HTML",
                reply_markup=get_client_data_confirm_keyboard(),
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await state.update_data(
                client_phone=phone,
                found_client_name=latest_order.client_name,
                found_client_address=latest_order.client_address,
                existing_orders_count=len(existing_orders),
            )
            await state.set_state(CreateOrderStates.confirm_client_data)
            return
        else:
            # –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —ç—Ç–æ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            await message.answer(
                "‚úÖ <b>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç</b>\n\n"
                "–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.",
                parse_mode="HTML",
            )
            logger.info(f"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}: {e}")
        await message.answer(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.",
            parse_mode="HTML",
        )

    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}")
    await state.update_data(client_phone=phone)
    await state.set_state(CreateOrderStates.notes)

    await message.answer(
        "üìù –®–∞–≥ 6/7: –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        f"<i>(–º–∞–∫—Å–∏–º—É–º {MAX_NOTES_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)</i>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        parse_mode="HTML",
        reply_markup=get_skip_cancel_keyboard(),
    )
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∑–∞–º–µ—Ç–æ–∫")


@router.message(CreateOrderStates.confirm_client_data, F.text == "‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
@handle_errors
async def confirm_client_data(message: Message, state: FSMContext, user_role: str):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    await state.update_data(
        client_name=data["found_client_name"], client_address=data["found_client_address"]
    )

    await state.set_state(CreateOrderStates.notes)

    await message.answer(
        "‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {escape_html(data['found_client_name'])}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {escape_html(data['found_client_address'])}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape_html(data['client_phone'])}\n\n"
        "üìù –®–∞–≥ 6/7: –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        f"<i>(–º–∞–∫—Å–∏–º—É–º {MAX_NOTES_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)</i>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        parse_mode="HTML",
        reply_markup=get_skip_cancel_keyboard(),
    )


@router.message(CreateOrderStates.confirm_client_data, F.text == "‚ùå –ù–µ—Ç, –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ")
@handle_errors
async def reject_client_data(message: Message, state: FSMContext, user_role: str):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.set_state(CreateOrderStates.client_name)

    await message.answer(
        "üë§ –®–∞–≥ 3/7: –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:\n" "<i>(–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(CreateOrderStates.notes, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
@handle_errors
async def skip_notes(message: Message, state: FSMContext, user_role: str):
    """
    –ü—Ä–æ–ø—É—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.update_data(notes=None)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è (–Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥!)
    await state.set_state(CreateOrderStates.scheduled_time)
    await message.answer(
        "‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
        parse_mode="HTML",
        reply_markup=get_skip_cancel_keyboard(),
    )


@router.message(CreateOrderStates.notes, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_notes(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.\n"
            f"–ú–∞–∫—Å–∏–º—É–º {MAX_NOTES_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    notes = message.text.strip()

    if len(notes) > MAX_NOTES_LENGTH:
        await message.answer(
            f"‚ùå –ó–∞–º–µ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_NOTES_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤:",
            reply_markup=get_skip_cancel_keyboard(),
        )
        return

    await state.update_data(notes=notes)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
    await state.set_state(CreateOrderStates.scheduled_time)
    await message.answer(
        "‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
        parse_mode="HTML",
        reply_markup=get_skip_cancel_keyboard(),
    )


@router.message(CreateOrderStates.scheduled_time, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_scheduled_time(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–∞—Ç—ã

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–±—ã—Ç–∏—è.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –∑–∞–≤—Ç—Ä–∞ –≤ 15:00, —á–µ—Ä–µ–∑ 3 –¥–Ω—è, 25.10.2025 14:00"
        )
        return

    scheduled_time = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
    if scheduled_time:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º 100)
        if len(scheduled_time) < 3:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_skip_cancel_keyboard(),
            )
            return

        if len(scheduled_time) > 150:  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
            await message.answer(
                "‚ùå –í—Ä–µ–º—è/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 150 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_skip_cancel_keyboard(),
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ SQL injection
        dangerous_patterns = [
            r"\b(drop|delete|truncate|insert|update|alter)\b.*\b(table|from|into|database|set|where)\b",
            r";\s*(drop|delete|truncate|insert|update|alter)\s+",
            r"--",
            r"/\*.*\*/",
            r"\bxp_",
            r"\bsp_",
        ]

        for pattern in dangerous_patterns:
            if re.search(pattern, scheduled_time, re.IGNORECASE):
                await message.answer(
                    "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ\n\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=get_skip_cancel_keyboard(),
                )
                return

        # üÜï –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–ê–¢–´ –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        if should_parse_as_date(scheduled_time):
            logger.info(f"[SCHEDULED_TIME] Attempting to parse date: '{scheduled_time}'")
            parsed_dt, user_friendly_text = parse_natural_datetime(scheduled_time, validate=True)
            logger.info(f"[SCHEDULED_TIME] Parsed result: {parsed_dt}, user_friendly: {user_friendly_text}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ user_friendly –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            is_interval = user_friendly_text and "—Å" in user_friendly_text and "–¥–æ" in user_friendly_text
            
            if parsed_dt or is_interval:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å warning) —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å parsed_dt
                if parsed_dt:
                    validation = validate_parsed_datetime(parsed_dt, scheduled_time)
                else:
                    validation = {"is_valid": True, "error": None, "warning": None}

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ user_friendly –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                if is_interval:
                    # –≠—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                    formatted_time = user_friendly_text
                    user_friendly = user_friendly_text
                else:
                    # –û–±—ã—á–Ω–∞—è –¥–∞—Ç–∞ - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    formatted_time = format_datetime_for_storage(parsed_dt, scheduled_time)
                    user_friendly = format_datetime_user_friendly(parsed_dt, scheduled_time)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
                confirmation_text = f"‚úÖ <b>–î–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞:</b>\n\n{user_friendly}"

                if validation.get("warning"):
                    confirmation_text += f"\n\n‚ö†Ô∏è <i>{validation['warning']}</i>"

                confirmation_text += (
                    "\n\n–ï—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.\n"
                    "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ."
                )

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(
                    confirmation_text,
                    parse_mode="HTML",
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
                await state.update_data(scheduled_time=formatted_time)
                logger.info("[SCHEDULED_TIME] Setting state to confirm after date recognition")
                await state.set_state(CreateOrderStates.confirm)
                logger.info("[SCHEDULED_TIME] Calling show_order_confirmation")
                await show_order_confirmation(message, state)
                logger.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã: '{message.text}' -> '{formatted_time}'")
                return
            else:
                # –ù–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
                logger.info(f"[SCHEDULED_TIME] Failed to parse date: '{scheduled_time}'")
                await message.answer(
                    f"‚ùì <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É:</b> {scheduled_time}\n\n"
                    f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>\n\n"
                    f"<b>ü§ñ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã:</b>\n"
                    f"‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ –≤ 15:00</code>\n"
                    f"‚Ä¢ <code>–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 14:30</code>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ 3 –¥–Ω—è 15:00</code>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é 12:00</code>\n\n"
                    f"<b>‚è± –ß–µ—Ä–µ–∑ —á–∞—Å—ã/–¥–Ω–∏:</b>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞</code>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ 1-1.5 —á–∞—Å–∞</code>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ 3 –¥–Ω—è</code>\n\n"
                    f"<b>üìÖ –¢–æ—á–Ω–∞—è –¥–∞—Ç–∞:</b>\n"
                    f"‚Ä¢ <code>20.10.2025 14:00</code>\n"
                    f"‚Ä¢ <code>25/10/2025 09:30</code>\n\n"
                    f"<b>üìù –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç:</b>\n"
                    f"‚Ä¢ <code>–ù–∞–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É</code>\n"
                    f"‚Ä¢ <code>–£—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è</code>",
                    parse_mode="HTML",
                    reply_markup=get_skip_cancel_keyboard(),
                )
                return

    # –ï—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–∞—Ç—É - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ü–∏—Ñ—Ä–æ–π
    if re.match(r"^\d{1,2}$", scheduled_time.strip()):
        # –ü—Ä–æ—Å—Ç–∞—è —Ü–∏—Ñ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        await message.answer(
            f"‚ùå <b>–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –¥–∞—Ç—É:</b> '{scheduled_time}'\n\n"
            f"<b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
            f"‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00\n"
            f"‚Ä¢ —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n"
            f"‚Ä¢ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\n"
            f"‚Ä¢ 25.12.2025\n"
            f"‚Ä¢ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 15:00\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.",
            parse_mode="HTML",
            reply_markup=get_skip_cancel_keyboard(),
        )
        return

    await state.update_data(scheduled_time=scheduled_time)
    await state.set_state(CreateOrderStates.confirm)
    await show_order_confirmation(message, state)


@router.message(CreateOrderStates.scheduled_time, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
@handle_errors
async def skip_scheduled_time(message: Message, state: FSMContext, user_role: str):
    """
    –ü—Ä–æ–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.update_data(scheduled_time=None)
    await show_order_confirmation(message, state)


# ==================== –û–¢–ú–ï–ù–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò ====================


@router.message(CreateOrderStates.confirm, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def cancel_create_order(message: Message, state: FSMContext, user_role: str):
    """
    –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await state.clear()

    from app.handlers.common import get_menu_with_counter

    menu_keyboard = await get_menu_with_counter([user_role])
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)

    log_action(message.from_user.id, "CANCEL_CREATE_ORDER", "Order creation cancelled")


async def show_order_confirmation(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSMContext –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    logger.info("[SHOW_CONFIRMATION] Starting order confirmation")
    data = await state.get_data()
    logger.info(f"[SHOW_CONFIRMATION] Got data: {list(data.keys())}")

    text = (
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {escape_html(data['equipment_type'])}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape_html(data['description'])}\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {escape_html(data['client_name'])}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {escape_html(data['client_address'])}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape_html(data['client_phone'])}\n"
    )

    if data.get("notes"):
        text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {escape_html(data['notes'])}\n"

    if data.get("scheduled_time"):
        text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {escape_html(data['scheduled_time'])}\n"

    logger.info("[SHOW_CONFIRMATION] Sending confirmation message")
    await message.answer(text, parse_mode="HTML", reply_markup=get_confirm_keyboard())
    logger.info("[SHOW_CONFIRMATION] Confirmation message sent")


# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - –æ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(CreateOrderStates.confirm)
@handle_errors
async def debug_confirm_state(message: Message, state: FSMContext, user_role: str):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    logger.info(
        f"[DEBUG_CONFIRM] Received message in confirm state: '{message.text}' (type: {type(message.text)})"
    )

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await confirm_create_order(message, state, user_role)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    # –ï—Å–ª–∏ —ç—Ç–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    await handle_time_change_in_confirm(message, state, user_role)


async def handle_time_change_in_confirm(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–±—ã—Ç–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if message.text.strip() == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        return

    scheduled_time = message.text.strip()
    logger.info(f"[CONFIRM_TIME_CHANGE] User wants to change time to: '{scheduled_time}'")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    await state.set_state(CreateOrderStates.scheduled_time)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
    await process_scheduled_time(message, state, user_role)


async def confirm_create_order(message: Message, state: FSMContext, user_role: str):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –ø–æ–ª–Ω–æ–π Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"[CONFIRM_ORDER] User clicked confirm button: '{message.text}'")
    data = await state.get_data()

    # –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    if data.get("creating_order"):
        # –ó–∞—è–≤–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫
        logger.warning(f"Duplicate order creation attempt by user {message.from_user.id}")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è
    await state.update_data(creating_order=True)

    db = None
    order = None

    try:
        # –ö–†–ò–¢–ò–ß–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Pydantic –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        try:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            logger.info(
                f"[VALIDATION_DEBUG] client_name: '{data.get('client_name')}', length: {len(data.get('client_name', ''))}"
            )
            logger.info(f"[VALIDATION_DEBUG] All data: {data}")

            order_data = OrderCreateSchema(
                equipment_type=data["equipment_type"],
                description=data["description"],
                client_name=data["client_name"],
                client_address=data["client_address"],
                client_phone=data["client_phone"],
                dispatcher_id=message.from_user.id,
                notes=data.get("notes"),
                scheduled_time=data.get("scheduled_time"),
            )
            logger.info(f"Order data validated successfully for dispatcher {message.from_user.id}")
        except ValidationError as e:
            # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ - –æ—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

            from app.handlers.common import get_menu_with_counter

            error_details = "\n".join([f"‚Ä¢ {err['msg']}" for err in e.errors()])
            menu_keyboard = await get_menu_with_counter([user_role])
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏:</b>\n\n{error_details}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML",
                reply_markup=menu_keyboard,
            )
            return

        db = Database()
        await db.connect()

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        order = await db.create_order(
            equipment_type=order_data.equipment_type,
            description=order_data.description,
            client_name=order_data.client_name,
            client_address=order_data.client_address,
            client_phone=order_data.client_phone,
            dispatcher_id=order_data.dispatcher_id,
            notes=order_data.notes,
            scheduled_time=order_data.scheduled_time,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=message.from_user.id,
            action="CREATE_ORDER",
            details=f"Created order #{order.id}",
        )

        log_action(message.from_user.id, "CREATE_ORDER", f"Order #{order.id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º (–∫—Ä–æ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è)
        admins_and_dispatchers = await db.get_admins_and_dispatchers(
            exclude_user_id=message.from_user.id
        )

        notification_text = (
            f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
            f"üë§ –°–æ–∑–¥–∞–ª: {escape_html(message.from_user.full_name)}\n"
            f"üîß –¢–∏–ø: {escape_html(order.equipment_type)}\n"
            f"üìù {escape_html(order.description)}\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {escape_html(order.client_name)}\n"
            f"üìç {escape_html(order.client_address)}\n"
            f"üìû {order.client_phone}\n"
        )

        if order.scheduled_time:
            notification_text += f"\n‚è∞ –ü—Ä–∏–±—ã—Ç–∏–µ: {escape_html(order.scheduled_time)}"

        if order.notes:
            notification_text += f"\n\nüìù –ó–∞–º–µ—Ç–∫–∏: {escape_html(order.notes)}"

        notification_text += "\n\n‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞!</b>"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
        for user in admins_and_dispatchers:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏
            if user.telegram_id == message.from_user.id:
                continue
            try:
                await safe_send_message(
                    message.bot, user.telegram_id, notification_text, parse_mode="HTML"
                )
                logger.info(f"Notification sent to {user.telegram_id} about order #{order.id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
        )
        return
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if db:
            await db.disconnect()
        # –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º FSM state
        await state.clear()

    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data=f"assign_master:{order.id}"
        )
    )
    builder.row(
        InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"view_order:{order.id}")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: üÜï –ù–æ–≤–∞—è\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –Ω–µ–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏.",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from app.handlers.common import get_menu_with_counter

    menu_keyboard = await get_menu_with_counter([user_role])
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)


# ==================== –ü–†–û–°–ú–û–¢–† –ó–ê–Ø–í–û–ö ====================


@router.message(F.text.startswith("üìã –í—Å–µ –∑–∞—è–≤–∫–∏"))
@handle_errors
async def btn_all_orders(message: Message, state: FSMContext, user_role: str):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
    db = Database()
    await db.connect()
    try:
        counts = {}
        for status in [
            OrderStatus.NEW,
            OrderStatus.ASSIGNED,
            OrderStatus.ACCEPTED,
            OrderStatus.ONSITE,
            OrderStatus.DR,
            OrderStatus.CLOSED,
        ]:
            orders = await db.get_all_orders(status=status)
            counts[status] = len(orders)
    finally:
        await db.disconnect()

    await message.answer(
        "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        parse_mode="HTML",
        reply_markup=get_orders_filter_keyboard(counts),
    )


@router.callback_query(F.data.startswith("filter_orders:"))
@handle_errors
async def callback_filter_orders(callback: CallbackQuery, user_role: str):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    filter_status = callback.data.split(":")[1]

    db = Database()
    await db.connect()

    try:
        if filter_status == "all":
            orders = await db.get_all_orders(limit=50)
            filter_name = "–≤—Å–µ"
        else:
            orders = await db.get_all_orders(status=filter_status, limit=50)
            filter_name = OrderStatus.get_status_name(filter_status)

        if not orders:
            await callback.message.edit_text(f"üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{filter_name}'.")
            await callback.answer()
            return

        text = f"üìã <b>–ó–∞—è–≤–∫–∏ ({filter_name}):</b>\n\n"

        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status_emoji = OrderStatus.get_status_emoji(order.status)
            status_name = OrderStatus.get_status_name(order.status)

            text += (
                f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
                f"   üîß {escape_html(order.equipment_type)}\n"
                f"   üìä {status_name}\n"
            )

            if order.master_name:
                text += f"   üë®‚Äçüîß {escape_html(order.master_name)}\n"

            text += "\n"

        if len(orders) > 10:
            text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(orders)} –∑–∞—è–≤–æ–∫</i>"

        keyboard = get_order_list_keyboard(orders[:20])

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("view_order:"))
@handle_errors
async def callback_view_order(callback: CallbackQuery, user_role: str):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ (–¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤)

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        status_emoji = OrderStatus.get_status_emoji(order.status)
        status_name = OrderStatus.get_status_name(order.status)

        text = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {escape_html(order.equipment_type)}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape_html(order.description)}\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {escape_html(order.client_name)}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {escape_html(order.client_address)}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape_html(order.client_phone)}\n\n"
        )

        if order.master_name:
            text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {order.master_name}\n"

        if order.dispatcher_name:
            text += f"üìã <b>–î–∏—Å–ø–µ—Ç—á–µ—Ä:</b> {order.dispatcher_name}\n"

        if order.notes:
            text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n"

        if order.scheduled_time:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–º–æ–Ω—Ç–µ
        if order.status == OrderStatus.DR:
            if order.estimated_completion_date:
                text += f"‚è∞ <b>–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {escape_html(order.estimated_completion_date)}\n"
            if order.prepayment_amount:
                text += f"üí∞ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> {order.prepayment_amount:.2f} ‚ÇΩ\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫
        if order.status == OrderStatus.CLOSED and order.total_amount:
            net_profit = order.total_amount - (order.materials_cost or 0)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É
            base_rate = "50/50" if net_profit >= 7000 else "40/60"

            text += "\nüí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            text += f"‚Ä¢ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{order.total_amount:.2f} ‚ÇΩ</b>\n"
            text += f"‚Ä¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{net_profit:.2f} ‚ÇΩ</b>\n"
            text += f"\nüìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ({base_rate}):</b>\n"

            if order.master_profit:
                master_percent = (order.master_profit / net_profit * 100) if net_profit > 0 else 0
                text += f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –º–∞—Å—Ç–µ—Ä–∞: <b>{order.master_profit:.2f} ‚ÇΩ</b> ({master_percent:.0f}%)\n"
            if order.company_profit:
                company_percent = (order.company_profit / net_profit * 100) if net_profit > 0 else 0
                text += f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏: <b>{order.company_profit:.2f} ‚ÇΩ</b> ({company_percent:.0f}%)\n"

            # –ù–∞–¥–±–∞–≤–∫–∏ –∏ –±–æ–Ω—É—Å—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ True)
            bonuses = []
            if order.has_review is True:
                bonuses.append("‚úÖ –û—Ç–∑—ã–≤ (+10% –º–∞—Å—Ç–µ—Ä—É)")
            if order.out_of_city is True:
                bonuses.append("‚úÖ –í—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥")

            if bonuses:
                text += f"\nüéÅ <b>–ù–∞–¥–±–∞–≤–∫–∏:</b> {', '.join(bonuses)}\n"

            text += "\n"

        if order.created_at:
            text += f"\nüìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"

        if order.updated_at and order.updated_at != order.created_at:
            text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {format_datetime(order.updated_at)}\n"

        keyboard = get_order_actions_keyboard(order, user_role)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


# ==================== –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ú–ê–°–¢–ï–†–ê ====================


@router.callback_query(F.data.startswith("assign_master:"))
async def callback_assign_master(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    await state.update_data(order_id=order_id)

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = await db.get_all_masters(only_approved=True, only_active=True)

        if not masters:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤", show_alert=True)
            return

        keyboard = get_masters_list_keyboard(
            masters, order_id=order_id, action="select_master_for_order"
        )

        await callback.message.edit_text(
            f"üë®‚Äçüîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:</b>",
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("select_master_for_order:"))
@handle_errors
async def callback_select_master_for_order(
    callback: CallbackQuery, user_role: str, user_roles: list
):
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É

    Args:
        callback: Callback query
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    parts = callback.data.split(":")
    order_id = int(parts[1])
    master_id = int(parts[2])

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –î–û –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        master = await db.get_master_by_id(master_id)

        # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –†–ê–ë–û–ß–ï–ô –ì–†–£–ü–ü–´ –î–û –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
        if not master.work_chat_id:
            logger.warning(
                f"ASSIGNMENT BLOCKED: Master {master.id} ({master.get_display_name()}) has no work_chat_id set."
            )
            await callback.answer(
                f"‚ùå –û–¢–ö–ê–ó–ê–ù–û –í –ù–ê–ó–ù–ê–ß–ï–ù–ò–ò\n\n"
                f"–£ –º–∞—Å—Ç–µ—Ä–∞ {master.get_display_name()} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
                show_alert=True,
            )
            # –ù–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å work_chat_id) —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        await db.assign_master_to_order(
            order_id=order_id,
            master_id=master_id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ASSIGN_MASTER",
            details=f"Assigned master {master_id} to order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å retry
        order = await db.get_order_by_id(order_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
        # (–ø—Ä–æ–≤–µ—Ä–∫—É work_chat_id —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –≤—ã—à–µ)
        from app.keyboards.inline import get_group_order_keyboard

        target_chat_id = master.work_chat_id

        logger.info(f"Attempting to send notification to group {target_chat_id}")

        notification_text = (
            f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus.get_status_name(OrderStatus.ASSIGNED)}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
        )

        if order.notes:
            notification_text += f"üìÑ <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.scheduled_time:
            notification_text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n\n"

        # –£–ø–æ–º–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ (ORM: —á–µ—Ä–µ–∑ master.user)
        master_username = master.user.username if hasattr(master, "user") and master.user else None
        if master_username:
            notification_text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> @{master_username}\n\n"
        else:
            notification_text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n\n"

        notification_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
        notification_text += f"üîÑ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞:</b> {format_datetime(get_now())}"

        keyboard = get_group_order_keyboard(order, OrderStatus.ASSIGNED)

        logger.info(f"Notification text prepared: {len(notification_text)} chars")

        result = await safe_send_message(
            callback.bot,
            target_chat_id,
            notification_text,
            parse_mode="HTML",
            reply_markup=keyboard,
            max_attempts=5,
        )

        if result:
            logger.info(f"SUCCESS: Notification sent to group {target_chat_id}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
            try:
                # ORM: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É order_group_messages
                if hasattr(db, "save_order_group_message"):
                    await db.save_order_group_message(
                        order_id=order_id,
                        master_id=master_id,
                        chat_id=target_chat_id,
                        message_id=result.message_id,
                    )
            except Exception as e:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ {order_id}: {e}"
                )
        else:
            logger.error(f"–ö–†–ò–¢–ò–ß–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ {target_chat_id}")

        await callback.message.edit_text(
            f"‚úÖ <b>–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n\n"
            f"–ú–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ.",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "ASSIGN_MASTER", f"Order #{order_id}, Master {master_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!")


# ==================== –ü–ï–†–ï–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ú–ê–°–¢–ï–†–ê ====================


@router.callback_query(F.data.startswith("reassign_master:"))
async def callback_reassign_master(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = await db.get_all_masters(only_approved=True, only_active=True)

        if not masters:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤", show_alert=True)
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        available_masters = [m for m in masters if m.id != order.assigned_master_id]

        if not available_masters:
            await callback.answer(
                "‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", show_alert=True
            )
            return

        keyboard = get_masters_list_keyboard(
            available_masters, order_id=order_id, action="select_new_master_for_order"
        )

        current_master_name = order.master_name if order.master_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        await callback.message.edit_text(
            f"üîÑ <b>–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üë®‚Äçüîß –¢–µ–∫—É—â–∏–π –º–∞—Å—Ç–µ—Ä: {current_master_name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞:",
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("select_new_master_for_order:"))
async def callback_select_new_master_for_order(
    callback: CallbackQuery, user_role: str, user_roles: list
):
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É (–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–∞—è)
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    parts = callback.data.split(":")
    order_id = int(parts[1])
    new_master_id = int(parts[2])

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏ —Å—Ç–∞—Ä–æ–º –º–∞—Å—Ç–µ—Ä–µ
        order = await db.get_order_by_id(order_id)
        old_master_id = order.assigned_master_id
        old_master = await db.get_master_by_id(old_master_id) if old_master_id else None

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –º–∞—Å—Ç–µ—Ä–µ –î–û –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        new_master = await db.get_master_by_id(new_master_id)

        # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –†–ê–ë–û–ß–ï–ô –ì–†–£–ü–ü–´ –î–û –ü–ï–†–ï–ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
        if not new_master.work_chat_id:
            logger.warning(
                f"REASSIGNMENT BLOCKED: Master {new_master.id} ({new_master.get_display_name()}) has no work_chat_id set."
            )
            await callback.answer(
                f"‚ùå –û–¢–ö–ê–ó–ê–ù–û –í –ü–ï–†–ï–ù–ê–ó–ù–ê–ß–ï–ù–ò–ò\n\n"
                f"–£ –º–∞—Å—Ç–µ—Ä–∞ {new_master.get_display_name()} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
                show_alert=True,
            )
            # –ù–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
            return

        # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å work_chat_id) —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        await db.assign_master_to_order(
            order_id=order_id,
            master_id=new_master_id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REASSIGN_MASTER",
            details=f"Reassigned order #{order_id} from master {old_master_id} to master {new_master_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –æ —Å–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ —Å retry
        if old_master and old_master.work_chat_id:
            target_chat_id = old_master.work_chat_id
            await safe_send_message(
                callback.bot,
                target_chat_id,
                f"‚ÑπÔ∏è <b>–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.\n"
                f"üîß {order.equipment_type}\n"
                f"üìù {order.description}",
                parse_mode="HTML",
                max_attempts=3,
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
        # (–ø—Ä–æ–≤–µ—Ä–∫—É work_chat_id —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –≤—ã—à–µ)
        from app.keyboards.inline import get_group_order_keyboard

        target_chat_id = new_master.work_chat_id

        notification_text = (
            f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus.get_status_name(OrderStatus.ASSIGNED)}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
        )

        if order.notes:
            notification_text += f"üìÑ <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.scheduled_time:
            notification_text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n\n"

        # –£–ø–æ–º–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ (ORM: —á–µ—Ä–µ–∑ master.user)
        new_master_username = (
            new_master.user.username if hasattr(new_master, "user") and new_master.user else None
        )
        if new_master_username:
            notification_text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> @{new_master_username}\n\n"
        else:
            notification_text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {new_master.get_display_name()}\n\n"

        notification_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
        notification_text += f"üîÑ <b>–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞:</b> {format_datetime(get_now())}"

        keyboard = get_group_order_keyboard(order, OrderStatus.ASSIGNED)

        result = await safe_send_message(
            callback.bot,
            target_chat_id,
            notification_text,
            parse_mode="HTML",
            reply_markup=keyboard,
            max_attempts=5,
        )
        if result:
            logger.info(f"Notification sent to new master group {target_chat_id}")
            try:
                if hasattr(db, "save_order_group_message"):
                    await db.save_order_group_message(
                        order_id=order_id,
                        master_id=new_master_id,
                        chat_id=target_chat_id,
                        message_id=result.message_id,
                    )
            except Exception as e:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ {order_id}: {e}"
                )
        else:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –º–∞—Å—Ç–µ—Ä—É –≤ –≥—Ä—É–ø–ø–µ {target_chat_id}"
            )

        old_master_name = old_master.get_display_name() if old_master else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        await callback.message.edit_text(
            f"‚úÖ <b>–ú–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω!</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üë®‚Äçüîß –°—Ç–∞—Ä—ã–π –º–∞—Å—Ç–µ—Ä: {old_master_name}\n"
            f"üë®‚Äçüîß –ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä: {new_master.get_display_name()}\n\n"
            f"–û–±–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            parse_mode="HTML",
        )

        log_action(
            callback.from_user.id,
            "REASSIGN_MASTER",
            f"Order #{order_id}, Old Master {old_master_id}, New Master {new_master_id}",
        )

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω!")


@router.callback_query(F.data.startswith("unassign_master:"))
async def callback_unassign_master(callback: CallbackQuery, user_role: str):
    """
    –°–Ω—è—Ç–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Å –∑–∞—è–≤–∫–∏ (–≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å NEW)

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏ –º–∞—Å—Ç–µ—Ä–µ
        order = await db.get_order_by_id(order_id)

        if not order or not order.assigned_master_id:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω", show_alert=True)
            return

        master = await db.get_master_by_id(order.assigned_master_id)

        # –°–Ω–∏–º–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ NEW (ORM compatible)
        if hasattr(db, "unassign_master_from_order"):
            # ORM: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            await db.unassign_master_from_order(order_id)
        else:
            # Legacy: –ø—Ä—è–º–æ–π SQL
            await db.connection.execute(
                "UPDATE orders SET status = ?, assigned_master_id = NULL WHERE id = ?",
                (OrderStatus.NEW, order_id),
            )
            await db.connection.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="UNASSIGN_MASTER",
            details=f"Unassigned master {order.assigned_master_id} from order #{order_id}",
        )

        # –ú–µ–Ω—é –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ update_order_status

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
        try:
            if hasattr(db, "get_active_group_messages_by_order"):
                messages = await db.get_active_group_messages_by_order(order_id)
                if messages:
                    from app.utils.retry import safe_delete_message

                    for m in messages:
                        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                        deleted = await safe_delete_message(callback.bot, m.chat_id, m.message_id)
                        if deleted:
                            logger.info(
                                f"Deleted group message {m.message_id} for order {order_id} in chat {m.chat_id}"
                            )
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏
                    await db.deactivate_group_messages(order_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {order_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ (–ª–∏—á–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
        if master and master.work_chat_id:
            await safe_send_message(
                callback.bot,
                master.work_chat_id,
                f"‚ÑπÔ∏è <b>–ó–∞—è–≤–∫–∞ —Å–Ω—è—Ç–∞</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ —Å–Ω—è—Ç–∞ —Å –≤–∞—Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.\n"
                f"üîß {order.equipment_type}\n"
                f"üìù {order.description}",
                parse_mode="HTML",
                max_attempts=3,
            )

        master_name = master.get_display_name() if master else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        await callback.message.edit_text(
            f"‚úÖ <b>–ú–∞—Å—Ç–µ—Ä —Å–Ω—è—Ç —Å –∑–∞—è–≤–∫–∏!</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master_name}\n\n"
            f"–ó–∞—è–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å üÜï –ù–æ–≤–∞—è.\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
            parse_mode="HTML",
        )

        log_action(
            callback.from_user.id,
            "UNASSIGN_MASTER",
            f"Order #{order_id}, Master {order.assigned_master_id}",
        )

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä —Å–Ω—è—Ç —Å –∑–∞—è–≤–∫–∏")


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê–ú–ò ====================


@router.callback_query(F.data.startswith("close_order:"))
async def callback_close_order(callback: CallbackQuery, user_role: str, state: FSMContext):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ —Å –≤–≤–æ–¥–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    await state.update_data(order_id=order_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–±—â–µ–π —Å—É–º–º—ã
    await state.set_state(AdminCloseOrderStates.enter_total_amount)

    await callback.message.edit_text(
        f"üí∞ <b>–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000, 5000.50 –∏–ª–∏ 0)",
        parse_mode="HTML",
    )

    await callback.answer()


@router.callback_query(F.data.startswith("refuse_order:"))
async def callback_refuse_order(callback: CallbackQuery, user_role: str, user_roles: list):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–∞—è, –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        await db.update_order_status(
            order_id=order_id,
            status=OrderStatus.REFUSED,
            changed_by=callback.from_user.id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REFUSE_ORDER",
            details=f"Refused order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω, —Å retry
        if order.assigned_master_id:
            master = await db.get_master_by_id(order.assigned_master_id)
            if master:
                await safe_send_message(
                    callback.bot,
                    master.telegram_id,
                    f"‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.",
                    parse_mode="HTML",
                    max_attempts=3,
                )

        await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

        log_action(callback.from_user.id, "REFUSE_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


@router.callback_query(F.data.startswith("client_waiting:"))
@handle_errors
async def callback_client_waiting(callback: CallbackQuery, user_role: str):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order or not order.assigned_master_id:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω", show_alert=True)
            return

        master = await db.get_master_by_id(order.assigned_master_id)

        if not master:
            await callback.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–ê–ñ–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        # –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –õ–ò–ß–ö–£ –∫–∞–∫ –≤–∞–∂–Ω–æ–µ/—Å—Ä–æ—á–Ω–æ–µ
        urgent_notification = (
            f"üìû <b>–°–†–û–ß–ù–û: –ö–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç!</b>\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
            f"üîß {order.equipment_type}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n\n"
            f"‚ö†Ô∏è <b>–ö–ª–∏–µ–Ω—Ç –∑–≤–æ–Ω–∏–ª –∏ —Å–ø—Ä–∞—à–∏–≤–∞–ª –≥–¥–µ –º–∞—Å—Ç–µ—Ä!</b>\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–ò–ß–ö–£ –∫–∞–∫ –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        result = await safe_send_message(
            callback.bot, master.telegram_id, urgent_notification, parse_mode="HTML", max_attempts=5
        )

        # –¢–∞–∫–∂–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if master.work_chat_id:
            # ORM: —á–µ—Ä–µ–∑ master.user
            master_mention = (
                f"@{master.user.username}"
                if (hasattr(master, "user") and master.user and master.user.username)
                else master.get_display_name()
            )
            group_notification = (
                f"üìû <b>–í–ê–ñ–ù–û: –ö–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç!</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n"
                f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master_mention}\n\n"
                f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –∑–≤–æ–Ω–∏–ª –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–¥–µ –º–∞—Å—Ç–µ—Ä.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º."
            )

            await safe_send_message(
                callback.bot,
                master.work_chat_id,
                group_notification,
                parse_mode="HTML",
                max_attempts=3,
            )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="CLIENT_WAITING_NOTIFICATION",
            details=f"Sent 'client waiting' notification for order #{order_id} to master {master.id}",
        )

        log_action(
            callback.from_user.id, "CLIENT_WAITING", f"Order #{order_id}, Master {master.id}"
        )

        if result:
            await callback.answer(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Å—Ç–µ—Ä—É {master.get_display_name()}", show_alert=True
            )
        else:
            await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É", show_alert=True)

    finally:
        await db.disconnect()


@router.callback_query(F.data == "back_to_orders")
async def callback_back_to_orders(callback: CallbackQuery, user_role: str):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ (–¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤)

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –î–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–∏–ª—å—Ç—Ä—É –∑–∞—è–≤–æ–∫
    if user_role in [UserRole.ADMIN, UserRole.DISPATCHER]:
        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫ (–±–µ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö)
        db = Database()
        await db.connect()
        try:
            counts = {}
            for status in [
                OrderStatus.NEW,
                OrderStatus.ASSIGNED,
                OrderStatus.ACCEPTED,
                OrderStatus.ONSITE,
                OrderStatus.DR,
            ]:
                orders = await db.get_all_orders(status=status)
                counts[status] = len(orders)
        finally:
            await db.disconnect()

        await callback.message.edit_text(
            "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
            parse_mode="HTML",
            reply_markup=get_orders_filter_keyboard(counts),
        )
    # –î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
    elif user_role == UserRole.MASTER:
        db = Database()
        await db.connect()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
            master = await db.get_master_by_telegram_id(callback.from_user.id)

            if not master:
                await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
            orders = await db.get_orders_by_master(master.id, exclude_closed=True)

            if not orders:
                await callback.message.edit_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n" "–ó–∞—è–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º."
                )
                await callback.answer()
                return

            text = "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            by_status = {}
            for order in orders:
                if order.status not in by_status:
                    by_status[order.status] = []
                by_status[order.status].append(order)

            # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
            status_order = [
                OrderStatus.ASSIGNED,
                OrderStatus.ACCEPTED,
                OrderStatus.ONSITE,
                OrderStatus.DR,
            ]

            for status in status_order:
                if status in by_status:
                    status_emoji = OrderStatus.get_status_emoji(status)
                    status_name = OrderStatus.get_status_name(status)

                    text += f"\n<b>{status_emoji} {status_name}:</b>\n"

                    for order in by_status[status]:
                        scheduled_time = (
                            f" ({order.scheduled_time})" if order.scheduled_time else ""
                        )
                        text += f"  ‚Ä¢ –ó–∞—è–≤–∫–∞ #{order.id} - {order.equipment_type}{scheduled_time}\n"

                    text += "\n"

            keyboard = get_order_list_keyboard(orders, for_master=True)

            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

        finally:
            await db.disconnect()

    await callback.answer()


# ==================== –û–¢–ß–ï–¢–´ ====================


@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
async def btn_reports(message: Message, user_role: str, user_roles: list):
    """
    –ú–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"DEBUG dispatcher.btn_reports: user_role='{user_role}', user_roles={user_roles}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π)
    if not any(role in user_roles for role in [UserRole.ADMIN, UserRole.DISPATCHER]):
        logger.warning(f"Access denied in dispatcher.btn_reports: user_roles={user_roles}")
        return

    # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /reports –∏–∑ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
    from app.handlers.financial_reports import cmd_reports

    logger.info(f"DEBUG calling cmd_reports with user_role='{user_role}'")
    await cmd_reports(message, user_role)


@router.callback_query(F.data == "report_masters")
async def callback_report_masters(callback: CallbackQuery, user_role: str):
    """
    –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        text = await reports.generate_masters_report()

        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="download_masters_excel")
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reports"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "report_statuses")
async def callback_report_statuses(callback: CallbackQuery, user_role: str):
    """
    –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        text = await reports.generate_statuses_report()

        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="download_statuses_excel")
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reports"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "report_equipment")
async def callback_report_equipment(callback: CallbackQuery, user_role: str):
    """
    –û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        text = await reports.generate_equipment_report()

        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="download_equipment_excel")
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reports"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "report_period")
async def callback_report_period(callback: CallbackQuery, user_role: str):
    """
    –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    from app.keyboards.inline import get_period_keyboard

    await callback.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>", parse_mode="HTML", reply_markup=get_period_keyboard()
    )

    await callback.answer()


@router.callback_query(F.data.startswith("period_"))
async def callback_period_selected(callback: CallbackQuery, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    period = callback.data.split("_")[1]

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        start_date, end_date = ReportsService.get_period_dates(period)
        text = await reports.generate_period_report(start_date, end_date)

        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data=f"download_period_excel:{period}"
            )
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reports"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "download_masters_excel")
async def callback_download_masters_excel(callback: CallbackQuery, user_role: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        excel_file = await reports.generate_excel_report(report_type="masters")

        await callback.message.answer_document(document=excel_file, caption="üìä –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º")

    finally:
        await db.disconnect()


@router.callback_query(F.data == "download_statuses_excel")
async def callback_download_statuses_excel(callback: CallbackQuery, user_role: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        excel_file = await reports.generate_excel_report(report_type="statuses")

        await callback.message.answer_document(document=excel_file, caption="üìä –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")

    finally:
        await db.disconnect()


@router.callback_query(F.data == "download_equipment_excel")
async def callback_download_equipment_excel(callback: CallbackQuery, user_role: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        excel_file = await reports.generate_excel_report(report_type="equipment")

        await callback.message.answer_document(
            document=excel_file, caption="üìä –û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("download_period_excel:"))
async def callback_download_period_excel(callback: CallbackQuery, user_role: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    period = callback.data.split(":")[1]

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        start_date, end_date = ReportsService.get_period_dates(period)
        excel_file = await reports.generate_excel_report(
            report_type="all", start_date=start_date, end_date=end_date
        )

        await callback.message.answer_document(
            document=excel_file, caption=f"üìä –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ ({period})"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data == "back_to_reports")
async def callback_back_to_reports(callback: CallbackQuery, user_role: str):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    from app.keyboards.inline import get_reports_keyboard

    await callback.message.edit_text(
        "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        parse_mode="HTML",
        reply_markup=get_reports_keyboard(),
    )

    await callback.answer()


@router.message(F.text == "üë• –ú–∞—Å—Ç–µ—Ä–∞")
async def btn_masters_dispatcher(message: Message, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = await db.get_all_masters(only_approved=True, only_active=True)

        if not masters:
            await message.answer(
                "üìù –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤."
            )
            return

        text = "üë• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:</b>\n\n"

        for master in masters:
            display_name = master.get_display_name()
            text += (
                f"üë§ <b>{display_name}</b>\n"
                f"   üìû {master.phone}\n"
                f"   üîß {master.specialization}\n\n"
            )

        await message.answer(text, parse_mode="HTML")

    finally:
        await db.disconnect()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@handle_errors
async def btn_settings_dispatcher(message: Message, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    from app.database.orm_database import ORMDatabase

    db = ORMDatabase()
    await db.connect()

    try:
        user = await db.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        settings_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {user.get_display_name()}\n"
            f"üÜî <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n"
            f"üëî <b>–†–æ–ª—å:</b> {user.role}\n"
        )

        if user.username:
            settings_text += f"üì± <b>Username:</b> @{user.username}\n"

        await message.answer(settings_text, parse_mode="HTML")

    finally:
        await db.disconnect()


# ==================== FSM: –ó–ê–ö–†–´–¢–ò–ï –ó–ê–Ø–í–ö–ò –° –§–ò–ù–ê–ù–°–ê–ú–ò ====================


@router.message(AdminCloseOrderStates.enter_total_amount)
async def admin_process_total_amount(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000, 5000.50 –∏–ª–∏ 0):"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞
    try:
        total_amount = float(message.text.replace(",", ".").strip())
        if total_amount < 0:
            await message.reply("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000, 5000.50 –∏–ª–∏ 0):"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    await state.update_data(total_amount=total_amount)

    # –ï—Å–ª–∏ —Å—É–º–º–∞ 0 —Ä—É–±–ª–µ–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–∞–∫ –æ—Ç–∫–∞–∑
    if total_amount == 0:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç–∫–∞–∑–∞
        await state.update_data(materials_cost=0.0, has_review=False, out_of_city=False)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        order_id = data.get("order_id")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–∫–∞–∑
        from app.handlers.master import complete_order_as_refusal

        await complete_order_as_refusal(message, state, order_id)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    await state.set_state(AdminCloseOrderStates.enter_materials_cost)

    await message.reply(
        f"‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{total_amount:.2f} ‚ÇΩ</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50\n\n"
        f"–ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ –±—ã–ª–æ, –≤–≤–µ–¥–∏—Ç–µ: 0",
        parse_mode="HTML",
    )


@router.message(AdminCloseOrderStates.enter_materials_cost)
async def admin_process_materials_cost(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500, 0):"
        )
        return

    logger.info(f"Processing materials cost: {message.text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞
    try:
        materials_cost = float(message.text.replace(",", ".").strip())
        if materials_cost < 0:
            await message.reply(
                "‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ):"
            )
            return
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 0):"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    await state.update_data(materials_cost=materials_cost)

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    data = await state.get_data()
    order_id = data.get("order_id")
    logger.info(f"Order ID from state: {order_id}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    await state.set_state(AdminCloseOrderStates.confirm_materials)

    from app.keyboards.inline import get_yes_no_keyboard

    logger.info(f"Creating yes/no keyboard for order {order_id}")
    keyboard = get_yes_no_keyboard("admin_confirm_materials", order_id)
    logger.info(f"Keyboard created: {keyboard}")

    await message.reply(
        f"üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b>\n\n"
        f"–°—É–º–º–∞: <b>{materials_cost:.2f} ‚ÇΩ</b>\n\n"
        f"–í–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞?",
        parse_mode="HTML",
        reply_markup=keyboard,
    )
    logger.info("Message with keyboard sent successfully")


@router.callback_query(lambda c: c.data.startswith("admin_confirm_materials"))
async def admin_process_materials_confirmation_callback(
    callback_query: CallbackQuery, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—É–º–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∞–¥–º–∏–Ω–æ–º/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
    """
    from app.utils import parse_callback_data

    parsed_data = parse_callback_data(callback_query.data)
    action = parsed_data.get("action")
    params = parsed_data.get("params", [])
    answer = params[0] if len(params) > 0 else None  # yes/no
    order_id = params[1] if len(params) > 1 else None  # order_id

    if answer == "yes":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—É–º–º—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–∑—ã–≤—É
        await state.set_state(AdminCloseOrderStates.confirm_review)

        from app.keyboards.inline import get_yes_no_keyboard

        await callback_query.message.edit_text(
            "‚úÖ –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n"
            "‚ùì <b>–í–∑—è–ª –ª–∏ –º–∞—Å—Ç–µ—Ä –æ—Ç–∑—ã–≤ —É –∫–ª–∏–µ–Ω—Ç–∞?</b>\n"
            "(–ó–∞ –æ—Ç–∑—ã–≤ –º–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +10% –∫ –ø—Ä–∏–±—ã–ª–∏)",
            parse_mode="HTML",
            reply_markup=get_yes_no_keyboard("admin_confirm_review", order_id),
        )
    elif answer == "no":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        await state.set_state(AdminCloseOrderStates.enter_materials_cost)

        await callback_query.message.edit_text(
            "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500, 0):",
            parse_mode="HTML",
            reply_markup=None,
        )

    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("admin_confirm_review"))
async def admin_process_review_confirmation_callback(
    callback_query: CallbackQuery, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω–æ–º/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏

    Args:
        callback_query: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    from app.utils import parse_callback_data

    callback_data = parse_callback_data(callback_query.data)
    order_id = callback_data["params"][0] if len(callback_data["params"]) > 0 else None
    answer = callback_data["params"][1] if len(callback_data["params"]) > 1 else None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç
    has_review = answer == "yes"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—Ç–∑—ã–≤–µ
    await state.update_data(has_review=has_review)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –≤—ã–µ–∑–¥–∞ –∑–∞ –≥–æ—Ä–æ–¥
    await state.set_state(AdminCloseOrderStates.confirm_out_of_city)

    review_text = "‚úÖ –û—Ç–∑—ã–≤ –≤–∑—è—Ç!" if has_review else "‚ùå –û—Ç–∑—ã–≤ –Ω–µ –≤–∑—è—Ç"

    from app.keyboards.inline import get_yes_no_keyboard

    # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤ callback data –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–ø—É—Ç–∞–Ω
    data = await state.get_data()
    order_id_from_state = data.get("order_id")

    await callback_query.message.edit_text(
        f"{review_text}\n\n"
        f"üöó <b>–ë—ã–ª –ª–∏ –≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥?</b>\n"
        f"(–ó–∞ –≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥ –º–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +10% –∫ –ø—Ä–∏–±—ã–ª–∏)",
        parse_mode="HTML",
        reply_markup=get_yes_no_keyboard("admin_confirm_out_of_city", order_id_from_state),
    )

    await callback_query.answer()


@router.message(AdminCloseOrderStates.confirm_review)
async def admin_process_review_confirmation_fallback(message: Message, state: FSMContext):
    """
    Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await message.reply(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )


@router.callback_query(lambda c: c.data.startswith("admin_confirm_out_of_city"))
async def admin_process_out_of_city_confirmation_callback(
    callback_query: CallbackQuery, state: FSMContext, user_roles: list
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–µ–∑–¥–∞ –∑–∞ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º

    Args:
        callback_query: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    from app.utils import parse_callback_data

    callback_data = parse_callback_data(callback_query.data)
    order_id = callback_data["params"][0] if len(callback_data["params"]) > 0 else None
    answer = callback_data["params"][1] if len(callback_data["params"]) > 1 else None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç
    out_of_city = answer == "yes"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    total_amount = data.get("total_amount")
    materials_cost = data.get("materials_cost")
    has_review = data.get("has_review")

    db = Database()
    await db.connect()

    # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤ callback data –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–ø—É—Ç–∞–Ω
    data = await state.get_data()
    order_id_from_state = data.get("order_id")

    try:
        order = await db.get_order_by_id(order_id_from_state)

        if not order:
            await callback_query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return

        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        from app.utils.helpers import calculate_profit_split

        master_profit, company_profit = calculate_profit_split(
            total_amount, materials_cost, has_review, out_of_city
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        await db.update_order_amounts(
            order_id=order_id_from_state,
            total_amount=total_amount,
            materials_cost=materials_cost,
            master_profit=master_profit,
            company_profit=company_profit,
            has_review=has_review,
            out_of_city=out_of_city,
        )

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ CLOSED (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ State Machine)
        from app.config import OrderStatus

        await db.update_order_status(
            order_id=order_id_from_state,
            status=OrderStatus.CLOSED,
            changed_by=callback_query.from_user.id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑—É
        try:
            from app.services.order_reports import OrderReportsService

            order_reports_service = OrderReportsService()

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            updated_order = await db.get_order_by_id(order_id_from_state)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            master = None
            dispatcher = None

            if updated_order.assigned_master_id:
                master = await db.get_master_by_id(updated_order.assigned_master_id)

            if updated_order.dispatcher_id:
                dispatcher = await db.get_user_by_telegram_id(updated_order.dispatcher_id)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç—á–µ—Ç–µ
            await order_reports_service.create_order_report(updated_order, master, dispatcher)
            logger.info(f"Order report created for order #{order_id_from_state}")

        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id_from_state}: {e}")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await db.add_audit_log(
            user_id=callback_query.from_user.id,
            action="CLOSE_ORDER",
            details=f"Closed order #{order_id_from_state} with financials",
        )

        # –†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
        net_profit = total_amount - materials_cost

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        out_of_city_text = "üöó –î–∞" if out_of_city else "‚ùå –ù–µ—Ç"
        review_text = "‚≠ê –î–∞" if has_review else "‚ùå –ù–µ—Ç"

        summary_message = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id_from_state} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!</b>\n\n"
            f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
            f"‚îú –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} ‚ÇΩ\n"
            f"‚îú –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏: {materials_cost:.2f} ‚ÇΩ\n"
            f"‚îú –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:.2f} ‚ÇΩ\n"
            f"‚îú –ö –≤—ã–ø–ª–∞—Ç–µ –º–∞—Å—Ç–µ—Ä—É: <b>{master_profit:.2f} ‚ÇΩ</b>\n"
            f"‚îî –ü—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏: <b>{company_profit:.2f} ‚ÇΩ</b>\n\n"
            f"üìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
            f"‚îú –û—Ç–∑—ã–≤: {review_text}\n"
            f"‚îî –í—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥: {out_of_city_text}"
        )

        await callback_query.message.edit_text(summary_message, parse_mode="HTML")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if order.assigned_master_id:
            master = await db.get_master_by_id(order.assigned_master_id)
            if master and master.work_chat_id:
                master_message = (
                    f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–∫—Ä—ã—Ç–∞!</b>\n\n"
                    f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
                    f"‚îú –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} ‚ÇΩ\n"
                    f"‚îú –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏: {materials_cost:.2f} ‚ÇΩ\n"
                    f"‚îú –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:.2f} ‚ÇΩ\n"
                    f"‚îî –ö –≤—ã–ø–ª–∞—Ç–µ –≤–∞–º: <b>{master_profit:.2f} ‚ÇΩ</b>\n\n"
                    f"üìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
                    f"‚îú –û—Ç–∑—ã–≤: {review_text}\n"
                    f"‚îî –í—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥: {out_of_city_text}"
                )

                from aiogram import Bot

                from app.config import Config

                bot = Bot(token=Config.BOT_TOKEN)
                await safe_send_message(bot, master.work_chat_id, master_message, parse_mode="HTML")

        await callback_query.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!")
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e!s}")
    finally:
        await db.disconnect()


@router.message(AdminCloseOrderStates.confirm_out_of_city)
async def admin_process_out_of_city_confirmation_fallback(message: Message, state: FSMContext):
    """
    Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await message.reply(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )
