"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ (–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
"""

import logging
import re
from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from pydantic import ValidationError

from app.config import MAX_DESCRIPTION_LENGTH, MAX_NOTES_LENGTH, OrderStatus, UserRole
from app.database import Database
from app.decorators import handle_errors
from app.keyboards.inline import (
    get_equipment_types_keyboard,
    get_masters_list_keyboard,
    get_order_actions_keyboard,
    get_order_list_keyboard,
    get_orders_filter_keyboard,
)
from app.keyboards.reply import get_cancel_keyboard, get_confirm_keyboard, get_skip_cancel_keyboard
from app.schemas import OrderCreateSchema
from app.states import CreateOrderStates
from app.utils import (
    escape_html,
    format_datetime,
    log_action,
    safe_send_message,
)


logger = logging.getLogger(__name__)

router = Router(name="dispatcher")
# –§–∏–ª—å—Ç—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç.–∫. –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –î–û middleware
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä


# ==================== –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ====================


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
@handle_errors
async def btn_create_order(message: Message, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.clear()
    await state.set_state(CreateOrderStates.equipment_type)

    await message.answer(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏</b>\n\n" "–®–∞–≥ 1/7: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:",
        parse_mode="HTML",
        reply_markup=get_equipment_types_keyboard(),
    )


@router.callback_query(F.data.startswith("equipment:"), CreateOrderStates.equipment_type)
@handle_errors
async def process_equipment_type(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    equipment_type = callback.data.split(":", 1)[1]

    await state.update_data(equipment_type=equipment_type)
    await state.set_state(CreateOrderStates.description)

    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {equipment_type}\n\n" f"–®–∞–≥ 2/7: –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", parse_mode="HTML"
    )

    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n" f"<i>(–º–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )

    await callback.answer()


@router.message(CreateOrderStates.description, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_description(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    description = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ö–µ–º—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ description
        from pydantic import BaseModel, Field, field_validator

        class DescriptionValidator(BaseModel):
            description: str = Field(..., min_length=10, max_length=MAX_DESCRIPTION_LENGTH)

            @field_validator("description")
            @classmethod
            def validate_description(cls, v: str) -> str:
                import re
                v = v.strip()
                if len(v) < 10:
                    raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")

                # –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç SQL injection
                suspicious_patterns = [
                    r";\s*(DROP|DELETE|UPDATE|INSERT|ALTER)\s+",
                    r"--",
                    r"/\*.*\*/",
                    r"UNION\s+SELECT",
                ]
                for pattern in suspicious_patterns:
                    if re.search(pattern, v, re.IGNORECASE):
                        raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")

                return v

        validated = DescriptionValidator(description=description)
        description = validated.description

    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(description=description)
    await state.set_state(CreateOrderStates.client_name)

    await message.answer(
        "üë§ –®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:\n"
        "<i>(–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )


@router.message(CreateOrderStates.client_name, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_client_name(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    client_name = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
    try:
        import re

        from pydantic import BaseModel, Field, field_validator

        class ClientNameValidator(BaseModel):
            client_name: str = Field(..., min_length=5, max_length=200)

            @field_validator("client_name")
            @classmethod
            def validate_client_name(cls, v: str) -> str:
                v = v.strip()

                # –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤
                if len(v) < 5:
                    raise ValueError("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É
                if not re.search(r"[–ê-–Ø–∞-—è–Å—ëA-Za-z]", v):
                    raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã")

                return v

        validated = ClientNameValidator(client_name=client_name)
        client_name = validated.client_name

    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(client_name=client_name)
    await state.set_state(CreateOrderStates.client_address)

    await message.answer("üìç –®–∞–≥ 4/7: –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=get_cancel_keyboard())


@router.message(CreateOrderStates.client_address, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_client_address(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    client_address = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
    try:
        import re

        from pydantic import BaseModel, Field, field_validator

        class ClientAddressValidator(BaseModel):
            client_address: str = Field(..., min_length=10, max_length=500)

            @field_validator("client_address")
            @classmethod
            def validate_client_address(cls, v: str) -> str:
                v = v.strip()

                if len(v) < 10:
                    raise ValueError("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–¥—Ä–µ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É (–Ω–æ–º–µ—Ä –¥–æ–º–∞)
                if not re.search(r"\d", v):
                    raise ValueError("–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä –¥–æ–º–∞")

                return v

        validated = ClientAddressValidator(client_address=client_address)
        client_address = validated.client_address

    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(client_address=client_address)
    await state.set_state(CreateOrderStates.client_phone)

    await message.answer(
        "üìû –®–∞–≥ 5/7: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:\n" "<i>(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(CreateOrderStates.client_phone, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_client_phone(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    phone = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞ —á—Ç–æ –∏ –≤ —Å—Ö–µ–º–µ)
    try:
        import re

        from pydantic import BaseModel, Field, field_validator

        class ClientPhoneValidator(BaseModel):
            client_phone: str = Field(..., min_length=10, max_length=20)

            @field_validator("client_phone")
            @classmethod
            def validate_client_phone(cls, v: str) -> str:
                cleaned = re.sub(r"[^\d+]", "", v.strip())
                patterns = [r"^\+7\d{10}$", r"^8\d{10}$", r"^7\d{10}$"]

                if not any(re.match(pattern, cleaned) for pattern in patterns):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è: +7XXXXXXXXXX")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                if cleaned.startswith("8") and len(cleaned) == 11:
                    cleaned = "+7" + cleaned[1:]
                elif cleaned.startswith("7") and len(cleaned) == 11:
                    cleaned = "+" + cleaned

                return cleaned

        validated = ClientPhoneValidator(client_phone=phone)
        phone = validated.client_phone

    except ValidationError as e:
        error_msg = e.errors()[0]["msg"]
        await message.answer(
            f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(client_phone=phone)
    await state.set_state(CreateOrderStates.notes)

    await message.answer(
        "üìù –®–∞–≥ 6/7: –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        f"<i>(–º–∞–∫—Å–∏–º—É–º {MAX_NOTES_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)</i>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        parse_mode="HTML",
        reply_markup=get_skip_cancel_keyboard(),
    )


@router.message(CreateOrderStates.notes, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
@handle_errors
async def skip_notes(message: Message, state: FSMContext, user_role: str):
    """
    –ü—Ä–æ–ø—É—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.update_data(notes=None)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è (–Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥!)
    await state.set_state(CreateOrderStates.scheduled_time)
    await message.answer(
        "‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
        "‚Ä¢ 14:30\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 10:00\n"
        "‚Ä¢ 15.10.2025 16:00\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</b>\n"
        "‚Ä¢ –ù–∞–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n"
        "‚Ä¢ –ü–æ—Å–ª–µ 14:00\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
        parse_mode="HTML",
        reply_markup=get_skip_cancel_keyboard(),
    )


@router.message(CreateOrderStates.notes, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_notes(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    notes = message.text.strip()

    if len(notes) > MAX_NOTES_LENGTH:
        await message.answer(
            f"‚ùå –ó–∞–º–µ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_NOTES_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤:",
            reply_markup=get_skip_cancel_keyboard(),
        )
        return

    await state.update_data(notes=notes)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
    await state.set_state(CreateOrderStates.scheduled_time)
    await message.answer(
        "‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
        "‚Ä¢ 14:30\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 10:00\n"
        "‚Ä¢ 15.10.2025 16:00\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</b>\n"
        "‚Ä¢ –ù–∞–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É\n"
        "‚Ä¢ –ü–æ—Å–ª–µ 14:00\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
        parse_mode="HTML",
        reply_markup=get_skip_cancel_keyboard(),
    )


@router.message(CreateOrderStates.scheduled_time, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def process_scheduled_time(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    scheduled_time = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
    if scheduled_time:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º 100)
        if len(scheduled_time) < 3:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_skip_cancel_keyboard(),
            )
            return
        
        if len(scheduled_time) > 100:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_skip_cancel_keyboard(),
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ SQL injection
        dangerous_patterns = [
            r"\b(drop|delete|truncate|insert|update|alter)\b.*\b(table|from|into|database|set|where)\b",
            r";\s*(drop|delete|truncate|insert|update|alter)\s+",
            r"--",
            r"/\*.*\*/",
            r"\bxp_",
            r"\bsp_",
        ]
        
        for pattern in dangerous_patterns:
            if re.search(pattern, scheduled_time, re.IGNORECASE):
                await message.answer(
                    "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=get_skip_cancel_keyboard(),
                )
                return

    await state.update_data(scheduled_time=scheduled_time)
    await show_order_confirmation(message, state)


@router.message(CreateOrderStates.scheduled_time, F.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
@handle_errors
async def skip_scheduled_time(message: Message, state: FSMContext, user_role: str):
    """
    –ü—Ä–æ–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.update_data(scheduled_time=None)
    await show_order_confirmation(message, state)


# ==================== –û–¢–ú–ï–ù–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò ====================


@router.message(CreateOrderStates.confirm, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def cancel_create_order(message: Message, state: FSMContext, user_role: str):
    """
    –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await state.clear()

    from app.keyboards.reply import get_main_menu_keyboard

    await message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard(user_role)
    )

    log_action(message.from_user.id, "CANCEL_CREATE_ORDER", "Order creation cancelled")


async def show_order_confirmation(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSMContext –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    data = await state.get_data()

    text = (
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {escape_html(data['equipment_type'])}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape_html(data['description'])}\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {escape_html(data['client_name'])}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {escape_html(data['client_address'])}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape_html(data['client_phone'])}\n"
    )

    if data.get("notes"):
        text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {escape_html(data['notes'])}\n"

    if data.get("scheduled_time"):
        text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {escape_html(data['scheduled_time'])}\n"

    await state.set_state(CreateOrderStates.confirm)

    await message.answer(text, parse_mode="HTML", reply_markup=get_confirm_keyboard())


@router.message(CreateOrderStates.confirm, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
@handle_errors
async def confirm_create_order(message: Message, state: FSMContext, user_role: str):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –ø–æ–ª–Ω–æ–π Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = await state.get_data()
    db = None
    order = None

    try:
        # –ö–†–ò–¢–ò–ß–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Pydantic –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        try:
            order_data = OrderCreateSchema(
                equipment_type=data["equipment_type"],
                description=data["description"],
                client_name=data["client_name"],
                client_address=data["client_address"],
                client_phone=data["client_phone"],
                dispatcher_id=message.from_user.id,
                notes=data.get("notes"),
                scheduled_time=data.get("scheduled_time"),
            )
            logger.info(
                f"Order data validated successfully for dispatcher {message.from_user.id}"
            )
        except ValidationError as e:
            # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ - –æ—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            logger.error(f"Order validation failed: {e}")

            from app.keyboards.reply import get_main_menu_keyboard

            error_details = "\n".join([f"‚Ä¢ {err['msg']}" for err in e.errors()])
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏:</b>\n\n{error_details}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard(user_role)
            )
            return

        db = Database()
        await db.connect()

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        order = await db.create_order(
            equipment_type=order_data.equipment_type,
            description=order_data.description,
            client_name=order_data.client_name,
            client_address=order_data.client_address,
            client_phone=order_data.client_phone,
            dispatcher_id=order_data.dispatcher_id,
            notes=order_data.notes,
            scheduled_time=order_data.scheduled_time,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=message.from_user.id,
            action="CREATE_ORDER",
            details=f"Created order #{order.id}",
        )

        log_action(message.from_user.id, "CREATE_ORDER", f"Order #{order.id}")

    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if db:
            await db.disconnect()
        # –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º FSM state
        await state.clear()

    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    from app.keyboards.reply import get_main_menu_keyboard

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data=f"assign_master:{order.id}"
        )
    )
    builder.row(
        InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"view_order:{order.id}")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: üÜï –ù–æ–≤–∞—è\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –Ω–µ–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏.",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—Ä–æ—Ç–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard(user_role))


# ==================== –ü–†–û–°–ú–û–¢–† –ó–ê–Ø–í–û–ö ====================


@router.message(F.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
@handle_errors
async def btn_all_orders(message: Message, state: FSMContext, user_role: str):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await state.clear()

    await message.answer(
        "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        parse_mode="HTML",
        reply_markup=get_orders_filter_keyboard(),
    )


@router.callback_query(F.data.startswith("filter_orders:"))
@handle_errors
async def callback_filter_orders(callback: CallbackQuery, user_role: str):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    filter_status = callback.data.split(":")[1]

    db = Database()
    await db.connect()

    try:
        if filter_status == "all":
            orders = await db.get_all_orders(limit=50)
            filter_name = "–≤—Å–µ"
        else:
            orders = await db.get_all_orders(status=filter_status, limit=50)
            filter_name = OrderStatus.get_status_name(filter_status)

        if not orders:
            await callback.message.edit_text(f"üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{filter_name}'.")
            await callback.answer()
            return

        text = f"üìã <b>–ó–∞—è–≤–∫–∏ ({filter_name}):</b>\n\n"

        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status_emoji = OrderStatus.get_status_emoji(order.status)
            status_name = OrderStatus.get_status_name(order.status)

            text += (
                f"{status_emoji} <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
                f"   üîß {escape_html(order.equipment_type)}\n"
                f"   üìä {status_name}\n"
            )

            if order.master_name:
                text += f"   üë®‚Äçüîß {escape_html(order.master_name)}\n"

            text += "\n"

        if len(orders) > 10:
            text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(orders)} –∑–∞—è–≤–æ–∫</i>"

        keyboard = get_order_list_keyboard(orders[:20])

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("view_order:"))
@handle_errors
async def callback_view_order(callback: CallbackQuery, user_role: str):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ (–¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤)

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        status_emoji = OrderStatus.get_status_emoji(order.status)
        status_name = OrderStatus.get_status_name(order.status)

        text = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {escape_html(order.equipment_type)}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape_html(order.description)}\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {escape_html(order.client_name)}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {escape_html(order.client_address)}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape_html(order.client_phone)}\n\n"
        )

        if order.master_name:
            text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {order.master_name}\n"

        if order.dispatcher_name:
            text += f"üìã <b>–î–∏—Å–ø–µ—Ç—á–µ—Ä:</b> {order.dispatcher_name}\n"

        if order.notes:
            text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n"

        if order.scheduled_time:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n"

        if order.created_at:
            text += f"\nüìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"

        if order.updated_at and order.updated_at != order.created_at:
            text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {format_datetime(order.updated_at)}\n"

        keyboard = get_order_actions_keyboard(order, user_role)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


# ==================== –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ú–ê–°–¢–ï–†–ê ====================


@router.callback_query(F.data.startswith("assign_master:"))
async def callback_assign_master(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    await state.update_data(order_id=order_id)

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = await db.get_all_masters(only_approved=True, only_active=True)

        if not masters:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤", show_alert=True)
            return

        keyboard = get_masters_list_keyboard(
            masters, order_id=order_id, action="select_master_for_order"
        )

        await callback.message.edit_text(
            f"üë®‚Äçüîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:</b>",
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("select_master_for_order:"))
@handle_errors
async def callback_select_master_for_order(callback: CallbackQuery, user_role: str):
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    parts = callback.data.split(":")
    order_id = int(parts[1])
    master_id = int(parts[2])

    db = Database()
    await db.connect()

    try:
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.assign_master_to_order(order_id, master_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
        master = await db.get_master_by_id(master_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ASSIGN_MASTER",
            details=f"Assigned master {master_id} to order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å retry
        order = await db.get_order_by_id(order_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        # –ï—Å–ª–∏ –µ—Å—Ç—å work_chat_id - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
        # –ò–Ω–∞—á–µ - –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É
        target_chat_id = master.work_chat_id if master.work_chat_id else master.telegram_id

        logger.info(
            f"Attempting to send notification to {'group' if master.work_chat_id else 'DM'} {target_chat_id}"
        )

        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if master.work_chat_id:
            from app.keyboards.inline import get_group_order_keyboard

            notification_text = (
                f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>\n\n"
                f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus.get_status_name(OrderStatus.ASSIGNED)}\n"
                f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
            )

            if order.notes:
                notification_text += f"üìÑ <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

            if order.scheduled_time:
                notification_text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n\n"

            # –£–ø–æ–º–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ
            if master.username:
                notification_text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> @{master.username}\n\n"
            else:
                notification_text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n\n"

            notification_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
            notification_text += f"üîÑ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞:</b> {format_datetime(datetime.now())}"

            keyboard = get_group_order_keyboard(order, OrderStatus.ASSIGNED)

            logger.info(f"Notification text prepared: {len(notification_text)} chars")

            result = await safe_send_message(
                callback.bot,
                target_chat_id,
                notification_text,
                parse_mode="HTML",
                reply_markup=keyboard,
                max_attempts=5,
            )

            if result:
                logger.info(f"SUCCESS: Notification sent to group {target_chat_id}")
            else:
                logger.error(f"CRITICAL: Failed to notify master in group {target_chat_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            from app.keyboards.inline import get_group_order_keyboard

            notification_text = (
                f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>\n\n"
                f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus.get_status_name(OrderStatus.ASSIGNED)}\n"
                f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
            )

            if order.notes:
                notification_text += f"üìÑ <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

            if order.scheduled_time:
                notification_text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n\n"

            notification_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
            notification_text += f"üîÑ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞:</b> {format_datetime(datetime.now())}"

            keyboard = get_group_order_keyboard(order, OrderStatus.ASSIGNED)

            result = await safe_send_message(
                callback.bot,
                target_chat_id,
                notification_text,
                parse_mode="HTML",
                reply_markup=keyboard,
                max_attempts=5,
            )

            if result:
                logger.info(f"SUCCESS: Notification sent to DM {target_chat_id}")
            else:
                logger.error(f"CRITICAL: Failed to notify master in DM {target_chat_id}")

        await callback.message.edit_text(
            f"‚úÖ <b>–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n\n"
            f"–ú–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ.",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "ASSIGN_MASTER", f"Order #{order_id}, Master {master_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!")


# ==================== –ü–ï–†–ï–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ú–ê–°–¢–ï–†–ê ====================


@router.callback_query(F.data.startswith("reassign_master:"))
async def callback_reassign_master(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = await db.get_all_masters(only_approved=True, only_active=True)

        if not masters:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤", show_alert=True)
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        available_masters = [m for m in masters if m.id != order.assigned_master_id]

        if not available_masters:
            await callback.answer(
                "‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", show_alert=True
            )
            return

        keyboard = get_masters_list_keyboard(
            available_masters, order_id=order_id, action="select_new_master_for_order"
        )

        current_master_name = order.master_name if order.master_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        await callback.message.edit_text(
            f"üîÑ <b>–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üë®‚Äçüîß –¢–µ–∫—É—â–∏–π –º–∞—Å—Ç–µ—Ä: {current_master_name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞:",
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("select_new_master_for_order:"))
async def callback_select_new_master_for_order(callback: CallbackQuery, user_role: str):
    """
    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É (–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    parts = callback.data.split(":")
    order_id = int(parts[1])
    new_master_id = int(parts[2])

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏ —Å—Ç–∞—Ä–æ–º –º–∞—Å—Ç–µ—Ä–µ
        order = await db.get_order_by_id(order_id)
        old_master_id = order.assigned_master_id
        old_master = await db.get_master_by_id(old_master_id) if old_master_id else None

        # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.assign_master_to_order(order_id, new_master_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –º–∞—Å—Ç–µ—Ä–µ
        new_master = await db.get_master_by_id(new_master_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REASSIGN_MASTER",
            details=f"Reassigned order #{order_id} from master {old_master_id} to master {new_master_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –æ —Å–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ —Å retry
        if old_master:
            target_chat_id = (
                old_master.work_chat_id if old_master.work_chat_id else old_master.telegram_id
            )
            await safe_send_message(
                callback.bot,
                target_chat_id,
                f"‚ÑπÔ∏è <b>–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.\n"
                f"üîß {order.equipment_type}\n"
                f"üìù {order.description}",
                parse_mode="HTML",
                max_attempts=3,
            )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ —Å retry
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        target_chat_id = (
            new_master.work_chat_id if new_master.work_chat_id else new_master.telegram_id
        )

        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if new_master.work_chat_id:
            from app.keyboards.inline import get_group_order_keyboard

            notification_text = (
                f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>\n\n"
                f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus.get_status_name(OrderStatus.ASSIGNED)}\n"
                f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
                f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
            )

            if order.notes:
                notification_text += f"üìÑ <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

            # –£–ø–æ–º–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ
            if new_master.username:
                notification_text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> @{new_master.username}\n\n"
            else:
                notification_text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {new_master.get_display_name()}\n\n"

            notification_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
            notification_text += f"üîÑ <b>–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞:</b> {format_datetime(datetime.now())}"

            keyboard = get_group_order_keyboard(order, OrderStatus.ASSIGNED)

            result = await safe_send_message(
                callback.bot,
                target_chat_id,
                notification_text,
                parse_mode="HTML",
                reply_markup=keyboard,
                max_attempts=5,
            )
            if result:
                logger.info(f"Notification sent to new master group {target_chat_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            notification_text = (
                f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n"
                f"üîß {order.equipment_type}\n"
                f"üìù {order.description}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏ '–ú–æ–∏ –∑–∞—è–≤–∫–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
            )

            result = await safe_send_message(
                callback.bot, target_chat_id, notification_text, parse_mode="HTML", max_attempts=5
            )
            if result:
                logger.info(f"Notification sent to new master DM {target_chat_id}")

        old_master_name = old_master.get_display_name() if old_master else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        await callback.message.edit_text(
            f"‚úÖ <b>–ú–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω!</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üë®‚Äçüîß –°—Ç–∞—Ä—ã–π –º–∞—Å—Ç–µ—Ä: {old_master_name}\n"
            f"üë®‚Äçüîß –ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä: {new_master.get_display_name()}\n\n"
            f"–û–±–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            parse_mode="HTML",
        )

        log_action(
            callback.from_user.id,
            "REASSIGN_MASTER",
            f"Order #{order_id}, Old Master {old_master_id}, New Master {new_master_id}",
        )

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω!")


@router.callback_query(F.data.startswith("unassign_master:"))
async def callback_unassign_master(callback: CallbackQuery, user_role: str):
    """
    –°–Ω—è—Ç–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Å –∑–∞—è–≤–∫–∏ (–≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å NEW)

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏ –º–∞—Å—Ç–µ—Ä–µ
        order = await db.get_order_by_id(order_id)

        if not order or not order.assigned_master_id:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω", show_alert=True)
            return

        master = await db.get_master_by_id(order.assigned_master_id)

        # –°–Ω–∏–º–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ NEW
        await db.connection.execute(
            "UPDATE orders SET status = ?, assigned_master_id = NULL WHERE id = ?",
            (OrderStatus.NEW, order_id),
        )
        await db.connection.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="UNASSIGN_MASTER",
            details=f"Unassigned master {order.assigned_master_id} from order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å retry
        if master:
            target_chat_id = master.work_chat_id if master.work_chat_id else master.telegram_id
            await safe_send_message(
                callback.bot,
                target_chat_id,
                f"‚ÑπÔ∏è <b>–ó–∞—è–≤–∫–∞ —Å–Ω—è—Ç–∞</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ —Å–Ω—è—Ç–∞ —Å –≤–∞—Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.\n"
                f"üîß {order.equipment_type}\n"
                f"üìù {order.description}",
                parse_mode="HTML",
                max_attempts=3,
            )

        master_name = master.get_display_name() if master else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        await callback.message.edit_text(
            f"‚úÖ <b>–ú–∞—Å—Ç–µ—Ä —Å–Ω—è—Ç —Å –∑–∞—è–≤–∫–∏!</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master_name}\n\n"
            f"–ó–∞—è–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å üÜï –ù–æ–≤–∞—è.\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
            parse_mode="HTML",
        )

        log_action(
            callback.from_user.id,
            "UNASSIGN_MASTER",
            f"Order #{order_id}, Master {order.assigned_master_id}",
        )

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä —Å–Ω—è—Ç —Å –∑–∞—è–≤–∫–∏")


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê–ú–ò ====================


@router.callback_query(F.data.startswith("close_order:"))
async def callback_close_order(callback: CallbackQuery, user_role: str):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        await db.update_order_status(
            order_id, OrderStatus.CLOSED, changed_by=callback.from_user.id
        )

        await db.add_audit_log(
            user_id=callback.from_user.id, action="CLOSE_ORDER", details=f"Closed order #{order_id}"
        )

        await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –∑–∞–∫—Ä—ã—Ç–∞.")

        log_action(callback.from_user.id, "CLOSE_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")


@router.callback_query(F.data.startswith("refuse_order:"))
async def callback_refuse_order(callback: CallbackQuery, user_role: str):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        await db.update_order_status(
            order_id, OrderStatus.REFUSED, changed_by=callback.from_user.id
        )

        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REFUSE_ORDER",
            details=f"Refused order #{order_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω, —Å retry
        if order.assigned_master_id:
            master = await db.get_master_by_id(order.assigned_master_id)
            if master:
                await safe_send_message(
                    callback.bot,
                    master.telegram_id,
                    f"‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ #{order_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.",
                    parse_mode="HTML",
                    max_attempts=3,
                )

        await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

        log_action(callback.from_user.id, "REFUSE_ORDER", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "back_to_orders")
async def callback_back_to_orders(callback: CallbackQuery, user_role: str):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await callback.message.edit_text(
        "üìã <b>–í—Å–µ –∑–∞—è–≤–∫–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        parse_mode="HTML",
        reply_markup=get_orders_filter_keyboard(),
    )

    await callback.answer()


# ==================== –û–¢–ß–ï–¢–´ ====================


@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
async def btn_reports(message: Message, user_role: str):
    """
    –ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    from app.keyboards.inline import get_reports_keyboard

    await message.answer(
        "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        parse_mode="HTML",
        reply_markup=get_reports_keyboard(),
    )


@router.callback_query(F.data == "report_masters")
async def callback_report_masters(callback: CallbackQuery, user_role: str):
    """
    –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        text = await reports.generate_masters_report()

        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="download_masters_excel")
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reports"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "report_statuses")
async def callback_report_statuses(callback: CallbackQuery, user_role: str):
    """
    –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        text = await reports.generate_statuses_report()

        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="download_statuses_excel")
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reports"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "report_equipment")
async def callback_report_equipment(callback: CallbackQuery, user_role: str):
    """
    –û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        text = await reports.generate_equipment_report()

        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="download_equipment_excel")
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reports"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "report_period")
async def callback_report_period(callback: CallbackQuery, user_role: str):
    """
    –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    from app.keyboards.inline import get_period_keyboard

    await callback.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>", parse_mode="HTML", reply_markup=get_period_keyboard()
    )

    await callback.answer()


@router.callback_query(F.data.startswith("period_"))
async def callback_period_selected(callback: CallbackQuery, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    period = callback.data.split("_")[1]

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        start_date, end_date = ReportsService.get_period_dates(period)
        text = await reports.generate_period_report(start_date, end_date)

        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data=f"download_period_excel:{period}"
            )
        )
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reports"))

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "download_masters_excel")
async def callback_download_masters_excel(callback: CallbackQuery, user_role: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        excel_file = await reports.generate_excel_report(report_type="masters")

        await callback.message.answer_document(document=excel_file, caption="üìä –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º")

    finally:
        await db.disconnect()


@router.callback_query(F.data == "download_statuses_excel")
async def callback_download_statuses_excel(callback: CallbackQuery, user_role: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        excel_file = await reports.generate_excel_report(report_type="statuses")

        await callback.message.answer_document(document=excel_file, caption="üìä –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")

    finally:
        await db.disconnect()


@router.callback_query(F.data == "download_equipment_excel")
async def callback_download_equipment_excel(callback: CallbackQuery, user_role: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        excel_file = await reports.generate_excel_report(report_type="equipment")

        await callback.message.answer_document(
            document=excel_file, caption="üìä –û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("download_period_excel:"))
async def callback_download_period_excel(callback: CallbackQuery, user_role: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    period = callback.data.split(":")[1]

    await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    db = Database()
    await db.connect()

    try:
        from app.services.reports import ReportsService

        reports = ReportsService(db)

        start_date, end_date = ReportsService.get_period_dates(period)
        excel_file = await reports.generate_excel_report(
            report_type="all", start_date=start_date, end_date=end_date
        )

        await callback.message.answer_document(
            document=excel_file, caption=f"üìä –û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ ({period})"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data == "back_to_reports")
async def callback_back_to_reports(callback: CallbackQuery, user_role: str):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    from app.keyboards.inline import get_reports_keyboard

    await callback.message.edit_text(
        "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        parse_mode="HTML",
        reply_markup=get_reports_keyboard(),
    )

    await callback.answer()


@router.message(F.text == "üë• –ú–∞—Å—Ç–µ—Ä–∞")
async def btn_masters_dispatcher(message: Message, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = await db.get_all_masters(only_approved=True, only_active=True)

        if not masters:
            await message.answer(
                "üìù –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤."
            )
            return

        text = "üë• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:</b>\n\n"

        for master in masters:
            display_name = master.get_display_name()
            text += (
                f"üë§ <b>{display_name}</b>\n"
                f"   üìû {master.phone}\n"
                f"   üîß {master.specialization}\n\n"
            )

        await message.answer(text, parse_mode="HTML")

    finally:
        await db.disconnect()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def btn_settings_dispatcher(message: Message, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from app.database import Database

    db = Database()
    await db.connect()

    try:
        user = await db.get_user_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        settings_text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {user.get_full_name()}\n"
            f"üÜî <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n"
            f"üëî <b>–†–æ–ª—å:</b> {user.role}\n"
        )

        if user.username:
            settings_text += f"üì± <b>Username:</b> @{user.username}\n"

        await message.answer(settings_text, parse_mode="HTML")

    finally:
        await db.disconnect()
