"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
"""

import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config import UserRole
from app.database import Database
from app.decorators import handle_errors, require_role
from app.keyboards.inline import get_search_type_keyboard
from app.keyboards.reply import get_cancel_keyboard
from app.services.order_search import OrderSearchService
from app.states import SearchOrderStates
from app.utils import escape_html, format_phone, validate_phone


logger = logging.getLogger(__name__)

router = Router(name="order_search")


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤")
@handle_errors
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
async def btn_search_orders(message: Message, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await state.clear()
    await state.set_state(SearchOrderStates.select_search_type)

    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        parse_mode="HTML",
        reply_markup=get_search_type_keyboard(),
    )


@router.callback_query(F.data == "search_by_phone")
@handle_errors
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
async def callback_search_by_phone(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await callback.answer()
    await state.set_state(SearchOrderStates.enter_phone)

    await callback.message.edit_text(
        "üìû <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:\n"
        "<i>(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX, 8XXXXXXXXXX –∏–ª–∏ XXXXXXXXXX)</i>",
        parse_mode="HTML",
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_cancel_keyboard(),
    )


@router.callback_query(F.data == "search_by_address")
@handle_errors
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
async def callback_search_by_address(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await callback.answer()
    await state.set_state(SearchOrderStates.enter_address)

    await callback.message.edit_text(
        "üè† <b>–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:\n"
        "<i>(–º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞)</i>",
        parse_mode="HTML",
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=get_cancel_keyboard(),
    )


@router.callback_query(F.data == "search_by_phone_and_address")
@handle_errors
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
async def callback_search_by_phone_and_address(
    callback: CallbackQuery, state: FSMContext, user_role: str
):
    """
    –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –∞–¥—Ä–µ—Å—É

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await callback.answer()
    await state.set_state(SearchOrderStates.enter_phone_and_address)

    await callback.message.edit_text(
        "üìûüè† <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –∞–¥—Ä–µ—Å—É</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:",
        parse_mode="HTML",
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_cancel_keyboard(),
    )


@router.callback_query(F.data == "search_cancel")
@handle_errors
async def callback_search_cancel(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await callback.answer()
    await state.clear()

    await callback.message.edit_text(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
    )


@router.message(SearchOrderStates.enter_phone, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
async def process_search_phone(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    phone = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ +7XXXXXXXXXX\n"
            "‚Ä¢ 8XXXXXXXXXX\n"
            "‚Ä¢ XXXXXXXXXX",
            reply_markup=get_cancel_keyboard(),
        )
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    normalized_phone = re.sub(r"\D", "", phone)
    if normalized_phone.startswith("8") and len(normalized_phone) == 11:
        normalized_phone = "7" + normalized_phone[1:]
    elif len(normalized_phone) == 10:
        normalized_phone = "7" + normalized_phone

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    db = Database()
    await db.connect()

    try:
        search_service = OrderSearchService(db)
        orders = await search_service.search_orders_by_phone(normalized_phone)

        if orders:
            result_text = search_service.format_search_results(orders, "–ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
            await message.answer(
                result_text,
                parse_mode="HTML",
            )
        else:
            await message.answer(
                f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
                f"üìû <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É:</b> {format_phone(normalized_phone)}\n\n"
                f"‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML",
            )

    finally:
        # ORMDatabase –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ close, —Ç–æ–ª—å–∫–æ engine
        if hasattr(db, 'engine') and db.engine:
            await db.engine.dispose()

    await state.clear()


@router.message(SearchOrderStates.enter_address, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
async def process_search_address(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    address = message.text.strip()

    if len(address) < 3:
        await message.answer(
            "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=get_cancel_keyboard(),
        )
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    db = Database()
    await db.connect()

    try:
        search_service = OrderSearchService(db)
        orders = await search_service.search_orders_by_address(address)

        if orders:
            result_text = search_service.format_search_results(orders, "–ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É")
            await message.answer(
                result_text,
                parse_mode="HTML",
            )
        else:
            await message.answer(
                f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É</b>\n\n"
                f"üè† <b>–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É:</b> {escape_html(address)}\n\n"
                f"‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML",
            )

    finally:
        # ORMDatabase –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ close, —Ç–æ–ª—å–∫–æ engine
        if hasattr(db, 'engine') and db.engine:
            await db.engine.dispose()

    await state.clear()


@router.message(SearchOrderStates.enter_phone_and_address, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
async def process_search_phone_and_address(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = await state.get_data()

    if "phone" not in data:
        # –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ - —Ç–µ–ª–µ—Ñ–æ–Ω
        phone = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not validate_phone(phone):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ +7XXXXXXXXXX\n"
                "‚Ä¢ 8XXXXXXXXXX\n"
                "‚Ä¢ XXXXXXXXXX",
                reply_markup=get_cancel_keyboard(),
            )
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        normalized_phone = re.sub(r"\D", "", phone)
        if normalized_phone.startswith("8") and len(normalized_phone) == 11:
            normalized_phone = "7" + normalized_phone[1:]
        elif len(normalized_phone) == 10:
            normalized_phone = "7" + normalized_phone

        await state.update_data(phone=normalized_phone)
        await message.answer(
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {format_phone(normalized_phone)}\n\n" "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard(),
        )
        return

    # –í—Ç–æ—Ä–æ–π –≤–≤–æ–¥ - –∞–¥—Ä–µ—Å
    address = message.text.strip()

    if len(address) < 3:
        await message.answer(
            "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=get_cancel_keyboard(),
        )
        return

    phone = data["phone"]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    db = Database()
    await db.connect()

    try:
        search_service = OrderSearchService(db)
        orders = await search_service.search_orders_by_phone_and_address(phone, address)

        if orders:
            result_text = search_service.format_search_results(
                orders, "–ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –∞–¥—Ä–µ—Å—É"
            )
            await message.answer(
                result_text,
                parse_mode="HTML",
            )
        else:
            await message.answer(
                f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –∞–¥—Ä–µ—Å—É</b>\n\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {format_phone(phone)}\n"
                f"üè† <b>–ê–¥—Ä–µ—Å:</b> {escape_html(address)}\n\n"
                f"‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML",
            )

    finally:
        # ORMDatabase –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ close, —Ç–æ–ª—å–∫–æ engine
        if hasattr(db, 'engine') and db.engine:
            await db.engine.dispose()

    await state.clear()


@router.message(SearchOrderStates.enter_phone, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(SearchOrderStates.enter_address, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(SearchOrderStates.enter_phone_and_address, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def cancel_search(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await state.clear()
    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=None,  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
