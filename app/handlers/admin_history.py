"""
Handler –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞—è–≤–æ–∫ (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
"""

import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.database.db import Database
from app.decorators import handle_errors
from app.filters.role_filter import RoleFilter
from app.repositories.order_repository_extended import OrderRepositoryExtended
from app.services.search_service import SearchService
from app.utils.helpers import format_datetime


logger = logging.getLogger(__name__)
router = Router()


def get_history_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞—è–≤–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤", callback_data=f"history_status:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data=f"history_changes:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìù –ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π", callback_data=f"history_audit:{order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìã –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", callback_data=f"history_full:{order_id}"
                )
            ],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"view_order:{order_id}")],
        ]
    )


def get_deleted_orders_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    buttons = []

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"deleted_orders:{page-1}")
        )
    nav_buttons.append(
        InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"deleted_orders:{page+1}")
    )

    if nav_buttons:
        buttons.append(nav_buttons)

    buttons.append([InlineKeyboardButton(text="¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_restore_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"restore_order:{order_id}"
                )
            ],
            [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"view_deleted:{order_id}")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="deleted_orders:0")],
        ]
    )


# ===== –ö–û–ú–ê–ù–î–´ =====


@router.message(Command("history"), RoleFilter(["ADMIN", "DISPATCHER"]))
@handle_errors
async def cmd_history(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏"""
    args = message.text.split()

    if len(args) < 2:
        await message.answer(
            "üìã <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /history 123",
            parse_mode="HTML",
        )
        return

    try:
        order_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        order = await order_repo.get_by_id(order_id, include_deleted=True)

        if not order:
            await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏
        text = f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
        text += f"üîß –¢–∏–ø: {order.equipment_type}\n"
        text += f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {order.status}\n"
        text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"

        if hasattr(order, "deleted_at") and order.deleted_at:
            text += f"\nüóë <i>–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {format_datetime(order.deleted_at)}</i>\n"

        await message.answer(text, reply_markup=get_history_keyboard(order_id), parse_mode="HTML")

    finally:
        await db.disconnect()


@router.message(Command("deleted"), RoleFilter(["ADMIN"]))
@handle_errors
async def cmd_deleted_orders(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –ü–æ–ª—É—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        deleted_orders = await order_repo.get_deleted_orders(limit=10, offset=0)

        if not deleted_orders:
            await message.answer("‚úÖ –ù–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        text = "üóë <b>–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"
        text += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(deleted_orders)}\n\n"

        for order in deleted_orders:
            text += f"üìã <b>#{order.id}</b> - {order.equipment_type}\n"
            text += f"   üë§ {order.client_name}\n"
            text += f"   üìä {order.status}\n"
            if hasattr(order, "deleted_at") and order.deleted_at:
                text += f"   üóë {format_datetime(order.deleted_at)}\n"
            text += "\n"

        await message.answer(
            text, reply_markup=get_deleted_orders_keyboard(page=0), parse_mode="HTML"
        )

    finally:
        await db.disconnect()


@router.message(Command("search"), RoleFilter(["ADMIN", "DISPATCHER"]))
@handle_errors
async def cmd_search(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    args = message.text.split(maxsplit=1)

    if len(args) < 2:
        await message.answer(
            "üîç <b>–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /search —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫\n"
            "‚Ä¢ /search –ò–≤–∞–Ω–æ–≤\n"
            "‚Ä¢ /search 79991234567",
            parse_mode="HTML",
        )
        return

    query = args[1]

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)
        search_service = SearchService(order_repo)

        # –ü–æ–∏—Å–∫
        orders = await search_service.search(query=query, limit=20)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = search_service.format_search_results(orders)

        await message.answer(result, parse_mode="HTML")

    finally:
        await db.disconnect()


# ===== CALLBACK HANDLERS =====


@router.callback_query(F.data.startswith("history_status:"))
@handle_errors
async def callback_history_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤"""
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
        history = await order_repo.get_status_history(order_id)

        if not history:
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É—Å—Ç–∞", show_alert=True)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"

        for h in history[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            text += f"üïê {h['changed_at']}\n"
            text += f"   {h['old_status']} ‚Üí <b>{h['new_status']}</b>\n"

            if h.get("username"):
                text += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{h['username']}\n"

            if h.get("notes"):
                text += f"   üìù {h['notes']}\n"

            text += "\n"

        await callback.message.edit_text(
            text, reply_markup=get_history_keyboard(order_id), parse_mode="HTML"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("history_changes:"))
@handle_errors
async def callback_history_changes(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–π"""
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        full_history = await order_repo.get_full_history(order_id)
        field_history = full_history["field_history"]

        if not field_history:
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞", show_alert=True)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        text = f"üîÑ <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"

        for h in field_history[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            text += f"üïê {h['changed_at']}\n"
            text += f"   –ü–æ–ª–µ: <b>{h['field_name']}</b>\n"
            text += f"   –ë—ã–ª–æ: {h['old_value'] or '(–ø—É—Å—Ç–æ)'}...\n"
            text += f"   –°—Ç–∞–ª–æ: {h['new_value'] or '(–ø—É—Å—Ç–æ)'}...\n"

            if h.get("username"):
                text += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{h['username']}\n"

            text += "\n"

        await callback.message.edit_text(
            text, reply_markup=get_history_keyboard(order_id), parse_mode="HTML"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("history_audit:"))
@handle_errors
async def callback_history_audit(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π"""
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        full_history = await order_repo.get_full_history(order_id)
        audit_logs = full_history["audit_logs"]

        if not audit_logs:
            await callback.answer("–ê—É–¥–∏—Ç –ø—É—Å—Ç", show_alert=True)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        text = f"üìù <b>–ê—É–¥–∏—Ç –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"

        for log in audit_logs[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            text += f"üïê {log['timestamp']}\n"
            text += f"   –î–µ–π—Å—Ç–≤–∏–µ: <b>{log['action']}</b>\n"
            text += f"   {log['details']}\n"

            if log.get("username"):
                text += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{log['username']}\n"

            text += "\n"

        await callback.message.edit_text(
            text, reply_markup=get_history_keyboard(order_id), parse_mode="HTML"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("history_full:"))
@handle_errors
async def callback_history_full(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é"""
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)
        search_service = SearchService(order_repo)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        history = await search_service.get_full_order_history(order_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        text = f"üìã <b>–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
        text += f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤: {len(history['status_history'])}\n"
        text += f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–π: {len(history['field_history'])}\n"
        text += f"üìù –ó–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞: {len(history['audit_logs'])}\n\n"

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        if history["status_history"]:
            text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:</b>\n"
            for h in history["status_history"][:3]:
                text += f"‚Ä¢ {h['changed_at']}: {h['old_status']} ‚Üí {h['new_status']}\n"

        await callback.message.edit_text(
            text, reply_markup=get_history_keyboard(order_id), parse_mode="HTML"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("deleted_orders:"))
@handle_errors
async def callback_deleted_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    page = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –ü–æ–ª—É—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        page_size = 10
        deleted_orders = await order_repo.get_deleted_orders(
            limit=page_size, offset=page * page_size
        )

        if not deleted_orders:
            await callback.answer("–ë–æ–ª—å—à–µ –Ω–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", show_alert=True)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        text = f"üóë <b>–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n\n"

        for order in deleted_orders:
            text += f"üìã <b>#{order.id}</b> - {order.equipment_type}\n"
            text += f"   üë§ {order.client_name}\n"
            text += f"   üìä {order.status}\n"
            if hasattr(order, "deleted_at") and order.deleted_at:
                text += f"   üóë {format_datetime(order.deleted_at)}\n"
            text += f"   /restore_{order.id}\n"
            text += "\n"

        await callback.message.edit_text(
            text, reply_markup=get_deleted_orders_keyboard(page=page), parse_mode="HTML"
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("restore_order:"))
@handle_errors
async def callback_restore_order(callback: CallbackQuery):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É"""
    order_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞
        order = await order_repo.get_by_id(order_id, include_deleted=True)

        if not order:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if not (hasattr(order, "deleted_at") and order.deleted_at):
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            return

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        success = await order_repo.restore(order_id, restored_by=user_id)

        if success:
            await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            text += f"üîß {order.equipment_type}\n"
            text += f"üë§ {order.client_name}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
            text += f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª: {callback.from_user.first_name}"

            await callback.message.edit_text(text, parse_mode="HTML")

        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("view_deleted:"))
@handle_errors
async def callback_view_deleted(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        order = await order_repo.get_by_id(order_id, include_deleted=True)

        if not order:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        text = f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b> (—É–¥–∞–ª–µ–Ω–∞)\n\n"
        text += f"üîß <b>–¢–∏–ø:</b> {order.equipment_type}\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
        text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
        text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"

        if hasattr(order, "deleted_at") and order.deleted_at:
            text += f"\nüóë <b>–£–¥–∞–ª–µ–Ω–∞:</b> {format_datetime(order.deleted_at)}"

        await callback.message.edit_text(
            text, reply_markup=get_restore_keyboard(order_id), parse_mode="HTML"
        )

    finally:
        await db.disconnect()


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
@router.message(Command(commands=["restore"]), RoleFilter(["ADMIN"]))
@handle_errors
async def cmd_restore_order(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split("_")

    if len(parts) < 2:
        await message.answer(
            "üìã <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /restore_<–Ω–æ–º–µ—Ä>\n"
            "–ü—Ä–∏–º–µ—Ä: /restore_123",
            parse_mode="HTML",
        )
        return

    try:
        order_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
        return

    db = Database()
    await db.connect()

    try:
        order_repo = OrderRepositoryExtended(db.connection)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        success = await order_repo.restore(order_id, restored_by=message.from_user.id)

        if success:
            await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", parse_mode="HTML")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{order_id}")

    finally:
        await db.disconnect()
