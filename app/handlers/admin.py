"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config import OrderStatus, UserRole
from app.database.orm_database import ORMDatabase
from app.decorators import handle_errors, require_role
from app.keyboards.inline import (
    get_master_management_keyboard,
    get_masters_list_keyboard,
    get_order_actions_keyboard,
    get_yes_no_keyboard,
)
from app.keyboards.reply import get_cancel_keyboard
from app.states import AddMasterStates, AdminCloseOrderStates, SetWorkChatStates
from app.utils import format_phone, log_action, validate_phone


logger = logging.getLogger(__name__)

router = Router(name="admin")
# –§–∏–ª—å—Ç—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç.–∫. –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –î–û middleware
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä


# –£–î–ê–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "üìä –û—Ç—á–µ—Ç—ã" –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ dispatcher.py
# –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–æ–≤ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤


@router.callback_query(F.data == "generate_daily_report")
@handle_errors
async def callback_generate_daily_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if user_role not in [UserRole.ADMIN]:
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç...")

    try:
        from app.services.reports_notifier import ReportsNotifier

        notifier = ReportsNotifier(callback.bot)
        await notifier.send_daily_report()

        await callback.message.edit_text("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    await callback.answer()


@router.callback_query(F.data == "generate_weekly_report")
@handle_errors
async def callback_generate_weekly_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if user_role not in [UserRole.ADMIN]:
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")

    try:
        from app.services.reports_notifier import ReportsNotifier

        notifier = ReportsNotifier(callback.bot)
        await notifier.send_weekly_report()

        await callback.message.edit_text("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    await callback.answer()


@router.callback_query(F.data == "generate_monthly_report")
@handle_errors
async def callback_generate_monthly_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if user_role not in [UserRole.ADMIN]:
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç...")

    try:
        from app.services.reports_notifier import ReportsNotifier

        notifier = ReportsNotifier(callback.bot)
        await notifier.send_monthly_report()

        await callback.message.edit_text("‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    await callback.answer()


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã" —É–¥–∞–ª–µ–Ω - —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ


@router.callback_query(F.data == "export_active_orders_admin")
@handle_errors
async def callback_export_active_orders_admin(callback: CallbackQuery, user_role: str):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ Excel

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...", show_alert=False)

    try:
        from app.services.realtime_active_orders import realtime_active_orders_service

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        await realtime_active_orders_service.update_table()

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        filepath = await realtime_active_orders_service.get_current_table_path()

        if filepath:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            from aiogram.types import FSInputFile

            file = FSInputFile(filepath)
            await callback.message.answer_document(
                file,
                caption="üìã <b>–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º</b>\n\n"
                "–í —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:\n"
                "‚Ä¢ –°–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç —Å–æ –≤—Å–µ–º–∏ –∑–∞—è–≤–∫–∞–º–∏\n"
                "‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞\n"
                "‚Ä¢ –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è\n"
                "‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä\n"
                "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞\n"
                "‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
                "–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ.",
                parse_mode="HTML",
            )

            logger.info(f"Active orders report sent to {callback.from_user.id}")
            await callback.message.edit_text(
                "‚úÖ –û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!", reply_markup=None
            )
        else:
            await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", show_alert=True)

    except Exception as e:
        logger.error(f"Error generating active orders report: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞", show_alert=True)


@router.callback_query(F.data == "back_to_admin_menu")
@handle_errors
async def callback_back_to_admin_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.delete()
    await callback.answer()


@router.message(F.text == "üë• –ú–∞—Å—Ç–µ—Ä–∞")
async def btn_masters(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞–º–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role != UserRole.ADMIN:
        return

    await state.clear()

    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üë• –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞", callback_data="list_all_masters"))
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="add_master"))

    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "list_all_masters")
async def callback_list_all_masters(callback: CallbackQuery, user_role: str):
    """
    –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    db = ORMDatabase()
    await db.connect()

    try:
        masters = await db.get_all_masters()

        if not masters:
            await callback.message.edit_text(
                "üìù –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            )
            await callback.answer()
            return

        text = "üë• <b>–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞:</b>\n\n"

        for master in masters:
            status = "‚úÖ" if master.is_approved else "‚è≥"
            active = "üü¢" if master.is_active else "üî¥"
            display_name = master.get_display_name()

            text += (
                f"{status} {active} <b>{display_name}</b>\n"
                f"   üìû {master.phone}\n"
                f"   üîß {master.specialization}\n\n"
            )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = get_masters_list_keyboard(masters, action="manage_master")

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "add_master")
async def callback_add_master(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await state.set_state(AddMasterStates.enter_telegram_id)

    await callback.message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞:\n"
        "<i>(–ø–æ–ø—Ä–æ—Å–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É –∏ —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º –µ–≥–æ ID)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )

    await callback.message.delete()
    await callback.answer()


@router.message(AddMasterStates.enter_telegram_id, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_master_telegram_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    try:
        telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:", reply_markup=get_cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    db = ORMDatabase()
    await db.connect()

    try:
        user = await db.get_user_by_telegram_id(telegram_id)
        if not user:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É.",
                reply_markup=get_cancel_keyboard(),
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –º–∞—Å—Ç–µ—Ä–æ–º
        master = await db.get_master_by_telegram_id(telegram_id)
        if master:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.",
                reply_markup=get_cancel_keyboard(),
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.update_data(telegram_id=telegram_id, user_name=user.get_full_name())
        await state.set_state(AddMasterStates.enter_phone)

        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.get_full_name()}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞:\n"
            "<i>(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX)</i>",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard(),
        )

    finally:
        await db.disconnect()


@router.message(AddMasterStates.enter_phone, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_master_phone(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    phone = message.text.strip()

    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n" "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX",
            reply_markup=get_cancel_keyboard(),
        )
        return

    phone = format_phone(phone)

    await state.update_data(phone=phone)
    await state.set_state(AddMasterStates.enter_specialization)

    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–∞—Å—Ç–µ—Ä–∞:\n"
        "<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã, –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ç.–¥.)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(AddMasterStates.enter_specialization, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_master_specialization(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    specialization = message.text.strip()

    if len(specialization) < 3:
        await message.answer(
            "‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(specialization=specialization)
    await state.set_state(AddMasterStates.confirm)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add_master"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
    )

    await message.answer(
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:</b>\n\n"
        f"üë§ –ò–º—è: {data['user_name']}\n"
        f"üÜî Telegram ID: <code>{data['telegram_id']}</code>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {data['specialization']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "confirm_add_master")
async def callback_confirm_add_master(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    data = await state.get_data()

    db = ORMDatabase()
    await db.connect()

    try:
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.create_master(
            telegram_id=data["telegram_id"],
            phone=data["phone"],
            specialization=data["specialization"],
            is_approved=True,  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ä–∞–∑—É —Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –º–∞—Å—Ç–µ—Ä–∞ (–Ω–µ —É–¥–∞–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏)
        await db.add_user_role(data["telegram_id"], UserRole.MASTER)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ADD_MASTER",
            details=f"Added master {data['telegram_id']}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        from app.utils import safe_send_message

        result = await safe_send_message(
            callback.bot,
            data["telegram_id"],
            "‚úÖ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            parse_mode="HTML",
        )
        if not result:
            logger.error(
                f"Failed to send notification to master {data['telegram_id']} after retries"
            )

        await callback.message.edit_text(
            f"‚úÖ <b>–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ {data['user_name']}\n"
            f"üÜî ID: {data['telegram_id']}\n"
            f"üìû {data['phone']}\n"
            f"üîß {data['specialization']}",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "ADD_MASTER", f"Master ID: {data['telegram_id']}")

    finally:
        await db.disconnect()

    await state.clear()
    await callback.answer("–ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from app.handlers.common import get_menu_with_counter

    menu_keyboard = await get_menu_with_counter([UserRole.ADMIN])
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard)


@router.callback_query(F.data.startswith("manage_master:"))
async def callback_manage_master(callback: CallbackQuery, user_role: str):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(telegram_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        display_name = master.get_display_name()
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if master.is_approved else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è"
        active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if master.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=False)
        total_orders = len(orders)
        completed_orders = len([o for o in orders if o.status == OrderStatus.CLOSED])

        text = (
            f"üë§ <b>{display_name}</b>\n\n"
            f"üÜî Telegram ID: <code>{telegram_id}</code>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {master.phone}\n"
            f"üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {master.specialization}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üîÑ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {active}\n\n"
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_orders}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_orders}\n"
        )

        keyboard = get_master_management_keyboard(telegram_id, master.is_active)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("deactivate_master:"))
async def callback_deactivate_master(callback: CallbackQuery, user_role: str):
    """
    –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        master = await db.get_master_by_telegram_id(telegram_id)
        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        from app.services.master_archive_service import MasterArchiveService

        archive_service = MasterArchiveService()
        archive_path = await archive_service.archive_master_orders(master.id, "deactivation")

        if archive_path:
            await callback.message.answer(
                f"üìÅ <b>–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω</b>\n\n"
                f"–ó–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ {master.get_display_name()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤–µ:\n"
                f"<code>{archive_path}</code>",
                parse_mode="HTML",
            )

        await db.update_master_status(telegram_id, is_active=False)

        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="DEACTIVATE_MASTER",
            details=f"Deactivated master {telegram_id} and archived orders",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_manage_master(callback, user_role)

        log_action(callback.from_user.id, "DEACTIVATE_MASTER", f"Master ID: {telegram_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞—è–≤–∫–∏ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")


@router.callback_query(F.data.startswith("activate_master:"))
async def callback_activate_master(callback: CallbackQuery, user_role: str):
    """
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        await db.update_master_status(telegram_id, is_active=True)

        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ACTIVATE_MASTER",
            details=f"Activated master {telegram_id}",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_manage_master(callback, user_role)

        log_action(callback.from_user.id, "ACTIVATE_MASTER", f"Master ID: {telegram_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


@router.callback_query(F.data.startswith("fire_master:"))
async def callback_fire_master(callback: CallbackQuery, user_role: str):
    """
    –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã)

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(telegram_id)
        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=True)
        if orders:
            await callback.answer(
                f"‚ùå –ù–µ–ª—å–∑—è —É–≤–æ–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ ({len(orders)} —à—Ç.)",
                show_alert=True,
            )
            return

        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ –ø–µ—Ä–µ–¥ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º
        from app.services.master_archive_service import MasterArchiveService

        archive_service = MasterArchiveService()
        archive_path = await archive_service.archive_master_orders(master.id, "firing")

        if archive_path:
            await callback.message.answer(
                f"üìÅ <b>–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω</b>\n\n"
                f"–ó–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ {master.get_display_name()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤–µ:\n"
                f"<code>{archive_path}</code>",
                parse_mode="HTML",
            )

        # –£–¥–∞–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        await db.delete_master(telegram_id)

        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="FIRE_MASTER",
            details=f"Fired master {telegram_id} ({master.get_display_name()}) and archived orders",
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤
        await callback_list_all_masters(callback, user_role)

        log_action(callback.from_user.id, "FIRE_MASTER", f"Master ID: {telegram_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä —É–≤–æ–ª–µ–Ω –∏ –∑–∞—è–≤–∫–∏ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")


@router.callback_query(F.data.startswith("master_stats:"))
async def callback_master_stats(callback: CallbackQuery, user_role: str):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(telegram_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        orders = await db.get_orders_by_master(master.id, exclude_closed=False)

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total = len(orders)
        by_status = {}

        for order in orders:
            by_status[order.status] = by_status.get(order.status, 0) + 1

        display_name = master.get_display_name()

        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞</b>\n"
            f"üë§ {display_name}\n\n"
            f"<b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {total}\n\n"
            f"<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        )

        for status, count in by_status.items():
            emoji = OrderStatus.get_status_emoji(status)
            name = OrderStatus.get_status_name(status)
            text += f"{emoji} {name}: {count}\n"

        await callback.answer(text, show_alert=True)

    finally:
        await db.disconnect()


@router.message(F.text.regexp(r"^/closed_order(\d+)$"))
@handle_errors
async def cmd_closed_order_edit(message: Message, user_role: str):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–∏
    –§–æ—Ä–º–∞—Ç: /closed_order123
    """
    if user_role not in [UserRole.ADMIN]:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    import re

    match = re.match(r"^/closed_order(\d+)$", message.text)
    if not match:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /closed_order123")
        return

    order_id = int(match.group(1))

    db = ORMDatabase()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        order = await db.get_order_by_id(order_id)
        if not order:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
        if order.status != OrderStatus.CLOSED:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ (—Å—Ç–∞—Ç—É—Å: {order.status}).")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞—è–≤–∫–∏
        await show_closed_order_financial_info(message, order, user_role)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–∏ #{order_id}: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    finally:
        await db.disconnect()


@router.message(F.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def btn_users(message: Message, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    db = ORMDatabase()
    await db.connect()

    try:
        users = await db.get_all_users()

        text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
        by_role = {}
        for user in users:
            if user.role not in by_role:
                by_role[user.role] = []
            by_role[user.role].append(user)

        role_names = {
            UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            UserRole.DISPATCHER: "–î–∏—Å–ø–µ—Ç—á–µ—Ä",
            UserRole.MASTER: "–ú–∞—Å—Ç–µ—Ä",
            UserRole.UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        }

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
        role_headers = {
            UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
            UserRole.DISPATCHER: "–î–∏—Å–ø–µ—Ç—á–µ—Ä—ã",
            UserRole.MASTER: "–ú–∞—Å—Ç–µ—Ä–∞",
            UserRole.UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ",
        }

        for role, role_users in by_role.items():
            text += f"<b>{role_headers.get(role, role)}:</b>\n"
            for user in role_users:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
                display_name = user.first_name or ""
                if user.last_name:
                    display_name += f" {user.last_name}"
                if not display_name.strip():
                    display_name = user.username or f"User{user.telegram_id}"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_roles = user.get_roles()
                roles_str = ", ".join([role_names.get(r, r) for r in user_roles])
                text += f"  ‚Ä¢ {display_name} (ID: {user.telegram_id}) - {roles_str}\n"
            text += "\n"

        await message.answer(text, parse_mode="HTML")

    finally:
        await db.disconnect()


@router.callback_query(F.data == "back_to_masters")
async def callback_back_to_masters(callback: CallbackQuery, user_role: str):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–æ–≤
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üë• –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞", callback_data="list_all_masters"))
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="add_master"))

    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )

    await callback.answer()


# ==================== –£–°–¢–ê–ù–û–í–ö–ê –†–ê–ë–û–ß–ï–ô –ì–†–£–ü–ü–´ ====================


@router.callback_query(F.data.startswith("set_work_chat:"))
async def callback_set_work_chat(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –º–∞—Å—Ç–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(master_telegram_id=telegram_id)
    await state.set_state(SetWorkChatStates.enter_chat_id)

    # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å KeyboardButtonRequestChat
    from aiogram.types import KeyboardButton, KeyboardButtonRequestChat
    from aiogram.utils.keyboard import ReplyKeyboardBuilder

    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(
            text="üí¨ –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
            request_chat=KeyboardButtonRequestChat(
                request_id=1,
                chat_is_channel=False,  # –í–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–Ω–µ –∫–∞–Ω–∞–ª—ã)
            ),
        )
    )
    builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

    keyboard = builder.as_markup(resize_keyboard=True)

    await callback.message.answer(
        "üí¨ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã</b>\n\n"
        "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É —Å –º–∞—Å—Ç–µ—Ä–æ–º\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É\n\n"
        "<i>–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–Ω–∏–∑—É</i>",
        parse_mode="HTML",
        reply_markup=keyboard,
    )

    await callback.answer()


@router.message(F.chat_shared, SetWorkChatStates.enter_chat_id)
async def handle_work_chat_selection(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    chat_shared = message.chat_shared

    if not chat_shared or chat_shared.request_id != 1:
        from app.handlers.common import get_menu_with_counter

        menu_keyboard = await get_menu_with_counter([user_role])
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", reply_markup=menu_keyboard)
        await state.clear()
        return

    chat_id = chat_shared.chat_id
    data = await state.get_data()
    master_telegram_id = data.get("master_telegram_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ API
    try:
        chat_info = await message.bot.get_chat(chat_id)
        chat_title = chat_info.title or f"ID: {chat_id}"
        chat_type = chat_info.type

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É–ø–ø–∞
        if chat_type not in ["group", "supergroup"]:
            from app.handlers.common import get_menu_with_counter

            menu_keyboard = await get_menu_with_counter([user_role])
            await message.answer(
                "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π.",
                reply_markup=menu_keyboard,
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º work_chat_id –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        db = ORMDatabase()
        await db.connect()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
            master = await db.get_master_by_telegram_id(master_telegram_id)

            if not master:
                from app.handlers.common import get_menu_with_counter

                menu_keyboard = await get_menu_with_counter([user_role])
                await message.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=menu_keyboard)
                await state.clear()
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º work_chat_id
            await db.update_master_work_chat(master_telegram_id, chat_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            updated_master = await db.get_master_by_telegram_id(master_telegram_id)
            logger.info(
                f"Work chat update verification: master {master_telegram_id} -> work_chat_id: {updated_master.work_chat_id if updated_master else 'NOT FOUND'}"
            )

            from app.handlers.common import get_menu_with_counter

            menu_keyboard = await get_menu_with_counter([user_role])
            await message.answer(
                f"‚úÖ <b>–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üë§ –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
                f"üí¨ –ì—Ä—É–ø–ø–∞: {chat_title}\n"
                f"üÜî Chat ID: <code>{chat_id}</code>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.",
                parse_mode="HTML",
                reply_markup=menu_keyboard,
            )

            logger.info(f"Work chat {chat_id} set for master {master_telegram_id}")

        finally:
            await db.disconnect()

    except Exception as e:
        logger.error(f"Error getting chat info: {e}")
        from app.handlers.common import get_menu_with_counter

        menu_keyboard = await get_menu_with_counter([user_role])
        await message.answer(
            f"‚úÖ <b>–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üÜî Chat ID: <code>{chat_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.",
            parse_mode="HTML",
            reply_markup=menu_keyboard,
        )

    await state.clear()


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", SetWorkChatStates.enter_chat_id)
async def handle_cancel_work_chat(message: Message, state: FSMContext, user_role: str):
    """
    –û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    from app.handlers.common import get_menu_with_counter

    menu_keyboard = await get_menu_with_counter([user_role])
    await message.answer(
        "‚ùå <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=menu_keyboard,
    )

    await state.clear()


# ==================== –ê–î–ú–ò–ù –î–ï–ô–°–¢–í–£–ï–¢ –û–¢ –ò–ú–ï–ù–ò –ú–ê–°–¢–ï–†–ê ====================


@router.callback_query(F.data.startswith("admin_accept_order:"))
async def callback_admin_accept_order(callback: CallbackQuery, user_role: str, user_roles: list):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–∞—è)
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if not order.assigned_master_id:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É", show_alert=True)
            return

        master = await db.get_master_by_id(order.assigned_master_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º skip_validation=True —Ç–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞
        await db.update_order_status(
            order_id=order_id,
            status=OrderStatus.ACCEPTED,
            changed_by=callback.from_user.id,
            skip_validation=True,  # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ADMIN_ACCEPT_ORDER_FOR_MASTER",
            details=f"Admin accepted order #{order_id} on behalf of master {master.telegram_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if order.dispatcher_id:
            from app.utils import safe_send_message

            result = await safe_send_message(
                callback.bot,
                order.dispatcher_id,
                f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order_id}",
                parse_mode="HTML",
            )
            if not result:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id} after retries")

        # –õ–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä—É –Ω–µ—Ç ‚Äî –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø–∞—Ö

        await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        from app.keyboards.inline import get_order_actions_keyboard

        status_emoji = OrderStatus.get_status_emoji(OrderStatus.ACCEPTED)
        status_name = OrderStatus.get_status_name(OrderStatus.ACCEPTED)

        text = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}\n"
            f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
        )

        if order.notes:
            text += f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.scheduled_time:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n\n"

        text += "<i>‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞</i>"

        keyboard = get_order_actions_keyboard(order, UserRole.ADMIN)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

        log_action(
            callback.from_user.id,
            "ADMIN_ACCEPT_ORDER_FOR_MASTER",
            f"Order #{order_id} for master {master.telegram_id}",
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("admin_onsite_order:"))
async def callback_admin_onsite_order(callback: CallbackQuery, user_role: str, user_roles: list):
    """
    –û—Ç–º–µ—Ç–∫–∞ '–ù–∞ –æ–±—ä–µ–∫—Ç–µ' –∞–¥–º–∏–Ω–æ–º –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–∞—è)
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if not order.assigned_master_id:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É", show_alert=True)
            return

        master = await db.get_master_by_id(order.assigned_master_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º skip_validation=True —Ç–∞–∫ –∫–∞–∫ –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞
        await db.update_order_status(
            order_id=order_id,
            status=OrderStatus.ONSITE,
            changed_by=callback.from_user.id,
            skip_validation=True,  # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ADMIN_ONSITE_ORDER_FOR_MASTER",
            details=f"Admin marked order #{order_id} as onsite on behalf of master {master.telegram_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if order.dispatcher_id:
            from app.utils import safe_send_message

            result = await safe_send_message(
                callback.bot,
                order.dispatcher_id,
                f"üè† –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–ó–∞—è–≤–∫–∞ #{order_id})",
                parse_mode="HTML",
            )
            if not result:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id} after retries")

        # –õ–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä—É –Ω–µ—Ç ‚Äî –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø–∞—Ö

        await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        from app.keyboards.inline import get_order_actions_keyboard

        status_emoji = OrderStatus.get_status_emoji(OrderStatus.ONSITE)
        status_name = OrderStatus.get_status_name(OrderStatus.ONSITE)

        text = (
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}\n"
            f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n"
            f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
        )

        if order.notes:
            text += f"üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.scheduled_time:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n\n"

        text += "<i>üè† –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞</i>"

        keyboard = get_order_actions_keyboard(order, UserRole.ADMIN)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

        log_action(
            callback.from_user.id,
            "ADMIN_ONSITE_ORDER_FOR_MASTER",
            f"Order #{order_id} for master {master.telegram_id}",
        )

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("admin_refuse_order_complete:"))
async def callback_admin_refuse_order_complete(
    callback: CallbackQuery, state: FSMContext, user_role: str
):
    """
    –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –æ—Ç–∫–∞–∑ –∞–¥–º–∏–Ω–æ–º –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞ (0 —Ä—É–±–ª–µ–π)

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    order_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_id(order.assigned_master_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_id=order_id, acting_as_master_id=master.telegram_id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –æ—Ç–∫–∞–∑–∞
        from app.states import RefuseOrderStates

        await state.set_state(RefuseOrderStates.confirm_refusal)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ (–æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞)</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üîß –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n\n"
            f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ –æ—Ç–∫–∞–∑?</b>\n\n"
            f"<i>–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–∫–∞–∑ —Å —Å—É–º–º–æ–π 0 —Ä—É–±–ª–µ–π.</i>",
            parse_mode="HTML",
            reply_markup=get_yes_no_keyboard("admin_confirm_refuse", order_id),
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("admin_complete_order:"))
async def callback_admin_complete_order(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    db = ORMDatabase()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if not order.assigned_master_id:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É", show_alert=True)
            return

        master = await db.get_master_by_id(order.assigned_master_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ –º–∞—Å—Ç–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        await state.update_data(order_id=order_id, acting_as_master_id=master.telegram_id)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        from app.states import CompleteOrderStates

        await state.set_state(CompleteOrderStates.enter_total_amount)

        await callback.message.answer(
            f"üí∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{order_id} –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞ {master.get_display_name()}</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 5000, 5000.50 –∏–ª–∏ 0",
            parse_mode="HTML",
        )

        log_action(
            callback.from_user.id,
            "ADMIN_START_COMPLETE_ORDER_FOR_MASTER",
            f"Order #{order_id} for master {master.telegram_id}",
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("admin_dr_order:"))
async def callback_admin_dr_order(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –î–† - –∞–¥–º–∏–Ω –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    order_id = int(callback.data.split(":")[1])

    logger.debug(f"[DR] Admin starting DR process for order #{order_id}")

    db = ORMDatabase()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if not order.assigned_master_id:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É –∑–∞—è–≤–∫—É", show_alert=True)
            return

        master = await db.get_master_by_id(order.assigned_master_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        logger.debug(f"[DR] Order found, Master ID: {master.telegram_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –∏ –º–∞—Å—Ç–µ—Ä–∞ –≤ state
        await state.update_data(order_id=order_id, acting_as_master_id=master.telegram_id)

        logger.debug("[DR] Transitioning to LongRepairStates.enter_completion_date_and_prepayment")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
        from app.states import LongRepairStates

        await state.set_state(LongRepairStates.enter_completion_date_and_prepayment)

        await callback.message.answer(
            f"‚è≥ <b>–î–† - –ó–∞—è–≤–∫–∞ #{order_id}</b>\n"
            f"<b>–û—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞:</b> {master.get_display_name()}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞</b> –∏ <b>–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É</b> (–µ—Å–ª–∏ –±—ã–ª–∞).\n\n"
            f"<i>–ï—Å–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ –±—ã–ª–æ - –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫.</i>",
            parse_mode="HTML",
        )

        await callback.answer()

    finally:
        await db.disconnect()


@router.callback_query(lambda c: c.data.startswith("admin_confirm_refuse"))
async def process_admin_refuse_confirmation_callback(
    callback_query: CallbackQuery, state: FSMContext, user_role: str
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º

    Args:
        callback_query: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback_query.data.split(":")
    action = parts[1]  # "yes" –∏–ª–∏ "no"
    order_id = int(parts[2])

    if action == "yes":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–∫–∞–∑
        data = await state.get_data()
        order_id = data.get("order_id", order_id)
        acting_as_master_id = data.get("acting_as_master_id")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–∫–∞–∑ –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞
        from app.handlers.master import complete_order_as_refusal

        await complete_order_as_refusal(
            callback_query.message, state, order_id, acting_as_master_id
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        await callback_query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    else:
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–∫–∞–∑ - –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        db = ORMDatabase()
        await db.connect()
        try:
            order = await db.get_order_by_id(order_id)
            if order:
                await callback_query.message.edit_text(
                    "‚ùå –û—Ç–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ó–∞—è–≤–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π.",
                    reply_markup=get_order_actions_keyboard(order, UserRole.ADMIN),
                )
            else:
                await callback_query.message.edit_text("‚ùå –û—Ç–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        finally:
            await db.disconnect()
        await state.clear()
        await callback_query.answer("–û—Ç–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")


async def show_closed_order_financial_info(message: Message, order, user_role: str):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        order: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    text = (
        f"üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
        f"üì± <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
        f"üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {order.total_amount or 0:.2f} ‚ÇΩ\n"
        f"üîß <b>–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> {order.materials_cost or 0:.2f} ‚ÇΩ\n"
        f"üë®‚Äçüîß <b>–î–æ—Ö–æ–¥ –º–∞—Å—Ç–µ—Ä–∞:</b> {order.master_profit or 0:.2f} ‚ÇΩ\n"
        f"üè¢ <b>–î–æ—Ö–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏:</b> {order.company_profit or 0:.2f} ‚ÇΩ\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if order.prepayment_amount and order.prepayment_amount > 0:
        text += f"üí≥ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> {order.prepayment_amount:.2f} ‚ÇΩ\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton(
                text="üíµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É", callback_data=f"edit_total_amount:{order.id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã", callback_data=f"edit_materials_cost:{order.id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë®‚Äçüîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥ –º–∞—Å—Ç–µ—Ä–∞",
                callback_data=f"edit_master_profit:{order.id}",
            )
        ],
        [
            InlineKeyboardButton(
                text="üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏",
                callback_data=f"edit_company_profit:{order.id}",
            )
        ],
        [
            InlineKeyboardButton(
                text="üí≥ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É", callback_data=f"edit_prepayment:{order.id}"
            )
        ],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_financial_info")],
    ]

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.reply(text, parse_mode="HTML", reply_markup=reply_markup)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –§–ò–ù–ê–ù–°–û–í–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ====================


@router.callback_query(F.data.startswith("edit_total_amount:"))
@require_role([UserRole.ADMIN])
@handle_errors
async def callback_edit_total_amount(callback: CallbackQuery, state: FSMContext, user_role: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞—è–≤–∫–∏"""
    order_id = int(callback.data.split(":")[1])

    await state.update_data(order_id=order_id, field="total_amount")
    from app.states import AdminCloseOrderStates

    await state.set_state(AdminCloseOrderStates.enter_value)
    await callback.message.edit_text(
        f"üíµ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 1500.50</i>",
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_materials_cost:"))
@require_role([UserRole.ADMIN])
@handle_errors
async def callback_edit_materials_cost(callback: CallbackQuery, state: FSMContext, user_role: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
    order_id = int(callback.data.split(":")[1])

    await state.update_data(order_id=order_id, field="materials_cost")
    from app.states import AdminCloseOrderStates

    await state.set_state(AdminCloseOrderStates.enter_value)
    await callback.message.edit_text(
        f"üîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 300.00</i>",
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_master_profit:"))
@require_role([UserRole.ADMIN])
@handle_errors
async def callback_edit_master_profit(callback: CallbackQuery, state: FSMContext, user_role: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    order_id = int(callback.data.split(":")[1])

    await state.update_data(order_id=order_id, field="master_profit")
    from app.states import AdminCloseOrderStates

    await state.set_state(AdminCloseOrderStates.enter_value)
    await callback.message.edit_text(
        f"üë®‚Äçüîß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –º–∞—Å—Ç–µ—Ä–∞</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ—Ö–æ–¥ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 800.00</i>",
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_company_profit:"))
@require_role([UserRole.ADMIN])
@handle_errors
async def callback_edit_company_profit(callback: CallbackQuery, state: FSMContext, user_role: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    order_id = int(callback.data.split(":")[1])

    await state.update_data(order_id=order_id, field="company_profit")
    from app.states import AdminCloseOrderStates

    await state.set_state(AdminCloseOrderStates.enter_value)
    await callback.message.edit_text(
        f"üè¢ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ—Ö–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 400.00</i>",
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_prepayment:"))
@require_role([UserRole.ADMIN])
@handle_errors
async def callback_edit_prepayment(callback: CallbackQuery, state: FSMContext, user_role: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã"""
    order_id = int(callback.data.split(":")[1])

    await state.update_data(order_id=order_id, field="prepayment_amount")
    from app.states import AdminCloseOrderStates

    await state.set_state(AdminCloseOrderStates.enter_value)
    await callback.message.edit_text(
        f"üí≥ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id}:\n\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 500.00 –∏–ª–∏ 0 –µ—Å–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ –±—ã–ª–æ</i>",
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "close_financial_info")
@handle_errors
async def callback_close_financial_info(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await callback.message.delete()
    await callback.answer("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–¢–û–õ–¨–ö–û –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@router.message(AdminCloseOrderStates.enter_value)
@require_role([UserRole.ADMIN])
@handle_errors
async def process_financial_value(message: Message, state: FSMContext, user_role: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–∏)"""
    current_state = await state.get_state()
    data = await state.get_data()
    order_id = data.get("order_id")
    field = data.get("field")

    logger.info(f"[ADMIN_EDIT] state={current_state}, field={field}, raw='{message.text}'")

    if not order_id or not field:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∑–∞–ø—è—Ç—É—é/—Ç–æ—á–∫—É
    text = (message.text or "").strip().replace(",", ".")
    try:
        value = float(text)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50)")
        return

    db = ORMDatabase()
    await db.connect()
    try:
        update_data = {field: value}
        success = await db.update_order(order_id, update_data)
        if success:
            order = await db.get_order_by_id(order_id)
            if order:
                await show_closed_order_financial_info(message, order, user_role)
                await message.reply(f"‚úÖ {field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {value:.2f} ‚ÇΩ")
            else:
                await message.reply("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫—É")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è")
    finally:
        await db.disconnect()

    await state.clear()


@router.message(Command("delete_order"))
@handle_errors
async def cmd_delete_order(message: Message, user_role: str):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    command_parts = message.text.split()
    if len(command_parts) != 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_order <ID_–∑–∞—è–≤–∫–∏>\n"
            "–ü—Ä–∏–º–µ—Ä: /delete_order 97"
        )
        return
    
    try:
        order_id = int(command_parts[1])
    except ValueError:
        await message.reply("‚ùå ID –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    db = ORMDatabase()
    await db.connect()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        order = await db.get_order_by_id(order_id)
        
        if not order:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–µ —É–¥–∞–ª–µ–Ω–∞
        if order.deleted_at:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        await message.reply(
            f"üìã <b>–ó–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üì± –¢–µ—Ö–Ω–∏–∫–∞: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order.status}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?",
            parse_mode="HTML",
            reply_markup=get_yes_no_keyboard(f"confirm_delete_order:{order_id}")
        )
        
    except Exception as e:
        logger.error(f"Error in delete_order command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ")
        
    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("confirm_delete_order:"))
@handle_errors
async def callback_confirm_delete_order(callback: CallbackQuery, user_role: str):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    
    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_role not in [UserRole.ADMIN, UserRole.DISPATCHER]:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–µ
    parts = callback.data.split(":")
    order_id = int(parts[1])
    action = parts[2] if len(parts) > 2 else "no"
    
    if action == "no":
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.answer()
        return
    
    db = ORMDatabase()
    await db.connect()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        order = await db.get_order_by_id(order_id)
        
        if not order:
            await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        success = await db.soft_delete_order(order_id)
        
        if success:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞—É–¥–∏—Ç
            await db.add_audit_log(
                user_id=callback.from_user.id,
                action="DELETE_ORDER_COMMAND",
                details=f"Order #{order_id} deleted via /delete_order command"
            )
            
            await callback.message.edit_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
                f"üì± –¢–µ—Ö–Ω–∏–∫–∞: {order.equipment_type}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {order.status}"
            )
            
            logger.info(f"Order #{order_id} deleted by user {callback.from_user.id} via /delete_order command")
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{order_id}")
            
    except Exception as e:
        logger.error(f"Error deleting order {order_id}: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{order_id}")
        
    finally:
        await db.disconnect()
    
    await callback.answer()
