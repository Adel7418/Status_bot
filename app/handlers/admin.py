"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config import OrderStatus, UserRole
from app.database import Database
from app.keyboards.inline import (
    get_master_approval_keyboard,
    get_master_management_keyboard,
    get_masters_list_keyboard,
)
from app.keyboards.reply import get_cancel_keyboard
from app.states import AddMasterStates, SetWorkChatStates
from app.decorators import handle_errors
from app.utils import format_phone, log_action, validate_phone


logger = logging.getLogger(__name__)

router = Router(name="admin")
# –§–∏–ª—å—Ç—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç, —Ç.–∫. –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –î–û middleware
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ç–µ–ø–µ—Ä—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä


@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
@handle_errors
async def btn_reports(message: Message, state: FSMContext, user_role: str):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role not in [UserRole.ADMIN]:
        return

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç",
            callback_data="generate_daily_report"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", 
            callback_data="generate_weekly_report"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üóìÔ∏è –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç",
            callback_data="generate_monthly_report"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìã –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç",
            callback_data="generate_custom_report"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_admin_menu"
        )
    )

    await message.answer(
        "üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "generate_daily_report")
@handle_errors
async def callback_generate_daily_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if user_role not in [UserRole.ADMIN]:
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    try:
        from app.services.reports_notifier import ReportsNotifier
        
        notifier = ReportsNotifier(callback.bot)
        await notifier.send_daily_report()
        
        await callback.message.edit_text("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    await callback.answer()


@router.callback_query(F.data == "generate_weekly_report")
@handle_errors
async def callback_generate_weekly_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if user_role not in [UserRole.ADMIN]:
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    try:
        from app.services.reports_notifier import ReportsNotifier
        
        notifier = ReportsNotifier(callback.bot)
        await notifier.send_weekly_report()
        
        await callback.message.edit_text("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    await callback.answer()


@router.callback_query(F.data == "generate_monthly_report")
@handle_errors
async def callback_generate_monthly_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if user_role not in [UserRole.ADMIN]:
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    try:
        from app.services.reports_notifier import ReportsNotifier
        
        notifier = ReportsNotifier(callback.bot)
        await notifier.send_monthly_report()
        
        await callback.message.edit_text("‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    await callback.answer()


@router.callback_query(F.data == "generate_custom_report")
@handle_errors
async def callback_generate_custom_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if user_role not in [UserRole.ADMIN]:
        return

    await callback.message.edit_text(
        "üìã <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>YYYY-MM-DD YYYY-MM-DD</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>2025-10-01 2025-10-15</code>\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é.",
        parse_mode="HTML"
    )
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç
    await callback.answer()


@router.message(F.text == "üë• –ú–∞—Å—Ç–µ—Ä–∞")
async def btn_masters(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞–º–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_role != UserRole.ADMIN:
        return

    await state.clear()

    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üë• –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞", callback_data="list_all_masters"))
    builder.row(
        InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è", callback_data="list_pending_masters")
    )
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="add_master"))

    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "list_all_masters")
async def callback_list_all_masters(callback: CallbackQuery, user_role: str):
    """
    –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    db = Database()
    await db.connect()

    try:
        masters = await db.get_all_masters()

        if not masters:
            await callback.message.edit_text(
                "üìù –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            )
            await callback.answer()
            return

        text = "üë• <b>–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞:</b>\n\n"

        for master in masters:
            status = "‚úÖ" if master.is_approved else "‚è≥"
            active = "üü¢" if master.is_active else "üî¥"
            display_name = master.get_display_name()

            text += (
                f"{status} {active} <b>{display_name}</b>\n"
                f"   üìû {master.phone}\n"
                f"   üîß {master.specialization}\n\n"
            )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = get_masters_list_keyboard(masters, action="manage_master")

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data == "list_pending_masters")
async def callback_list_pending_masters(callback: CallbackQuery, user_role: str):
    """
    –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    db = Database()
    await db.connect()

    try:
        masters = await db.get_pending_masters()

        if not masters:
            await callback.message.edit_text("‚úÖ –ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
            await callback.answer()
            return

        text = "‚è≥ <b>–ú–∞—Å—Ç–µ—Ä–∞, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è:</b>\n\n"

        for master in masters:
            display_name = master.get_display_name()

            text += (
                f"üë§ <b>{display_name}</b>\n"
                f"üÜî Telegram ID: <code>{master.telegram_id}</code>\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {master.phone}\n"
                f"üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {master.specialization}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
            keyboard = get_master_approval_keyboard(master.telegram_id)

            await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
            text = ""  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞

        if text:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await callback.message.answer(text, parse_mode="HTML")

        await callback.message.edit_text(
            "‚è≥ –ú–∞—Å—Ç–µ—Ä–∞, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("approve_master:"))
async def callback_approve_master(callback: CallbackQuery, user_role: str):
    """
    –û–¥–æ–±—Ä–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        # –û–¥–æ–±—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.approve_master(telegram_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="APPROVE_MASTER",
            details=f"Approved master {telegram_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
        try:
            await callback.bot.send_message(
                telegram_id,
                "‚úÖ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–∞—Å—Ç–µ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                parse_mode="HTML",
            )
        except Exception as e:
            logger.error(f"Failed to send approval notification to {telegram_id}: {e}")

        await callback.message.edit_text(f"‚úÖ –ú–∞—Å—Ç–µ—Ä (ID: {telegram_id}) —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!")

        log_action(callback.from_user.id, "APPROVE_MASTER", f"Master ID: {telegram_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –æ–¥–æ–±—Ä–µ–Ω!")


@router.callback_query(F.data.startswith("reject_master:"))
async def callback_reject_master(callback: CallbackQuery, user_role: str):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.reject_master(telegram_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REJECT_MASTER",
            details=f"Rejected master {telegram_id}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
        try:
            await callback.bot.send_message(
                telegram_id,
                "‚ùå <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
            )
        except Exception as e:
            logger.error(f"Failed to send rejection notification to {telegram_id}: {e}")

        await callback.message.edit_text(f"‚ùå –ú–∞—Å—Ç–µ—Ä (ID: {telegram_id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

        log_action(callback.from_user.id, "REJECT_MASTER", f"Master ID: {telegram_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω")


@router.callback_query(F.data == "add_master")
async def callback_add_master(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await state.set_state(AddMasterStates.enter_telegram_id)

    await callback.message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–∞—Å—Ç–µ—Ä–∞:\n"
        "<i>(–ø–æ–ø—Ä–æ—Å–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É –∏ —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º –µ–≥–æ ID)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )

    await callback.message.delete()
    await callback.answer()


@router.message(AddMasterStates.enter_telegram_id, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_master_telegram_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    try:
        telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:", reply_markup=get_cancel_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    db = Database()
    await db.connect()

    try:
        user = await db.get_user_by_telegram_id(telegram_id)
        if not user:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É.",
                reply_markup=get_cancel_keyboard(),
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –º–∞—Å—Ç–µ—Ä–æ–º
        master = await db.get_master_by_telegram_id(telegram_id)
        if master:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.",
                reply_markup=get_cancel_keyboard(),
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.update_data(telegram_id=telegram_id, user_name=user.get_full_name())
        await state.set_state(AddMasterStates.enter_phone)

        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.get_full_name()}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞:\n"
            "<i>(–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX)</i>",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard(),
        )

    finally:
        await db.disconnect()


@router.message(AddMasterStates.enter_phone, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_master_phone(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    phone = message.text.strip()

    if not validate_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n" "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX",
            reply_markup=get_cancel_keyboard(),
        )
        return

    phone = format_phone(phone)

    await state.update_data(phone=phone)
    await state.set_state(AddMasterStates.enter_specialization)

    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–∞—Å—Ç–µ—Ä–∞:\n"
        "<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: –°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã, –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ç.–¥.)</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(AddMasterStates.enter_specialization, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_master_specialization(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    specialization = message.text.strip()

    if len(specialization) < 3:
        await message.answer(
            "‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(specialization=specialization)
    await state.set_state(AddMasterStates.confirm)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add_master"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
    )

    await message.answer(
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:</b>\n\n"
        f"üë§ –ò–º—è: {data['user_name']}\n"
        f"üÜî Telegram ID: <code>{data['telegram_id']}</code>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {data['specialization']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data == "confirm_add_master")
async def callback_confirm_add_master(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    data = await state.get_data()

    db = Database()
    await db.connect()

    try:
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.create_master(
            telegram_id=data["telegram_id"],
            phone=data["phone"],
            specialization=data["specialization"],
            is_approved=True,  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ä–∞–∑—É —Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –º–∞—Å—Ç–µ—Ä–∞ (–Ω–µ —É–¥–∞–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏)
        await db.add_user_role(data["telegram_id"], UserRole.MASTER)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ADD_MASTER",
            details=f"Added master {data['telegram_id']}",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
        try:
            await callback.bot.send_message(
                data["telegram_id"],
                "‚úÖ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                parse_mode="HTML",
            )
        except Exception as e:
            logger.error(f"Failed to send notification to master {data['telegram_id']}: {e}")

        await callback.message.edit_text(
            f"‚úÖ <b>–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ {data['user_name']}\n"
            f"üÜî ID: {data['telegram_id']}\n"
            f"üìû {data['phone']}\n"
            f"üîß {data['specialization']}",
            parse_mode="HTML",
        )

        log_action(callback.from_user.id, "ADD_MASTER", f"Master ID: {data['telegram_id']}")

    finally:
        await db.disconnect()

    await state.clear()
    await callback.answer("–ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from app.handlers.common import get_menu_with_counter
    menu_keyboard = await get_menu_with_counter([UserRole.ADMIN])
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard
    )


@router.callback_query(F.data.startswith("manage_master:"))
async def callback_manage_master(callback: CallbackQuery, user_role: str):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(telegram_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        display_name = master.get_display_name()
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if master.is_approved else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è"
        active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if master.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä–∞
        orders = await db.get_orders_by_master(master.id, exclude_closed=False)
        total_orders = len(orders)
        completed_orders = len([o for o in orders if o.status == OrderStatus.CLOSED])

        text = (
            f"üë§ <b>{display_name}</b>\n\n"
            f"üÜî Telegram ID: <code>{telegram_id}</code>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {master.phone}\n"
            f"üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {master.specialization}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üîÑ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {active}\n\n"
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_orders}\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_orders}\n"
        )

        keyboard = get_master_management_keyboard(telegram_id, master.is_active)

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("deactivate_master:"))
async def callback_deactivate_master(callback: CallbackQuery, user_role: str):
    """
    –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        await db.update_master_status(telegram_id, is_active=False)

        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="DEACTIVATE_MASTER",
            details=f"Deactivated master {telegram_id}",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_manage_master(callback, user_role)

        log_action(callback.from_user.id, "DEACTIVATE_MASTER", f"Master ID: {telegram_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


@router.callback_query(F.data.startswith("activate_master:"))
async def callback_activate_master(callback: CallbackQuery, user_role: str):
    """
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        await db.update_master_status(telegram_id, is_active=True)

        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ACTIVATE_MASTER",
            details=f"Activated master {telegram_id}",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_manage_master(callback, user_role)

        log_action(callback.from_user.id, "ACTIVATE_MASTER", f"Master ID: {telegram_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ú–∞—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


@router.callback_query(F.data.startswith("master_stats:"))
async def callback_master_stats(callback: CallbackQuery, user_role: str):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        master = await db.get_master_by_telegram_id(telegram_id)

        if not master:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        orders = await db.get_orders_by_master(master.id, exclude_closed=False)

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total = len(orders)
        by_status = {}

        for order in orders:
            by_status[order.status] = by_status.get(order.status, 0) + 1

        display_name = master.get_display_name()

        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–∞</b>\n"
            f"üë§ {display_name}\n\n"
            f"<b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {total}\n\n"
            f"<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        )

        for status, count in by_status.items():
            emoji = OrderStatus.get_status_emoji(status)
            name = OrderStatus.get_status_name(status)
            text += f"{emoji} {name}: {count}\n"

        await callback.answer(text, show_alert=True)

    finally:
        await db.disconnect()


@router.message(F.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def btn_users(message: Message, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    db = Database()
    await db.connect()

    try:
        users = await db.get_all_users()

        text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
        by_role = {}
        for user in users:
            if user.role not in by_role:
                by_role[user.role] = []
            by_role[user.role].append(user)

        role_names = {
            UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            UserRole.DISPATCHER: "–î–∏—Å–ø–µ—Ç—á–µ—Ä",
            UserRole.MASTER: "–ú–∞—Å—Ç–µ—Ä",
            UserRole.UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        }

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
        role_headers = {
            UserRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
            UserRole.DISPATCHER: "–î–∏—Å–ø–µ—Ç—á–µ—Ä—ã",
            UserRole.MASTER: "–ú–∞—Å—Ç–µ—Ä–∞",
            UserRole.UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ",
        }

        for role, role_users in by_role.items():
            text += f"<b>{role_headers.get(role, role)}:</b>\n"
            for user in role_users:
                display_name = user.get_full_name()
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_roles = user.get_roles()
                roles_str = ", ".join([role_names.get(r, r) for r in user_roles])
                text += f"  ‚Ä¢ {display_name} (ID: {user.telegram_id}) - {roles_str}\n"
            text += "\n"

        await message.answer(text, parse_mode="HTML")

    finally:
        await db.disconnect()


@router.callback_query(F.data == "back_to_masters")
async def callback_back_to_masters(callback: CallbackQuery, user_role: str):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–æ–≤
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üë• –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞", callback_data="list_all_masters"))
    builder.row(
        InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è", callback_data="list_pending_masters")
    )
    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data="add_master"))

    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )

    await callback.answer()


# ==================== –£–°–¢–ê–ù–û–í–ö–ê –†–ê–ë–û–ß–ï–ô –ì–†–£–ü–ü–´ ====================


@router.callback_query(F.data.startswith("set_work_chat:"))
async def callback_set_work_chat(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    telegram_id = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –º–∞—Å—Ç–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(master_telegram_id=telegram_id)
    await state.set_state(SetWorkChatStates.enter_chat_id)

    # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å KeyboardButtonRequestChat
    from aiogram.types import KeyboardButton, KeyboardButtonRequestChat
    from aiogram.utils.keyboard import ReplyKeyboardBuilder

    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(
            text="üí¨ –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
            request_chat=KeyboardButtonRequestChat(
                request_id=1, chat_is_channel=False  # –í–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–Ω–µ –∫–∞–Ω–∞–ª—ã)
            ),
        )
    )
    builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

    keyboard = builder.as_markup(resize_keyboard=True)

    await callback.message.answer(
        "üí¨ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã</b>\n\n"
        "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É —Å –º–∞—Å—Ç–µ—Ä–æ–º\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É\n\n"
        "<i>–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–Ω–∏–∑—É</i>",
        parse_mode="HTML",
        reply_markup=keyboard,
    )

    await callback.answer()


@router.message(F.chat_shared, SetWorkChatStates.enter_chat_id)
async def handle_work_chat_selection(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    chat_shared = message.chat_shared

    if not chat_shared or chat_shared.request_id != 1:
        from app.handlers.common import get_menu_with_counter
        menu_keyboard = await get_menu_with_counter([user_role])
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", reply_markup=menu_keyboard)
        await state.clear()
        return

    chat_id = chat_shared.chat_id
    data = await state.get_data()
    master_telegram_id = data.get("master_telegram_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ API
    try:
        chat_info = await message.bot.get_chat(chat_id)
        chat_title = chat_info.title or f"ID: {chat_id}"
        chat_type = chat_info.type

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É–ø–ø–∞
        if chat_type not in ["group", "supergroup"]:
            from app.handlers.common import get_menu_with_counter
            menu_keyboard = await get_menu_with_counter([user_role])
            await message.answer(
                "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π.",
                reply_markup=menu_keyboard,
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º work_chat_id –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        db = Database()
        await db.connect()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
            master = await db.get_master_by_telegram_id(master_telegram_id)

            if not master:
                from app.handlers.common import get_menu_with_counter
                menu_keyboard = await get_menu_with_counter([user_role])
                await message.answer(
                    "‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=menu_keyboard
                )
                await state.clear()
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º work_chat_id
            await db.update_master_work_chat(master_telegram_id, chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            updated_master = await db.get_master_by_telegram_id(master_telegram_id)
            logger.info(f"Work chat update verification: master {master_telegram_id} -> work_chat_id: {updated_master.work_chat_id if updated_master else 'NOT FOUND'}")

            from app.handlers.common import get_menu_with_counter
            menu_keyboard = await get_menu_with_counter([user_role])
            await message.answer(
                f"‚úÖ <b>–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üë§ –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
                f"üí¨ –ì—Ä—É–ø–ø–∞: {chat_title}\n"
                f"üÜî Chat ID: <code>{chat_id}</code>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.",
                parse_mode="HTML",
                reply_markup=menu_keyboard,
            )

            logger.info(f"Work chat {chat_id} set for master {master_telegram_id}")

        finally:
            await db.disconnect()

    except Exception as e:
        logger.error(f"Error getting chat info: {e}")
        from app.handlers.common import get_menu_with_counter
        menu_keyboard = await get_menu_with_counter([user_role])
        await message.answer(
            f"‚úÖ <b>–†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üÜî Chat ID: <code>{chat_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.",
            parse_mode="HTML",
            reply_markup=menu_keyboard,
        )

    await state.clear()


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", SetWorkChatStates.enter_chat_id)
async def handle_cancel_work_chat(message: Message, state: FSMContext, user_role: str):
    """
    –û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_role != UserRole.ADMIN:
        return

    from app.handlers.common import get_menu_with_counter
    menu_keyboard = await get_menu_with_counter([user_role])
    await message.answer(
        "‚ùå <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=menu_keyboard,
    )

    await state.clear()
