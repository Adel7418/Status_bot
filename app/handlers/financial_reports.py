"""
–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
"""

import logging
from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.config import UserRole
from app.database.db import Database
from app.decorators import handle_errors, require_role
from app.services.financial_reports import FinancialReportsService
from app.utils.helpers import get_now


logger = logging.getLogger(__name__)
router = Router()


def get_reports_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (Excel)", callback_data="report_active_orders_excel"
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã (Excel)", callback_data="report_closed_orders_excel"
            ),
        ],
        [
            InlineKeyboardButton(
                text="üë®‚Äçüîß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ (Excel)", callback_data="report_masters_stats_excel"
            ),
        ],
        [
            InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_daily"),
        ],
        [
            InlineKeyboardButton(text="üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_weekly"),
        ],
        [
            InlineKeyboardButton(text="üóìÔ∏è –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_monthly"),
        ],
        [
            InlineKeyboardButton(text="üìã –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="report_custom"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_daily_report_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –æ—Ç—á–µ—Ç–∞"""
    today = get_now()
    yesterday = today - timedelta(days=1)

    keyboard = [
        [
            InlineKeyboardButton(
                text=f"–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})",
                callback_data=f"daily_report_{today.strftime('%Y-%m-%d')}",
            ),
        ],
        [
            InlineKeyboardButton(
                text=f"–í—á–µ—Ä–∞ ({yesterday.strftime('%d.%m')})",
                callback_data=f"daily_report_{yesterday.strftime('%Y-%m-%d')}",
            ),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_menu"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_weekly_report_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –æ—Ç—á–µ—Ç–∞"""
    today = get_now()
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    days_since_monday = today.weekday()
    current_week_start = today - timedelta(days=days_since_monday)
    previous_week_start = current_week_start - timedelta(days=7)

    keyboard = [
        [
            InlineKeyboardButton(
                text=f"–≠—Ç–∞ –Ω–µ–¥–µ–ª—è ({current_week_start.strftime('%d.%m')} - {(current_week_start + timedelta(days=6)).strftime('%d.%m')})",
                callback_data=f"weekly_report_{current_week_start.strftime('%Y-%m-%d')}",
            ),
        ],
        [
            InlineKeyboardButton(
                text=f"–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è ({previous_week_start.strftime('%d.%m')} - {(previous_week_start + timedelta(days=6)).strftime('%d.%m')})",
                callback_data=f"weekly_report_{previous_week_start.strftime('%Y-%m-%d')}",
            ),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_menu"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_monthly_report_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –æ—Ç—á–µ—Ç–∞"""
    today = get_now()
    current_month = today.replace(day=1)
    previous_month = (current_month - timedelta(days=1)).replace(day=1)

    keyboard = [
        [
            InlineKeyboardButton(
                text=f"–≠—Ç–æ—Ç –º–µ—Å—è—Ü ({current_month.strftime('%B %Y')})",
                callback_data=f"monthly_report_{current_month.year}_{current_month.month}",
            ),
        ],
        [
            InlineKeyboardButton(
                text=f"–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü ({previous_month.strftime('%B %Y')})",
                callback_data=f"monthly_report_{previous_month.year}_{previous_month.month}",
            ),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_menu"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_report_actions_keyboard(report_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ç—á–µ—Ç–æ–º"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üìÑ –°–∫–∞—á–∞—Ç—å Excel", callback_data=f"export_excel_{report_id}"
            ),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º", callback_data="reports_menu"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(Command("reports"))
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def cmd_reports(message: Message, user_role: str):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.answer(
        "üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        parse_mode="HTML",
        reply_markup=get_reports_menu_keyboard(),
    )


@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def btn_reports_direct(message: Message, user_role: str):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"DEBUG: btn_reports_direct called, user_role={user_role}")
    await message.answer(
        "üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        parse_mode="HTML",
        reply_markup=get_reports_menu_keyboard(),
    )


@router.callback_query(F.data == "reports_menu")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_reports_menu(callback: CallbackQuery, user_role: str):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    await callback.message.edit_text(
        "üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        parse_mode="HTML",
        reply_markup=get_reports_menu_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "report_daily")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_report_daily(callback: CallbackQuery, user_role: str):
    """–í—ã–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback.message.edit_text(
        "üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        parse_mode="HTML",
        reply_markup=get_daily_report_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "report_weekly")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_report_weekly(callback: CallbackQuery, user_role: str):
    """–í—ã–±–æ—Ä –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback.message.edit_text(
        "üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
        parse_mode="HTML",
        reply_markup=get_weekly_report_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "report_monthly")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_report_monthly(callback: CallbackQuery, user_role: str):
    """–í—ã–±–æ—Ä –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback.message.edit_text(
        "üìà <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        parse_mode="HTML",
        reply_markup=get_monthly_report_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("daily_report_"))
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_generate_daily_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    from app.utils.helpers import MOSCOW_TZ

    date_str = callback.data.split("_")[-1]
    report_date = datetime.strptime(date_str, "%Y-%m-%d")
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    report_date = report_date.replace(tzinfo=MOSCOW_TZ)

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç...")

    service = FinancialReportsService()
    report = await service.generate_daily_report(report_date)

    if report.total_orders == 0:
        await callback.message.edit_text(
            f"üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {report_date.strftime('%d.%m.%Y')}</b>\n\n"
            f"‚ùå –ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            parse_mode="HTML",
            reply_markup=get_report_actions_keyboard(report.id),
        )
    else:
        report_text = await service.format_report_for_display(report.id)
        await callback.message.edit_text(
            report_text,
            parse_mode="HTML",
            reply_markup=get_report_actions_keyboard(report.id),
        )

    await callback.answer()


@router.callback_query(F.data.startswith("weekly_report_"))
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_generate_weekly_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    from app.utils.helpers import MOSCOW_TZ

    date_str = callback.data.split("_")[-1]
    week_start = datetime.strptime(date_str, "%Y-%m-%d")
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    week_start = week_start.replace(tzinfo=MOSCOW_TZ)

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")

    service = FinancialReportsService()
    report = await service.generate_weekly_report(week_start)

    if report.total_orders == 0:
        await callback.message.edit_text(
            f"üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {week_start.strftime('%d.%m')} - {(week_start + timedelta(days=6)).strftime('%d.%m.%Y')}</b>\n\n"
            f"‚ùå –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            parse_mode="HTML",
            reply_markup=get_report_actions_keyboard(report.id),
        )
    else:
        report_text = await service.format_report_for_display(report.id)
        await callback.message.edit_text(
            report_text,
            parse_mode="HTML",
            reply_markup=get_report_actions_keyboard(report.id),
        )

    await callback.answer()


@router.callback_query(F.data.startswith("monthly_report_"))
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_generate_monthly_report(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    parts = callback.data.split("_")[-2:]
    year = int(parts[0])
    month = int(parts[1])

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç...")

    service = FinancialReportsService()
    report = await service.generate_monthly_report(year, month)

    if report.total_orders == 0:
        month_name = datetime(year, month, 1).strftime("%B %Y")
        await callback.message.edit_text(
            f"üìà <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {month_name}</b>\n\n"
            f"‚ùå –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            parse_mode="HTML",
            reply_markup=get_report_actions_keyboard(report.id),
        )
    else:
        report_text = await service.format_report_for_display(report.id)
        await callback.message.edit_text(
            report_text,
            parse_mode="HTML",
            reply_markup=get_report_actions_keyboard(report.id),
        )

    await callback.answer()


@router.callback_query(F.data == "reports_list")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_reports_list(callback: CallbackQuery, user_role: str):
    """–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    db = Database()
    await db.connect()

    try:
        reports = await db.get_latest_reports(limit=10)

        if not reports:
            await callback.message.edit_text(
                "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã</b>\n\n" "‚ùå –û—Ç—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                parse_mode="HTML",
                reply_markup=get_reports_menu_keyboard(),
            )
            return

        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:</b>\n\n"
        keyboard = []

        for i, report in enumerate(reports[:5], 1):
            period_text = ""
            if report.report_type == "DAILY":
                period_text = report.period_start.strftime("%d.%m.%Y")
            elif report.report_type == "WEEKLY":
                period_text = f"{report.period_start.strftime('%d.%m')} - {report.period_end.strftime('%d.%m.%Y')}"
            elif report.report_type == "MONTHLY":
                period_text = report.period_start.strftime("%B %Y")

            text += f"{i}. {report.report_type.lower()} ({period_text}) - {report.total_orders} –∑–∞–∫–∞–∑–æ–≤\n"
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=f"{report.report_type.lower()} {period_text}",
                        callback_data=f"view_report_{report.id}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_menu")])

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("view_report_"))
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_view_report(callback: CallbackQuery, user_role: str):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    report_id = int(callback.data.split("_")[-1])

    service = FinancialReportsService()
    report_text = await service.format_report_for_display(report_id)

    if not report_text or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in report_text:
        await callback.message.edit_text(
            "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_reports_menu_keyboard(),
        )
    else:
        await callback.message.edit_text(
            report_text,
            parse_mode="HTML",
            reply_markup=get_report_actions_keyboard(report_id),
        )

    await callback.answer()


@router.callback_query(F.data.startswith("export_excel_"))
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_export_excel(callback: CallbackQuery, user_role: str):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel"""
    report_id = int(callback.data.split("_")[-1])

    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª...")
    await callback.message.edit_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        from aiogram.types import FSInputFile

        from app.services.excel_export import ExcelExportService

        excel_service = ExcelExportService()
        filepath = await excel_service.export_report_to_excel(report_id)

        if not filepath:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞.",
                reply_markup=get_reports_menu_keyboard(),
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        file = FSInputFile(filepath)
        await callback.message.answer_document(file, caption="üìÑ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
        await callback.message.edit_text(
            "‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=get_reports_menu_keyboard(),
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os

        if os.path.exists(filepath):
            os.remove(filepath)

    except Exception as e:
        logger.error(f"Error exporting to Excel: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e!s}",
            reply_markup=get_reports_menu_keyboard(),
        )


@router.callback_query(F.data == "report_active_orders_excel")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_report_active_orders_excel(callback: CallbackQuery, user_role: str):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ Excel

    Args:
        callback: Callback query
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...", show_alert=False)

    try:
        from app.services.active_orders_export import ActiveOrdersExportService

        export_service = ActiveOrdersExportService()
        filepath = await export_service.export_active_orders_to_excel()

        if filepath:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            from aiogram.types import FSInputFile

            file = FSInputFile(filepath)
            await callback.message.answer_document(
                file,
                caption="üìã <b>–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º</b>\n\n"
                "–í —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏:\n"
                "‚Ä¢ –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è\n"
                "‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä\n"
                "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞\n"
                "‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
                "–°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞.",
                parse_mode="HTML",
            )

            logger.info(f"Active orders report sent to {callback.from_user.id}")
        else:
            await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", show_alert=True)

    except Exception as e:
        logger.error(f"Error generating active orders report: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞", show_alert=True)


@router.callback_query(F.data == "report_custom")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_report_custom(callback: CallbackQuery, user_role: str):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç"""
    await callback.message.edit_text(
        "üìã <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>YYYY-MM-DD YYYY-MM-DD</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>2025-10-01 2025-10-15</code>\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é.",
        parse_mode="HTML",
        reply_markup=get_reports_menu_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_main_menu")
@handle_errors
async def callback_back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == "report_closed_orders_excel")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_closed_orders_excel(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏"""
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –∑–∞–∫–∞–∑–∞–º...")

    from app.services.excel_export import ExcelExportService

    excel_service = ExcelExportService()
    filepath = await excel_service.export_closed_orders_to_excel(period_days=30)

    if not filepath:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_menu")]
                ]
            ),
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    from pathlib import Path

    from aiogram.types import FSInputFile

    file = FSInputFile(filepath, filename=Path(filepath).name)

    await callback.message.answer_document(
        document=file,
        caption="‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ 30 –¥–Ω–µ–π",
    )

    await callback.message.edit_text(
        "‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_menu")]]
        ),
    )

    await callback.answer()


@router.callback_query(F.data == "report_masters_stats_excel")
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_masters_stats_excel(callback: CallbackQuery, user_role: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    from app.database.db import Database

    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        cursor = await db.connection.execute(
            """
            SELECT
                m.id,
                u.first_name || ' ' || COALESCE(u.last_name, '') as full_name
            FROM masters m
            LEFT JOIN users u ON m.telegram_id = u.telegram_id
            WHERE m.is_approved = 1 AND m.deleted_at IS NULL
            ORDER BY u.first_name
            """
        )
        masters = await cursor.fetchall()

        if not masters:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_menu")]
                    ]
                ),
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        keyboard = []
        for i in range(0, len(masters), 2):
            row = []
            for j in range(2):
                if i + j < len(masters):
                    master = masters[i + j]
                    row.append(
                        InlineKeyboardButton(
                            text=f"üë®‚Äçüîß {master['full_name']}",
                            callback_data=f"master_stat:{master['id']}",
                        )
                    )
            keyboard.append(row)

        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reports_menu")])

        await callback.message.edit_text(
            "üë®‚Äçüîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:</b>\n\n"
            "–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("master_stat:"))
@require_role([UserRole.ADMIN, UserRole.DISPATCHER])
@handle_errors
async def callback_master_stat(callback: CallbackQuery, user_role: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É"""
    master_id = int(callback.data.split(":")[1])

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä—É...")

    from app.services.excel_export import ExcelExportService

    excel_service = ExcelExportService()
    filepath = await excel_service.export_master_orders_to_excel(master_id)

    if not filepath:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥", callback_data="report_masters_stats_excel"
                        )
                    ]
                ]
            ),
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    import logging
    from pathlib import Path

    from aiogram.types import FSInputFile

    logger = logging.getLogger(__name__)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not Path(filepath).exists():
            logger.error(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            await callback.message.edit_text(
                "‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥", callback_data="report_masters_stats_excel"
                            )
                        ]
                    ]
                ),
            )
            return

        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_filename = str(Path(filepath).name).encode("utf-8", errors="ignore").decode("utf-8")
        file = FSInputFile(filepath, filename=safe_filename)

        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª: {filepath} (—Ä–∞–∑–º–µ—Ä: {Path(filepath).stat().st_size} –±–∞–π—Ç)"
        )

        await callback.message.answer_document(
            document=file,
            caption="‚úÖ –û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä—É –≥–æ—Ç–æ–≤!",
        )

        logger.info(f"Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {filepath}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel —Ñ–∞–π–ª–∞ {filepath}: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e!s}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥", callback_data="report_masters_stats_excel"
                        )
                    ]
                ]
            ),
        )
        return

    await callback.message.edit_text(
        "‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ö —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤", callback_data="report_masters_stats_excel"
                    )
                ]
            ]
        ),
    )

    await callback.answer()


@router.callback_query(F.data == "close_menu")
@handle_errors
async def callback_close_menu(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await callback.answer()
