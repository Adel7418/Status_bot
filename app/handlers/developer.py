"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
"""

import logging
import os
import random

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from app.config import Config, EquipmentType, UserRole
from app.database import Database
from app.decorators import handle_errors, require_role
from app.keyboards.inline import get_dev_menu_keyboard


logger = logging.getLogger(__name__)

router = Router(name="developer")


@router.message(Command("dev"))
@require_role([UserRole.ADMIN])
@handle_errors
async def cmd_dev(message: Message, user_role: str):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not Config.DEV_MODE:
        await message.answer(
            "‚ö†Ô∏è <b>Developer —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω</b>\n\n"
            "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <code>DEV_MODE=true</code> –≤ .env —Ñ–∞–π–ª–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.",
            parse_mode="HTML",
        )
        return

    db_name = os.path.basename(Config.DATABASE_PATH)

    await message.answer(
        "üîß <b>Developer Mode</b>\n\n"
        f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: <code>{db_name}</code>\n\n"
        "‚ö†Ô∏è –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π dev –ë–î.\n"
        "Production –ë–î –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_dev_menu_keyboard(),
    )


@router.callback_query(lambda c: c.data == "dev_create_test_order")
@handle_errors
async def callback_create_test_order(callback: CallbackQuery):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏

    Args:
        callback: Callback query
    """
    await callback.answer("–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É...")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏
    equipment_types = EquipmentType.all_types()
    equipment = random.choice(equipment_types)

    test_clients = [
        "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
        "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
        "–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤",
        "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞",
        "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
    ]

    test_addresses = [
        "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5",
        "–ø—Ä. –ú–∏—Ä–∞, –¥. 25, –∫–≤. 12",
        "—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. 7, –∫–≤. 3",
        "—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, –¥. 45, –∫–≤. 18",
        "–ø—Ä. –ü–æ–±–µ–¥—ã, –¥. 30, –∫–≤. 7",
    ]

    test_problems = [
        "–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
        "–°—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ",
        "–ù–µ –≥—Ä–µ–µ—Ç –≤–æ–¥—É",
        "–ü—Ä–æ—Ç–µ—á–∫–∞",
        "–û—à–∏–±–∫–∞ –Ω–∞ –¥–∏—Å–ø–ª–µ–µ E03",
        "–ù–µ –æ—Ç–∂–∏–º–∞–µ—Ç –±–µ–ª—å–µ",
        "–ù–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "–ù–µ —Å–ª–∏–≤–∞–µ—Ç –≤–æ–¥—É",
    ]

    client_name = random.choice(test_clients)
    client_address = random.choice(test_addresses)
    client_phone = f"+7{random.randint(9000000000, 9999999999)}"
    description = f"{equipment}: {random.choice(test_problems)}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –ë–î
    db = Database()
    await db.connect()

    try:
        order = await db.create_order(
            equipment_type=equipment,
            description=description,
            client_name=client_name,
            client_address=client_address,
            client_phone=client_phone,
            dispatcher_id=callback.from_user.id,
            notes="[TEST] –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ dev —Ä–µ–∂–∏–º–∞",
        )

        await callback.message.edit_text(
            "‚úÖ <b>–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n"
            f"üîß {order.equipment_type}\n"
            f"üìù {order.description}\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}\n\n"
            f"üóì –°–æ–∑–¥–∞–Ω–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: <code>{os.path.basename(Config.DATABASE_PATH)}</code>",
            parse_mode="HTML",
            reply_markup=get_dev_menu_keyboard(),
        )

        logger.info(f"[DEV] –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order.id}")

    except Exception as e:
        logger.error(f"[DEV] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏</b>\n\n{e!s}",
            parse_mode="HTML",
            reply_markup=get_dev_menu_keyboard(),
        )
    finally:
        await db.disconnect()


@router.callback_query(lambda c: c.data == "dev_archive_orders")
@handle_errors
async def callback_dev_archive_orders(callback: CallbackQuery):
    """
    –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫

    Args:
        callback: Callback query
    """
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π", callback_data="dev_archive_30"))
    builder.row(InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ä—à–µ 60 –¥–Ω–µ–π", callback_data="dev_archive_60"))
    builder.row(InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π", callback_data="dev_archive_90"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dev_back"))

    await callback.message.edit_text(
        "üóÑÔ∏è <b>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ó–∞—è–≤–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,\n"
        "–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ data/archive/",
        parse_mode="HTML",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("dev_archive_"))
@handle_errors
async def callback_dev_archive_execute(callback: CallbackQuery):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        callback: Callback query
    """
    days = int(callback.data.split("_")[-1])

    await callback.message.edit_text(
        f"‚è≥ –ê—Ä—Ö–∏–≤–∏—Ä—É—é –∑–∞—è–≤–∫–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...\n\n" "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
    )

    from app.services.archive import ArchiveService

    db = Database()
    await db.connect()

    try:
        service = ArchiveService(db)
        result = await service.archive_old_orders(days_old=days)

        if result.get("error"):
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n" f"–û—à–∏–±–∫–∞: {result['error']}",
                parse_mode="HTML",
                reply_markup=get_dev_menu_keyboard(),
            )
        elif result["archived"] == 0:
            await callback.message.edit_text(
                f"‚ÑπÔ∏è <b>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n" f"–ó–∞—è–≤–æ–∫ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                parse_mode="HTML",
                reply_markup=get_dev_menu_keyboard(),
            )
        else:
            await callback.message.edit_text(
                f"‚úÖ <b>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                f"üì¶ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—è–≤–æ–∫: <b>{result['archived']}</b>\n"
                f"üìÖ –°—Ç–∞—Ä—à–µ: {days} –¥–Ω–µ–π\n"
                f"üìÅ –§–∞–π–ª: <code>{result.get('archive_file', 'N/A')}</code>\n\n"
                f"–ó–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤.",
                parse_mode="HTML",
                reply_markup=get_dev_menu_keyboard(),
            )

        logger.info(
            f"Archive executed by {callback.from_user.id}: {result['archived']} orders archived"
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(lambda c: c.data == "dev_back")
@handle_errors
async def callback_dev_back(callback: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

    Args:
        callback: Callback query
    """
    db_name = os.path.basename(Config.DATABASE_PATH)

    await callback.message.edit_text(
        "üîß <b>Developer Mode</b>\n\n"
        f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: <code>{db_name}</code>\n\n"
        "‚ö†Ô∏è –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π dev –ë–î.\n"
        "Production –ë–î –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_dev_menu_keyboard(),
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "dev_close")
@handle_errors
async def callback_dev_close(callback: CallbackQuery):
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

    Args:
        callback: Callback query
    """
    await callback.message.delete()
    await callback.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
