"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
"""

import logging
import re

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydantic import ValidationError

from app.config import MAX_DESCRIPTION_LENGTH, MAX_NOTES_LENGTH, OrderStatus, UserRole
from app.database import Database
from app.decorators import handle_errors
from app.keyboards.reply import get_cancel_keyboard
from app.states import EditOrderStates
from app.utils import (
    escape_html,
    format_datetime_for_storage,
    format_datetime_user_friendly,
    log_action,
    parse_natural_datetime,
    should_parse_as_date,
    validate_parsed_datetime,
)


logger = logging.getLogger(__name__)

router = Router(name="order_edit")


# –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
EDITABLE_FIELDS = {
    "equipment_type": "üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏",
    "description": "üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
    "client_name": "üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞",
    "client_address": "üìç –ê–¥—Ä–µ—Å",
    "client_phone": "üìû –¢–µ–ª–µ—Ñ–æ–Ω",
    "notes": "üìã –ó–∞–º–µ—Ç–∫–∏",
    "scheduled_time": "‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è",
    "estimated_completion_date": "üìÖ –°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è (DR)",
    "prepayment_amount": "üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (DR)",
}


async def show_edit_order_menu(message: Message, order, user_role: str, allow_closed: bool = False):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        order: –ó–∞—è–≤–∫–∞
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        allow_closed: –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫
    """
    from aiogram.types import InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    can_edit, error_msg = can_edit_order(order, user_role, allow_closed)
    if not can_edit:
        await message.reply(f"‚ùå {error_msg}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    status_names = {
        OrderStatus.NEW: "üÜï –ù–æ–≤–∞—è",
        OrderStatus.ASSIGNED: "üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–µ–Ω–∞",
        OrderStatus.ACCEPTED: "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞",
        OrderStatus.ONSITE: "üè† –ù–∞ –æ–±—ä–µ–∫—Ç–µ",
        OrderStatus.DR: "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
        OrderStatus.CLOSED: "‚úÖ –ó–∞–∫—Ä—ã—Ç–∞",
        OrderStatus.REFUSED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    }

    order_text = (
        f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
        f"üì± <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_names.get(order.status, order.status.value)}\n"
    )

    if order.notes:
        order_text += f"üìã <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n"

    if order.scheduled_time:
        order_text += f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.scheduled_time}\n"

    if order.estimated_completion_date:
        order_text += f"üìÖ <b>–°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è (DR):</b> {order.estimated_completion_date}\n"

    if order.prepayment_amount:
        order_text += f"üí∞ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (DR):</b> {order.prepayment_amount} ‚ÇΩ\n"

    order_text += "\n‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()

    for field_key, field_name in EDITABLE_FIELDS.items():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è DR —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ DR
        if field_key in ["estimated_completion_date", "prepayment_amount"]:
            if order.status != OrderStatus.DR:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º DR –ø–æ–ª—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤

        builder.row(
            InlineKeyboardButton(
                text=field_name,
                callback_data=f"edit_field:{field_key}",
            )
        )

    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"))

    await message.reply(order_text, parse_mode="HTML", reply_markup=builder.as_markup())


def can_edit_order(order, user_role: str, allow_closed: bool = False) -> tuple[bool, str | None]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏

    Args:
        order: –ó–∞—è–≤–∫–∞
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        allow_closed: –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

    Returns:
        (can_edit, error_message)
    """
    # –ó–∞–∫—Ä—ã—Ç—ã–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è (–∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è)
    if order.status in [OrderStatus.CLOSED, OrderStatus.REFUSED]:
        if allow_closed and user_role == UserRole.ADMIN and order.status == OrderStatus.CLOSED:
            return True, None
        return False, "–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"

    # –ê–¥–º–∏–Ω—ã –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ª—é–±–æ–º —Å—Ç–∞—Ç—É—Å–µ
    if user_role in [UserRole.ADMIN, UserRole.DISPATCHER]:
        return True, None

    # –ú–∞—Å—Ç–µ—Ä–∞ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
    # if user_role == UserRole.MASTER:
    #     if order.status in [OrderStatus.ASSIGNED, OrderStatus.ACCEPTED, OrderStatus.ONSITE]:
    #         return True, None
    #     return False, "–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö: –ù–∞–∑–Ω–∞—á–µ–Ω–∞, –ü—Ä–∏–Ω—è—Ç–∞, –ù–∞ –æ–±—ä–µ–∫—Ç–µ"

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–µ—â–∞–µ–º
    return False, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫"


@router.callback_query(F.data.startswith("edit_order:"))
@handle_errors
async def callback_edit_order(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - –≤—ã–±–æ—Ä –ø–æ–ª—è

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        can_edit, error_msg = can_edit_order(order, user_role, allow_closed=False)
        if not can_edit:
            await callback.answer(error_msg, show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ state
        await state.update_data(order_id=order_id)
        await state.set_state(EditOrderStates.select_field)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        builder = InlineKeyboardBuilder()

        for field_key, field_name in EDITABLE_FIELDS.items():
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è DR —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ DR
            if field_key in ["estimated_completion_date", "prepayment_amount"]:
                if order.status != OrderStatus.DR:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º DR –ø–æ–ª—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤

            builder.row(
                InlineKeyboardButton(
                    text=field_name,
                    callback_data=f"edit_field:{field_key}",
                )
            )

        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"view_order:{order_id}",
            )
        )

        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n" f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=builder.as_markup(),
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.callback_query(F.data.startswith("edit_field:"), EditOrderStates.select_field)
@handle_errors
async def callback_select_field(callback: CallbackQuery, state: FSMContext, user_role: str):
    """
    –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    field = callback.data.split(":")[1]
    data = await state.get_data()
    order_id = data.get("order_id")

    if not order_id:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
    await state.update_data(field=field)
    await state.set_state(EditOrderStates.enter_value)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        current_value = getattr(order, field, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        field_name = EDITABLE_FIELDS.get(field, field)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        prompt = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {field_name}</b>\n\n"
        prompt += f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n{escape_html(str(current_value)) if current_value else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        prompt += "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n\n"

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        if field == "equipment_type":
            from app.core.constants import EquipmentType

            types = EquipmentType.all_types()
            prompt += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>\n"
            for eq_type in types:
                prompt += f"‚Ä¢ {eq_type}\n"
            prompt += "\n<i>–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏</i>"

        elif field == "description":
            prompt += f"<i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH}</i>"

        elif field == "client_name":
            prompt += "<i>–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤</i>"

        elif field == "client_address":
            prompt += "<i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"

        elif field == "client_phone":
            prompt += "<i>–§–æ—Ä–º–∞—Ç: +7 (xxx) xxx-xx-xx –∏–ª–∏ 8xxxxxxxxxx</i>"

        elif field == "notes":
            prompt += f"<i>–ú–∞–∫—Å–∏–º—É–º {MAX_NOTES_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–≤–µ–¥–∏—Ç–µ '-'</i>"

        elif field == "estimated_completion_date":
            prompt += (
                "<b>ü§ñ –ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ –≤ 15:00</code>\n"
                "‚Ä¢ <code>—á–µ—Ä–µ–∑ 3 –¥–Ω—è</code>\n"
                "‚Ä¢ <code>—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é</code>\n"
                "‚Ä¢ <code>20.10.2025</code>\n\n"
                "<i>–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–≤–µ–¥–∏—Ç–µ '-'</i>"
            )

        elif field == "prepayment_amount":
            prompt += (
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>2000</code>\n"
                "‚Ä¢ <code>1500.50</code>\n\n"
                "<i>–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–≤–µ–¥–∏—Ç–µ '-' –∏–ª–∏ '0'</i>"
            )

        elif field == "scheduled_time":
            prompt += "<i>–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–≤–µ–¥–∏—Ç–µ '-'</i>"

        await callback.message.edit_text(
            prompt,
            parse_mode="HTML",
        )

        await callback.message.answer(
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=get_cancel_keyboard(),
        )

    finally:
        await db.disconnect()

    await callback.answer()


@router.message(EditOrderStates.enter_value, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@handle_errors
async def cancel_edit(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    order_id = data.get("order_id")
    await state.clear()

    if order_id:
        await message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup={"remove_keyboard": True},
        )
        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏
        # TODO: –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞—è–≤–∫–æ–π
    else:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.message(EditOrderStates.enter_value, F.text)
@handle_errors
async def process_new_value(message: Message, state: FSMContext, user_role: str):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = await state.get_data()
    order_id = data.get("order_id")
    field = data.get("field")

    if not order_id or not field:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    new_value = message.text.strip()

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è
    if new_value == "-" and field in ["notes", "scheduled_time", "estimated_completion_date"]:
        new_value = None
    if (new_value == "-" or new_value == "0") and field == "prepayment_amount":
        new_value = None

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        new_value = await validate_field_value(field, new_value, message)
        if new_value is False:  # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
            return
    except ValueError as e:
        await message.answer(
            f"‚ùå {e!s}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)

        if not order:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –µ—â–µ —Ä–∞–∑
        can_edit, error_msg = can_edit_order(order, user_role)
        if not can_edit:
            await message.answer(f"‚ùå {error_msg}")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
        old_value = getattr(order, field, None)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
        if hasattr(db, "update_order_field"):
            # ORM –º–µ—Ç–æ–¥
            await db.update_order_field(order_id, field, new_value)
        else:
            # –ü—Ä—è–º–æ–π SQL
            await db.connection.execute(
                f"UPDATE orders SET {field} = ? WHERE id = ?",  # nosec B608
                (new_value, order_id),
            )
            await db.connection.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        await db.add_audit_log(
            user_id=message.from_user.id,
            action="EDIT_ORDER",
            details=f"Order #{order_id}: {field} changed from '{old_value}' to '{new_value}'",
        )

        field_name = EDITABLE_FIELDS.get(field, field)

        await message.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"<b>–ü–æ–ª–µ:</b> {field_name}\n"
            f"<b>–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {escape_html(str(old_value)) if old_value else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {escape_html(str(new_value)) if new_value else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
            parse_mode="HTML",
            reply_markup={"remove_keyboard": True},
        )

        log_action(message.from_user.id, "EDIT_ORDER", f"Order #{order_id}, field: {field}")

    finally:
        await db.disconnect()

    await state.clear()


async def validate_field_value(field: str, value: str | None, message: Message):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è

    Args:
        field: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
        value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        message: –°–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)

    Returns:
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ False –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞

    Raises:
        ValueError: –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ
    """
    if value is None:
        return None

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—è
    if field == "equipment_type":
        from app.core.constants import EquipmentType

        types = EquipmentType.all_types()
        if value not in types:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(types)}")
        return value

    elif field == "description":
        if len(value) < 10:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        if len(value) > MAX_DESCRIPTION_LENGTH:
            raise ValueError(
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)"
            )

        # –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç SQL injection
        suspicious_patterns = [
            r";\s*(DROP|DELETE|UPDATE|INSERT|ALTER)\s+",
            r"--",
            r"/\*.*\*/",
            r"UNION\s+SELECT",
        ]
        for pattern in suspicious_patterns:
            if re.search(pattern, value, re.IGNORECASE):
                raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return value

    if field == "client_name":
        if len(value) < 5:
            raise ValueError("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
        if len(value) > 100:
            raise ValueError("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return value

    if field == "client_address":
        if len(value) < 10:
            raise ValueError("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
        if len(value) > 200:
            raise ValueError("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return value

    if field == "client_phone":
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏)
        from pydantic import BaseModel, Field, field_validator

        class PhoneValidator(BaseModel):
            phone: str = Field(..., min_length=10, max_length=20)

            @field_validator("phone")
            @classmethod
            def validate_phone(cls, v: str) -> str:
                v = v.strip()
                phone_pattern = (
                    r"^(?:\+7|8|7)?[\s\-]?(?:\(?\d{3}\)?[\s\-]?)?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}$"
                )
                if not re.match(phone_pattern, v):
                    raise ValueError(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +7 (xxx) xxx-xx-xx –∏–ª–∏ 8xxxxxxxxxx"
                    )
                return v

        try:
            validated = PhoneValidator(phone=value)
            return validated.phone
        except ValidationError as e:
            error_msg = e.errors()[0]["msg"]
            raise ValueError(error_msg) from e

    if field == "notes":
        if len(value) > MAX_NOTES_LENGTH:
            raise ValueError(f"–ó–∞–º–µ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º {MAX_NOTES_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)")
        return value

    if field == "scheduled_time":
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã
        if should_parse_as_date(value):
            parsed_dt, _ = parse_natural_datetime(value, validate=True)

            if parsed_dt:
                validation = validate_parsed_datetime(parsed_dt, value)

                # –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –¥–∞—Ç—É
                formatted_time = format_datetime_for_storage(parsed_dt, value)
                user_friendly = format_datetime_user_friendly(parsed_dt, value)

                logger.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã: '{value}' -> '{formatted_time}'")

                confirmation_text = f"‚úÖ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>\n\n{user_friendly}"

                if validation.get("warning"):
                    confirmation_text += f"\n\n‚ö†Ô∏è <i>{validation['warning']}</i>"

                await message.answer(confirmation_text, parse_mode="HTML")

                return formatted_time
            else:
                # –ù–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
                await message.answer(
                    f"‚ùì <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É:</b> {value}\n\n"
                    f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>\n\n"
                    f"<b>ü§ñ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã:</b>\n"
                    f"‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ –≤ 15:00</code>\n"
                    f"‚Ä¢ <code>–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 14:30</code>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ 3 –¥–Ω—è 15:00</code>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é 12:00</code>\n\n"
                    f"<b>‚è± –ß–µ—Ä–µ–∑ —á–∞—Å—ã/–¥–Ω–∏:</b>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞</code>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ 1-1.5 —á–∞—Å–∞</code>\n"
                    f"‚Ä¢ <code>—á–µ—Ä–µ–∑ 3 –¥–Ω—è</code>\n\n"
                    f"<b>üìÖ –¢–æ—á–Ω–∞—è –¥–∞—Ç–∞:</b>\n"
                    f"‚Ä¢ <code>20.10.2025 14:00</code>\n"
                    f"‚Ä¢ <code>25/10/2025 09:30</code>\n\n"
                    f"<b>üìù –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç:</b>\n"
                    f"‚Ä¢ <code>–ù–∞–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É</code>\n"
                    f"‚Ä¢ <code>–£—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è</code>",
                    parse_mode="HTML",
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
                return None

        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–∞–∫ –¥–∞—Ç—É - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        if len(value) < 3:
            raise ValueError("–í—Ä–µ–º—è/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        if len(value) > 150:
            raise ValueError("–í—Ä–µ–º—è/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 150 —Å–∏–º–≤–æ–ª–æ–≤)")
        return value

    if field == "estimated_completion_date":
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è DR
        if should_parse_as_date(value):
            parsed_dt, _ = parse_natural_datetime(value, validate=True)

            if parsed_dt:
                validation = validate_parsed_datetime(parsed_dt, value)

                # –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –¥–∞—Ç—É
                formatted_date = parsed_dt.strftime("%d.%m.%Y %H:%M")
                user_friendly = format_datetime_user_friendly(parsed_dt, value)

                logger.info(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ DR: '{value}' -> '{formatted_date}'")

                confirmation_text = f"‚úÖ <b>–°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:</b>\n\n{user_friendly}"

                if validation.get("warning"):
                    confirmation_text += f"\n\n‚ö†Ô∏è <i>{validation['warning']}</i>"

                await message.answer(confirmation_text, parse_mode="HTML")

                return formatted_date

        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        return value

    if field == "prepayment_amount":
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
        try:
            amount = float(value.replace(",", "."))
            if amount < 0:
                raise ValueError("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            if amount > 1000000:
                raise ValueError("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 1 000 000 ‚ÇΩ)")
            return amount
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2000 –∏–ª–∏ 1500.50")

    return value
