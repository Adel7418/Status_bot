"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö
"""
import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config import OrderStatus
from app.database import Database
from app.filters import IsGroupChat, IsGroupOrderCallback, IsMasterInGroup
from app.keyboards.inline import get_group_order_keyboard
from app.utils import format_datetime, log_action


logger = logging.getLogger(__name__)

router = Router(name="group_interaction")


@router.callback_query(F.data.startswith("group_accept_order:"), IsGroupOrderCallback())
async def callback_group_accept_order(callback: CallbackQuery):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.ACCEPTED)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ACCEPT_ORDER_GROUP",
            details=f"Accepted order #{order_id} in group"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {OrderStatus.get_status_name(OrderStatus.ACCEPTED)}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è: {format_datetime(datetime.now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
            f"–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_group_order_keyboard(order, OrderStatus.ACCEPTED)
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order_id} –≤ –≥—Ä—É–ø–ø–µ",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(callback.from_user.id, "ACCEPT_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")


@router.callback_query(F.data.startswith("group_refuse_order:"), IsGroupOrderCallback())
async def callback_group_refuse_order(callback: CallbackQuery):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ NEW –∏ —É–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.connection.execute(
            "UPDATE orders SET status = ?, assigned_master_id = NULL WHERE id = ?",
            (OrderStatus.NEW, order_id)
        )
        await db.connection.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REFUSE_ORDER_GROUP",
            details=f"Master refused order #{order_id} in group"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫—Ä—ã—Ç, —Ç.–∫. –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç)
        await callback.message.edit_text(
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: –¢—Ä–µ–±—É–µ—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {format_datetime(datetime.now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n\n"
            f"–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
            parse_mode="HTML"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚ùå –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{order_id} –≤ –≥—Ä—É–ø–ø–µ\n"
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(callback.from_user.id, "REFUSE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


@router.callback_query(F.data.startswith("group_onsite_order:"), IsGroupOrderCallback())
async def callback_group_onsite_order(callback: CallbackQuery):
    """
    –ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–≤ –≥—Ä—É–ø–ø–µ)

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.ONSITE)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ONSITE_ORDER_GROUP",
            details=f"Master on site for order #{order_id} in group"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.edit_text(
            f"üè† <b>–ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ!</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {OrderStatus.get_status_name(OrderStatus.ONSITE)}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {format_datetime(datetime.now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}\n\n"
            f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_group_order_keyboard(order, OrderStatus.ONSITE)
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"üè† –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–ó–∞—è–≤–∫–∞ #{order_id})",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(callback.from_user.id, "ONSITE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data.startswith("group_complete_order:"), IsGroupOrderCallback())
async def callback_group_complete_order(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
        await state.update_data(
            order_id=order_id,
            group_chat_id=callback.message.chat.id,
            group_message_id=callback.message.message_id
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        from app.states import CompleteOrderStates
        await state.set_state(CompleteOrderStates.enter_total_amount)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –ø—Ä—è–º–æ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.reply(
            f"üí∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 5000.50",
            parse_mode="HTML"
        )

        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞")

        log_action(callback.from_user.id, "START_COMPLETE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("group_dr_order:"), IsGroupOrderCallback())
async def callback_group_dr_order(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç (–≤ –≥—Ä—É–ø–ø–µ)

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        master = await db.get_master_by_telegram_id(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(order_id, OrderStatus.DR)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="DR_ORDER_GROUP",
            details=f"Order #{order_id} moved to long repair in group"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.edit_text(
            f"‚è≥ <b>–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {OrderStatus.get_status_name(OrderStatus.DR)}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞: {format_datetime(datetime.now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}\n\n"
            f"–ó–∞—è–≤–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞.",
            parse_mode="HTML"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚è≥ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –ø–µ—Ä–µ–≤–µ–ª –∑–∞—è–≤–∫—É #{order_id} –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(callback.from_user.id, "DR_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç")


@router.message(Command("order"), IsGroupChat(), IsMasterInGroup())
async def cmd_order_in_group(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø–µ
    """
    if message.chat.type not in ["group", "supergroup"]:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    try:
        order_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>\n"
            "–ü—Ä–∏–º–µ—Ä: /order 123"
        )
        return

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        if not order:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å—Ç–µ—Ä –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        master = None
        if order.assigned_master_id:
            master = await db.get_master_by_id(order.assigned_master_id)
            if master and master.work_chat_id != message.chat.id:
                await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –º–∞—Å—Ç–µ—Ä—É.")
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus.get_status_name(order.status)}\n"
        text += f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
        text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç
        if order.status in [OrderStatus.ONSITE, OrderStatus.DR, OrderStatus.CLOSED]:
            text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
        elif order.status == OrderStatus.ACCEPTED:
            text += "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
        else:
            text += "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</i>\n\n"

        if order.notes:
            text += f"üìÑ <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.assigned_master_id and master:
            text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n"

        if order.dispatcher_name:
            text += f"üìû <b>–î–∏—Å–ø–µ—Ç—á–µ—Ä:</b> {order.dispatcher_name}\n"

        text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
        text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {format_datetime(order.updated_at)}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –º–∞—Å—Ç–µ—Ä–∞
        if master and master.telegram_id == message.from_user.id:
            keyboard = get_group_order_keyboard(order, order.status)
            await message.reply(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await message.reply(text, parse_mode="HTML")

    finally:
        await db.disconnect()
