"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö
"""

import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config import OrderStatus, UserRole
from app.core.constants import GROUP_ANONYMOUS_BOT_ID
from app.database import Database
from app.filters import IsGroupChat, IsGroupOrderCallback, IsMasterInGroup
from app.keyboards.inline import get_group_order_keyboard
from app.utils import format_datetime, get_now, log_action


logger = logging.getLogger(__name__)

router = Router(name="group_interaction")


async def get_master_from_callback(callback: CallbackQuery, db: Database):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ callback (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)
    
    Args:
        callback: Callback query
        db: Database instance
        
    Returns:
        Tuple[Master | None, bool]: (master, is_anonymous_admin)
    """
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
    if user_id == GROUP_ANONYMOUS_BOT_ID:
        # –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω - –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID –≥—Ä—É–ø–ø—ã
        master = await db.get_master_by_work_chat_id(callback.message.chat.id)
        if master:
            logger.info(f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ –º–∞—Å—Ç–µ—Ä–∞ {master.get_display_name()}")
            return master, True
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã {callback.message.chat.id}")
            return None, True
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—â–µ–º –ø–æ telegram_id
        master = await db.get_master_by_telegram_id(user_id)
        
        # –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —ç—Ç–æ –∞–¥–º–∏–Ω
        if not master:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            user = await db.get_user_by_telegram_id(user_id)
            if user and user.role == UserRole.ADMIN:
                # –ê–¥–º–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ - –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –≥—Ä—É–ø–ø–µ
                master = await db.get_master_by_work_chat_id(callback.message.chat.id)
                if master:
                    logger.info(f"–ê–¥–º–∏–Ω {user.first_name} —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ –º–∞—Å—Ç–µ—Ä–∞ {master.get_display_name()}")
                    return master, False
        
        return master, False


async def check_master_work_group(master, callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ –∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–π
    
    Args:
        master: –û–±—ä–µ–∫—Ç –º–∞—Å—Ç–µ—Ä–∞
        callback: Callback query
        
    Returns:
        True –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã
    if not master.work_chat_id:
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞!\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            show_alert=True
        )
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ
    if callback.message.chat.id != master.work_chat_id:
        await callback.answer(
            "‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–π —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ!",
            show_alert=True
        )
        return False
    
    return True


@router.callback_query(F.data.startswith("group_accept_order:"))
async def callback_group_accept_order(callback: CallbackQuery):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º, –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)
        master, is_anonymous = await get_master_from_callback(callback, db)
        
        if not master:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –∫–∞–∫ —Ä–∞–±–æ—á–∞—è.",
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω)
        if not is_anonymous:
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞—è–≤–∫—É
        if order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –∑–∞—è–≤–∫–∞ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(
            order_id, OrderStatus.ACCEPTED, changed_by=callback.from_user.id
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ACCEPT_ORDER_GROUP",
            details=f"Accepted order #{order_id} in group",
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
        acceptance_text = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {OrderStatus.get_status_name(OrderStatus.ACCEPTED)}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è: {format_datetime(get_now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if order.notes:
            acceptance_text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if order.scheduled_time:
            acceptance_text += f"\n‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É:</b> {order.scheduled_time}\n"
        
        acceptance_text += f"\n<b>–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.edit_text(
            acceptance_text,
            parse_mode="HTML",
            reply_markup=get_group_order_keyboard(order, OrderStatus.ACCEPTED),
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order_id} –≤ –≥—Ä—É–ø–ø–µ",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(callback.from_user.id, "ACCEPT_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")


@router.callback_query(F.data.startswith("group_refuse_order:"))
async def callback_group_refuse_order(callback: CallbackQuery):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º, –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)
        master, is_anonymous = await get_master_from_callback(callback, db)
        
        if not master:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –∫–∞–∫ —Ä–∞–±–æ—á–∞—è.",
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω)
        if not is_anonymous:
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –∑–∞—è–≤–∫–∞ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ NEW –∏ —É–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        await db.connection.execute(
            "UPDATE orders SET status = ?, assigned_master_id = NULL WHERE id = ?",
            (OrderStatus.NEW, order_id),
        )
        await db.connection.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REFUSE_ORDER_GROUP",
            details=f"Master refused order #{order_id} in group",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫—Ä—ã—Ç, —Ç.–∫. –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç)
        await callback.message.edit_text(
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: –¢—Ä–µ–±—É–µ—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {format_datetime(get_now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n\n"
            f"–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
            parse_mode="HTML",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"‚ùå –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{order_id} –≤ –≥—Ä—É–ø–ø–µ\n"
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(callback.from_user.id, "REFUSE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


@router.callback_query(F.data.startswith("group_onsite_order:"))
async def callback_group_onsite_order(callback: CallbackQuery):
    """
    –ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)

    Args:
        callback: Callback query
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)
        master, is_anonymous = await get_master_from_callback(callback, db)
        
        if not master:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –∫–∞–∫ —Ä–∞–±–æ—á–∞—è.",
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω)
        if not is_anonymous:
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –∑–∞—è–≤–∫–∞ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_order_status(
            order_id, OrderStatus.ONSITE, changed_by=callback.from_user.id
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ONSITE_ORDER_GROUP",
            details=f"Master on site for order #{order_id} in group",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.edit_text(
            f"üè† <b>–ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ!</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {OrderStatus.get_status_name(OrderStatus.ONSITE)}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {format_datetime(get_now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}\n\n"
            f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="HTML",
            reply_markup=get_group_order_keyboard(order, OrderStatus.ONSITE),
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        if order.dispatcher_id:
            try:
                await callback.bot.send_message(
                    order.dispatcher_id,
                    f"üè† –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–ó–∞—è–≤–∫–∞ #{order_id})",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id}: {e}")

        log_action(callback.from_user.id, "ONSITE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data.startswith("group_complete_order:"))
async def callback_group_complete_order(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)
        master, is_anonymous = await get_master_from_callback(callback, db)
        
        if not master:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –∫–∞–∫ —Ä–∞–±–æ—á–∞—è.",
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω)
        if not is_anonymous:
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –∑–∞—è–≤–∫–∞ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
        await state.update_data(
            order_id=order_id,
            group_chat_id=callback.message.chat.id,
            group_message_id=callback.message.message_id,
            acting_as_master_id=master.telegram_id,
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—â–µ–π —Å—É–º–º—ã
        from app.states import CompleteOrderStates

        await state.set_state(CompleteOrderStates.enter_total_amount)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –ø—Ä—è–º–æ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.reply(
            f"üí∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 5000, 5000.50 –∏–ª–∏ 0",
            parse_mode="HTML",
        )

        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞")

        log_action(callback.from_user.id, "START_COMPLETE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("group_dr_order:"))
async def callback_group_dr_order(callback: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)
        master, is_anonymous = await get_master_from_callback(callback, db)
        
        if not master:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –∫–∞–∫ —Ä–∞–±–æ—á–∞—è.",
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω)
        if not is_anonymous:
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –∑–∞—è–≤–∫–∞ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –∏ –º–∞—Å—Ç–µ—Ä–∞ –≤ state –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞
        await state.update_data(
            order_id=order_id,
            acting_as_master_id=master.telegram_id,
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
        from app.states import LongRepairStates
        await state.set_state(LongRepairStates.enter_completion_date_and_prepayment)
        
        await callback.message.reply(
            f"‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç - –ó–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞</b> –∏ <b>–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É</b> (–µ—Å–ª–∏ –±—ã–ª–∞).\n\n"
            f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            f"‚Ä¢ <code>20.10.2025</code>\n"
            f"‚Ä¢ <code>20.10.2025 –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 2000</code>\n"
            f"‚Ä¢ <code>—á–µ—Ä–µ–∑ 3 –¥–Ω—è</code>\n"
            f"‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞, –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 1500</code>\n"
            f"‚Ä¢ <code>–Ω–µ–¥–µ–ª—è</code>\n\n"
            f"<i>–ï—Å–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ –±—ã–ª–æ - –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫.</i>",
            parse_mode="HTML"
        )
        
        await callback.answer()
        
        logger.debug(f"[DR] Group DR process started for order #{order_id}, master: {master.telegram_id}")
        
        return

    finally:
        await db.disconnect()


@router.message(Command("order"), IsGroupChat(), IsMasterInGroup())
async def cmd_order_in_group(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø–µ
    """
    if message.chat.type not in ["group", "supergroup"]:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    try:
        order_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>\n"
            "–ü—Ä–∏–º–µ—Ä: /order 123"
        )
        return

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        if not order:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å—Ç–µ—Ä –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        master = None
        if order.assigned_master_id:
            master = await db.get_master_by_id(order.assigned_master_id)
            if master and master.work_chat_id != message.chat.id:
                await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –º–∞—Å—Ç–µ—Ä—É.")
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus.get_status_name(order.status)}\n"
        text += f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
        text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç
        if order.status in [OrderStatus.ONSITE, OrderStatus.DR, OrderStatus.CLOSED]:
            text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
        elif order.status == OrderStatus.ACCEPTED:
            text += "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
        else:
            text += "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</i>\n\n"

        if order.notes:
            text += f"üìÑ <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.assigned_master_id and master:
            text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n"

        if order.dispatcher_name:
            text += f"üìû <b>–î–∏—Å–ø–µ—Ç—á–µ—Ä:</b> {order.dispatcher_name}\n"

        text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
        text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {format_datetime(order.updated_at)}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –º–∞—Å—Ç–µ—Ä–∞
        if master and master.telegram_id == message.from_user.id:
            keyboard = get_group_order_keyboard(order, order.status)
            await message.reply(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await message.reply(text, parse_mode="HTML")

    finally:
        await db.disconnect()
