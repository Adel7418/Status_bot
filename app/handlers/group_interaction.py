"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö
"""

import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config import OrderStatus
from app.database import Database
from app.filters import IsGroupChat, IsMasterInGroup
from app.keyboards.inline import get_group_order_keyboard
from app.states import RescheduleOrderStates
from app.utils import format_datetime, get_now, log_action


logger = logging.getLogger(__name__)

router = Router(name="group_interaction")


async def check_master_work_group(master, callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ –∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–π

    Args:
        master: –û–±—ä–µ–∫—Ç –º–∞—Å—Ç–µ—Ä–∞
        callback: Callback query

    Returns:
        True –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã
    if not master.work_chat_id:
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞!\n" "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            show_alert=True,
        )
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ
    if callback.message.chat.id != master.work_chat_id:
        await callback.answer(
            "‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–π —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ!", show_alert=True
        )
        return False

    return True


@router.callback_query(F.data.startswith("group_accept_order:"))
async def callback_group_accept_order(callback: CallbackQuery, user_roles: list):
    """
    –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        from app.config import UserRole

        order = await db.get_order_by_id(order_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ, –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ work_chat_id –≥—Ä—É–ø–ø—ã
        if UserRole.ADMIN in user_roles:
            # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID –≥—Ä—É–ø–ø—ã
            master = await db.get_master_by_work_chat_id(callback.message.chat.id)

            if not master:
                await callback.answer(
                    "‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞", show_alert=True
                )
                return

            logger.info(
                f"Admin {callback.from_user.id} acting as master {master.telegram_id} in group {callback.message.chat.id}"
            )
        else:
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
            master = await db.get_master_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞—è–≤–∫—É
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ State Machine)
        await db.update_order_status(
            order_id=order_id,
            status=OrderStatus.ACCEPTED,
            changed_by=callback.from_user.id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ACCEPT_ORDER_GROUP",
            details=f"Accepted order #{order_id} in group",
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
        acceptance_text = (
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {OrderStatus.get_status_name(OrderStatus.ACCEPTED)}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è: {format_datetime(get_now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if order.notes:
            acceptance_text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if order.scheduled_time:
            acceptance_text += f"\n‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É:</b> {order.scheduled_time}\n"

        acceptance_text += "\n<b>–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.edit_text(
            acceptance_text,
            parse_mode="HTML",
            reply_markup=get_group_order_keyboard(order, OrderStatus.ACCEPTED),
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if order.dispatcher_id:
            from app.utils import safe_send_message

            result = await safe_send_message(
                callback.bot,
                order.dispatcher_id,
                f"‚úÖ –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{order_id} –≤ –≥—Ä—É–ø–ø–µ",
                parse_mode="HTML",
            )
            if not result:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id} after retries")

        log_action(callback.from_user.id, "ACCEPT_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")


@router.callback_query(F.data.startswith("group_refuse_order:"))
async def callback_group_refuse_order(callback: CallbackQuery, user_roles: list):
    """
    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        from app.config import UserRole

        order = await db.get_order_by_id(order_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ, –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ work_chat_id –≥—Ä—É–ø–ø—ã
        if UserRole.ADMIN in user_roles:
            master = await db.get_master_by_work_chat_id(callback.message.chat.id)

            if not master:
                await callback.answer(
                    "‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞", show_alert=True
                )
                return

            logger.info(
                f"Admin {callback.from_user.id} refusing order as master {master.telegram_id}"
            )
        else:
            master = await db.get_master_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ NEW –∏ —É–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ (ORM compatible)
        if hasattr(db, "unassign_master_from_order"):
            await db.unassign_master_from_order(order_id)
        else:
            # Legacy: –ø—Ä—è–º–æ–π SQL
            await db.connection.execute(
                "UPDATE orders SET status = ?, assigned_master_id = NULL WHERE id = ?",
                (OrderStatus.NEW, order_id),
            )
            await db.connection.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="REFUSE_ORDER_GROUP",
            details=f"Master refused order #{order_id} in group",
        )

        # –ú–µ–Ω—é –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ update_order_status

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∫—Ä—ã—Ç, —Ç.–∫. –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç)
        await callback.message.edit_text(
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: –¢—Ä–µ–±—É–µ—Ç –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {format_datetime(get_now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n\n"
            f"–î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
            parse_mode="HTML",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if order.dispatcher_id:
            from app.utils import safe_send_message

            result = await safe_send_message(
                callback.bot,
                order.dispatcher_id,
                f"‚ùå –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{order_id} –≤ –≥—Ä—É–ø–ø–µ\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.",
                parse_mode="HTML",
            )
            if not result:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id} after retries")

        log_action(callback.from_user.id, "REFUSE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")


@router.callback_query(F.data.startswith("group_onsite_order:"))
async def callback_group_onsite_order(callback: CallbackQuery, user_roles: list):
    """
    –ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –∏–ª–∏ –∞–¥–º–∏–Ω –∑–∞ –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        from app.config import UserRole

        order = await db.get_order_by_id(order_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ, –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ work_chat_id –≥—Ä—É–ø–ø—ã
        if UserRole.ADMIN in user_roles:
            master = await db.get_master_by_work_chat_id(callback.message.chat.id)

            if not master:
                await callback.answer(
                    "‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞", show_alert=True
                )
                return

            logger.info(
                f"Admin {callback.from_user.id} marking onsite as master {master.telegram_id}"
            )
        else:
            master = await db.get_master_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ State Machine)
        await db.update_order_status(
            order_id=order_id,
            status=OrderStatus.ONSITE,
            changed_by=callback.from_user.id,
            user_roles=user_roles,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        await db.add_audit_log(
            user_id=callback.from_user.id,
            action="ONSITE_ORDER_GROUP",
            details=f"Master on site for order #{order_id} in group",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.edit_text(
            f"üè† <b>–ú–∞—Å—Ç–µ—Ä –Ω–∞ –æ–±—ä–µ–∫—Ç–µ!</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n"
            f"üìã –ó–∞—è–≤–∫–∞ #{order_id}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {OrderStatus.get_status_name(OrderStatus.ONSITE)}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {format_datetime(get_now())}\n\n"
            f"üîß <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üì± –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {order.equipment_type}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n\n"
            f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìû –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.',
            parse_mode="HTML",
            reply_markup=get_group_order_keyboard(order, OrderStatus.ONSITE),
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        if order.dispatcher_id:
            from app.utils import safe_send_message

            result = await safe_send_message(
                callback.bot,
                order.dispatcher_id,
                f"üè† –ú–∞—Å—Ç–µ—Ä {master.get_display_name()} –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (–ó–∞—è–≤–∫–∞ #{order_id})",
                parse_mode="HTML",
            )
            if not result:
                logger.error(f"Failed to notify dispatcher {order.dispatcher_id} after retries")

        log_action(callback.from_user.id, "ONSITE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data.startswith("group_complete_order:"))
async def callback_group_complete_order(
    callback: CallbackQuery, state: FSMContext, user_roles: list
):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        from app.config import UserRole

        order = await db.get_order_by_id(order_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ, –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ work_chat_id –≥—Ä—É–ø–ø—ã
        if UserRole.ADMIN in user_roles:
            master = await db.get_master_by_work_chat_id(callback.message.chat.id)

            if not master:
                await callback.answer(
                    "‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞", show_alert=True
                )
                return

            is_admin_acting = True
            logger.info(
                f"Admin {callback.from_user.id} completing order as master {master.telegram_id}"
            )
        else:
            master = await db.get_master_by_telegram_id(callback.from_user.id)
            is_admin_acting = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –º–∞—Å—Ç–µ—Ä–∞, –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ú–ê–°–¢–ï–†–ê, –∞ –Ω–µ –∞–¥–º–∏–Ω–∞
        # –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        if is_admin_acting:
            from aiogram.fsm.context import FSMContext
            from aiogram.fsm.storage.base import StorageKey

            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            master_storage_key = StorageKey(
                bot_id=callback.bot.id, chat_id=callback.message.chat.id, user_id=master.telegram_id
            )

            # –ü–æ–ª—É—á–∞–µ–º FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
            master_state = FSMContext(storage=state.storage, key=master_storage_key)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
            await master_state.update_data(
                order_id=order_id,
                group_chat_id=callback.message.chat.id,
                group_message_id=callback.message.message_id,
                acting_as_master_id=None,  # –ú–∞—Å—Ç–µ—Ä –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏
            )

            from app.states import CompleteOrderStates

            await master_state.set_state(CompleteOrderStates.enter_total_amount)

            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            await state.clear()
        else:
            # –û–±—ã—á–Ω—ã–π –º–∞—Å—Ç–µ—Ä - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –Ω–µ–≥–æ
            await state.update_data(
                order_id=order_id,
                group_chat_id=callback.message.chat.id,
                group_message_id=callback.message.message_id,
                acting_as_master_id=None,
            )

            from app.states import CompleteOrderStates

            await state.set_state(CompleteOrderStates.enter_total_amount)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –ø—Ä—è–º–æ –≤ –≥—Ä—É–ø–ø–µ
        await callback.message.reply(
            f"üí∞ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
            f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞</b> (–≤ —Ä—É–±–ª—è—Ö):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 5000, 5000.50 –∏–ª–∏ 0",
            parse_mode="HTML",
        )

        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞")

        log_action(callback.from_user.id, "START_COMPLETE_ORDER_GROUP", f"Order #{order_id}")

    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("group_dr_order:"))
async def callback_group_dr_order(callback: CallbackQuery, state: FSMContext, user_roles: list):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –º–∞—Å—Ç–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        from app.config import UserRole

        order = await db.get_order_by_id(order_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ, –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ work_chat_id –≥—Ä—É–ø–ø—ã
        if UserRole.ADMIN in user_roles:
            master = await db.get_master_by_work_chat_id(callback.message.chat.id)

            if not master:
                await callback.answer(
                    "‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞", show_alert=True
                )
                return

            logger.info(f"Admin {callback.from_user.id} starting DR as master {master.telegram_id}")
        else:
            master = await db.get_master_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º order_id –∏ –º–∞—Å—Ç–µ—Ä–∞ –≤ state –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–æ–º
        is_admin = UserRole.ADMIN in user_roles
        await state.update_data(
            order_id=order_id,
            acting_as_master_id=master.telegram_id if is_admin else None,
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã
        from app.states import LongRepairStates

        await state.set_state(LongRepairStates.enter_completion_date_and_prepayment)

        await callback.message.reply(
            f"‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç - –ó–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞</b> –∏ <b>–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É</b> (–µ—Å–ª–∏ –±—ã–ª–∞).\n\n"
            f"<i>–ï—Å–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –Ω–µ –±—ã–ª–æ - –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫.</i>",
            parse_mode="HTML",
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_group_start_long_repair: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await db.disconnect()


@router.callback_query(F.data.startswith("group_show_phone:"))
async def callback_group_show_phone(callback: CallbackQuery, user_roles: list):
    """
    –ü–æ–∫–∞–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ.
    –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä—É –∑–∞—è–≤–∫–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —ç—Ç–æ–π —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã.
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        from app.config import UserRole

        order = await db.get_order_by_id(order_id)
        if not order:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∫–ª–∏–∫–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –µ–≥–æ —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ –º–∞—Å—Ç–µ—Ä–∞
        if UserRole.ADMIN in user_roles:
            master = await db.get_master_by_work_chat_id(callback.message.chat.id)
            if not master or order.assigned_master_id != master.id:
                await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
        else:
            master = await db.get_master_by_telegram_id(callback.from_user.id)
            if not master or order.assigned_master_id != master.id:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
                return

        # –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è (ONSITE), –∞ —Ç–∞–∫–∂–µ –≤ DR/–∑–∞–∫—Ä—ã—Ç–∞
        if order.status not in [OrderStatus.ONSITE, OrderStatus.DR, OrderStatus.CLOSED]:
            await callback.answer("üìµ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç", show_alert=True)
            return

        await callback.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {order.client_phone}", show_alert=True)

    finally:
        await db.disconnect()

        logger.debug(
            f"[DR] Group DR process started for order #{order_id}, master: {master.telegram_id}"
        )


@router.callback_query(F.data.startswith("group_reschedule_order:"))
async def callback_group_reschedule_order(
    callback: CallbackQuery, state: FSMContext, user_roles: list
):
    """
    –ü–µ—Ä–µ–Ω–æ—Å –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        callback: Callback query
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_roles: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    order_id = int(callback.data.split(":")[1])

    db = Database()
    await db.connect()

    try:
        from app.config import UserRole

        order = await db.get_order_by_id(order_id)

        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ ASSIGNED –∏–ª–∏ ACCEPTED
        if order.status not in [OrderStatus.ASSIGNED, OrderStatus.ACCEPTED]:
            await callback.answer(
                "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '–ù–∞–∑–Ω–∞—á–µ–Ω–∞' –∏–ª–∏ '–ü—Ä–∏–Ω—è—Ç–∞'", show_alert=True
            )
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ, –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ work_chat_id –≥—Ä—É–ø–ø—ã
        if UserRole.ADMIN in user_roles:
            master = await db.get_master_by_work_chat_id(callback.message.chat.id)

            if not master:
                await callback.answer(
                    "‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞", show_alert=True
                )
                return

            logger.info(
                f"Admin {callback.from_user.id} rescheduling as master {master.telegram_id}"
            )
        else:
            master = await db.get_master_by_telegram_id(callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
            if not await check_master_work_group(master, callback):
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not master or order.assigned_master_id != master.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
        await state.update_data(
            order_id=order_id,
            reschedule_initiated_by=callback.from_user.id,
            is_group_reschedule=True,
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(RescheduleOrderStates.enter_new_time)

        current_time = order.scheduled_time or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        await callback.message.reply(
            f"üìÖ <b>–ü–µ—Ä–µ–Ω–æ—Å –∑–∞—è–≤–∫–∏ #{order_id}</b>\n\n"
            f"‚è∞ –°–µ–π—á–∞—Å: {current_time}\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ 14:00, —Å–µ–≥–æ–¥–Ω—è 18:00, —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞</i>",
            parse_mode="HTML",
        )

        await callback.answer()

    finally:
        await db.disconnect()


@router.message(Command("order"), IsGroupChat(), IsMasterInGroup())
async def cmd_order_in_group(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø–µ
    """
    if message.chat.type not in ["group", "supergroup"]:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    try:
        order_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /order <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>\n"
            "–ü—Ä–∏–º–µ—Ä: /order 123"
        )
        return

    db = Database()
    await db.connect()

    try:
        order = await db.get_order_by_id(order_id)
        if not order:
            await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å—Ç–µ—Ä –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        master = None
        if order.assigned_master_id:
            master = await db.get_master_by_id(order.assigned_master_id)
            if master and master.work_chat_id != message.chat.id:
                await message.reply(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –º–∞—Å—Ç–µ—Ä—É.")
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {OrderStatus.get_status_name(order.status)}\n"
        text += f"üîß <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {order.equipment_type}\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
        text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç
        if order.status in [OrderStatus.ONSITE, OrderStatus.DR, OrderStatus.CLOSED]:
            text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.client_phone}\n\n"
        elif order.status == OrderStatus.ACCEPTED:
            text += "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç</i>\n\n"
        else:
            text += "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</i>\n\n"

        if order.notes:
            text += f"üìÑ <b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.notes}\n\n"

        if order.assigned_master_id and master:
            text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {master.get_display_name()}\n"

        if order.dispatcher_name:
            text += f"üìû <b>–î–∏—Å–ø–µ—Ç—á–µ—Ä:</b> {order.dispatcher_name}\n"

        text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"
        text += f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {format_datetime(order.updated_at)}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –º–∞—Å—Ç–µ—Ä–∞
        if master and master.telegram_id == message.from_user.id:
            keyboard = get_group_order_keyboard(order, order.status)
            await message.reply(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await message.reply(text, parse_mode="HTML")

    finally:
        await db.disconnect()
