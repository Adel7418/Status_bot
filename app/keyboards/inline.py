"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
"""

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import EquipmentType, OrderStatus
from app.database.models import Master, Order
from app.utils import create_callback_data


def get_group_order_keyboard(order: Order, status: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º –≤ –≥—Ä—É–ø–ø–µ

    Args:
        order: –ó–∞—è–≤–∫–∞
        status: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    if status == OrderStatus.ASSIGNED:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É",
                callback_data=create_callback_data("group_accept_order", order.id),
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=create_callback_data("group_refuse_order", order.id),
            ),
        )
    elif status == OrderStatus.ACCEPTED:
        builder.row(
            InlineKeyboardButton(
                text="üè† –Ø –Ω–∞ –æ–±—ä–µ–∫—Ç–µ",
                callback_data=create_callback_data("group_onsite_order", order.id),
            )
        )
    elif status == OrderStatus.ONSITE:
        builder.row(
            InlineKeyboardButton(
                text="üí∞ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data=create_callback_data("group_complete_order", order.id),
            ),
            InlineKeyboardButton(
                text="‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
                callback_data=create_callback_data("group_dr_order", order.id),
            ),
        )

    return builder.as_markup()


def get_equipment_types_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    for equipment_type in EquipmentType.all_types():
        builder.row(
            InlineKeyboardButton(
                text=equipment_type, callback_data=create_callback_data("equipment", equipment_type)
            )
        )

    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    return builder.as_markup()


def get_order_actions_keyboard(order: Order, user_role: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π

    Args:
        order: –ó–∞—è–≤–∫–∞
        user_role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    from app.config import UserRole

    # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
    if user_role in [UserRole.ADMIN, UserRole.DISPATCHER]:
        if order.status == OrderStatus.NEW:
            builder.row(
                InlineKeyboardButton(
                    text="üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞",
                    callback_data=create_callback_data("assign_master", order.id),
                )
            )

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ —Å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º
        if order.assigned_master_id and order.status not in [
            OrderStatus.CLOSED,
            OrderStatus.REFUSED,
        ]:
            builder.row(
                InlineKeyboardButton(
                    text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞",
                    callback_data=create_callback_data("reassign_master", order.id),
                ),
                InlineKeyboardButton(
                    text="üö´ –°–Ω—è—Ç—å –º–∞—Å—Ç–µ—Ä–∞",
                    callback_data=create_callback_data("unassign_master", order.id),
                ),
            )

        if order.status not in [OrderStatus.CLOSED, OrderStatus.REFUSED]:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
            # builder.row(
            #     InlineKeyboardButton(
            #         text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            #         callback_data=create_callback_data("edit_order", order.id),
            #     )
            # )
            builder.row(
                InlineKeyboardButton(
                    text="üí∞ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data=create_callback_data("close_order", order.id),
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=create_callback_data("refuse_order", order.id),
                ),
            )

    # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
    elif user_role == UserRole.MASTER:
        if order.status == OrderStatus.ASSIGNED:
            builder.row(
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data=create_callback_data("accept_order", order.id),
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=create_callback_data("refuse_order_master", order.id),
                ),
            )
        elif order.status == OrderStatus.ACCEPTED:
            builder.row(
                InlineKeyboardButton(
                    text="üè† –Ø –Ω–∞ –æ–±—ä–µ–∫—Ç–µ",
                    callback_data=create_callback_data("onsite_order", order.id),
                )
            )
        elif order.status == OrderStatus.ONSITE:
            builder.row(
                InlineKeyboardButton(
                    text="üí∞ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=create_callback_data("complete_order", order.id),
                ),
                InlineKeyboardButton(
                    text="‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
                    callback_data=create_callback_data("dr_order", order.id),
                ),
            )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_orders"))

    return builder.as_markup()


def get_masters_list_keyboard(
    masters: list[Master], order_id: int | None = None, action: str = "select_master"
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—Å—Ç–µ—Ä–æ–≤

    Args:
        masters: –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
        order_id: ID –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∑–∞—è–≤–∫—É)
        action: –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    for master in masters:
        display_name = master.get_display_name()
        specialization = f" ({master.specialization})"

        if order_id:
            callback_data = create_callback_data(action, order_id, master.id)
        else:
            callback_data = create_callback_data(action, master.telegram_id)

        builder.row(
            InlineKeyboardButton(
                text=f"{display_name}{specialization}", callback_data=callback_data
            )
        )

    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    return builder.as_markup()


def get_master_approval_keyboard(telegram_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞

    Args:
        telegram_id: Telegram ID –º–∞—Å—Ç–µ—Ä–∞

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=create_callback_data("approve_master", telegram_id)
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=create_callback_data("reject_master", telegram_id)
        ),
    )

    return builder.as_markup()


def get_orders_filter_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="üÜï –ù–æ–≤—ã–µ", callback_data=create_callback_data("filter_orders", OrderStatus.NEW)
        ),
        InlineKeyboardButton(
            text="üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ",
            callback_data=create_callback_data("filter_orders", OrderStatus.ASSIGNED),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ",
            callback_data=create_callback_data("filter_orders", OrderStatus.ACCEPTED),
        ),
        InlineKeyboardButton(
            text="üè† –ù–∞ –æ–±—ä–µ–∫—Ç–µ",
            callback_data=create_callback_data("filter_orders", OrderStatus.ONSITE),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ",
            callback_data=create_callback_data("filter_orders", OrderStatus.CLOSED),
        ),
        InlineKeyboardButton(
            text="‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
            callback_data=create_callback_data("filter_orders", OrderStatus.DR),
        ),
    )
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data=create_callback_data("filter_orders", "all")
        )
    )

    return builder.as_markup()


def get_order_list_keyboard(orders: list[Order], for_master: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫

    Args:
        orders: –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        for_master: True –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ (–¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ–∏ –∑–∞—è–≤–∫–∏")

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ callback_data –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
    callback_prefix = "view_order_master" if for_master else "view_order"

    for order in orders:
        status_emoji = OrderStatus.get_status_emoji(order.status)
        text = f"{status_emoji} –ó–∞—è–≤–∫–∞ #{order.id} - {order.equipment_type}"

        builder.row(
            InlineKeyboardButton(
                text=text, callback_data=create_callback_data(callback_prefix, order.id)
            )
        )

    if not orders:
        builder.row(InlineKeyboardButton(text="‚ùå –ó–∞—è–≤–æ–∫ –Ω–µ—Ç", callback_data="no_orders"))

    return builder.as_markup()


def get_reports_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(text="üë• –ü–æ –º–∞—Å—Ç–µ—Ä–∞–º", callback_data="report_masters"))
    builder.row(InlineKeyboardButton(text="üìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º", callback_data="report_statuses"))
    builder.row(InlineKeyboardButton(text="üîß –ü–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏", callback_data="report_equipment"))
    builder.row(InlineKeyboardButton(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="report_period"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    return builder.as_markup()


def get_period_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
        InlineKeyboardButton(text="üìÖ –í—á–µ—Ä–∞", callback_data="period_yesterday"),
    )
    builder.row(
        InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—è", callback_data="period_week"),
        InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü", callback_data="period_month"),
    )
    builder.row(InlineKeyboardButton(text="üìÖ –ì–æ–¥", callback_data="period_year"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))

    return builder.as_markup()


def get_master_management_keyboard(telegram_id: int, is_active: bool) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–º

    Args:
        telegram_id: Telegram ID –º–∞—Å—Ç–µ—Ä–∞
        is_active: –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–∞—Å—Ç–µ—Ä

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã
    builder.row(
        InlineKeyboardButton(
            text="üí¨ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É",
            callback_data=create_callback_data("set_work_chat", telegram_id),
        )
    )

    if is_active:
        builder.row(
            InlineKeyboardButton(
                text="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=create_callback_data("deactivate_master", telegram_id),
            )
        )
    else:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=create_callback_data("activate_master", telegram_id),
            )
        )

    builder.row(
        InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=create_callback_data("master_stats", telegram_id)
        )
    )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_masters"))

    return builder.as_markup()


def get_pagination_keyboard(
    current_page: int, total_pages: int, callback_prefix: str
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data

    Returns:
        InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    buttons = []

    if current_page > 1:
        buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è", callback_data=create_callback_data(callback_prefix, current_page - 1)
            )
        )

    buttons.append(
        InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="current_page")
    )

    if current_page < total_pages:
        buttons.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è", callback_data=create_callback_data(callback_prefix, current_page + 1)
            )
        )

    builder.row(*buttons)

    return builder.as_markup()
