"""
–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
"""

import logging
import re
from typing import Optional

from app.database import Database
from app.database.models import Order
from app.utils import format_datetime, format_phone


logger = logging.getLogger(__name__)


class OrderSearchService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""

    def __init__(self, db: Database):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        Args:
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = db

    async def search_orders_by_phone(self, phone: str) -> list[Order]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        normalized_phone = self._normalize_phone(phone)

        if not normalized_phone:
            return []

        logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {normalized_phone}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        orders = await self.db.get_orders_by_client_phone(normalized_phone)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {len(orders)}")
        return orders

    async def search_orders_by_address(self, address: str) -> list[Order]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É

        Args:
            address: –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        if not address or len(address.strip()) < 3:
            return []

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
        normalized_address = self._normalize_address(address)

        logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É: {normalized_address}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        orders = await self._search_orders_by_address_in_db(normalized_address)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –∞–¥—Ä–µ—Å—É, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
        if not orders and len(normalized_address.split()) > 1:
            words = normalized_address.split()
            for word in words:
                if len(word) >= 3:  # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
                    word_orders = await self._search_orders_by_address_in_db(word)
                    orders.extend(word_orders)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            orders = self._remove_duplicate_orders(orders)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É: {len(orders)}")
        return orders

    async def search_orders_by_phone_and_address(self, phone: str, address: str) -> list[Order]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –∞–¥—Ä–µ—Å—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            address: –ê–¥—Ä–µ—Å

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        phone_orders = []
        address_orders = []

        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if phone:
            phone_orders = await self.search_orders_by_phone(phone)

        # –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
        if address:
            address_orders = await self.search_orders_by_address(address)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_orders = phone_orders + address_orders
        unique_orders = self._remove_duplicate_orders(all_orders)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –∞–¥—Ä–µ—Å—É: {len(unique_orders)}")
        return unique_orders

    def format_search_results(self, orders: list[Order], search_type: str = "–ø–æ–∏—Å–∫") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Args:
            orders: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        if not orders:
            return f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã {search_type}</b>\n\n‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã {search_type}</b>\n\n"
        text += f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <b>{len(orders)}</b>\n\n"

        for i, order in enumerate(orders, 1):
            # –°—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
            from app.config import OrderStatus

            status_emoji = OrderStatus.get_status_emoji(order.status)
            status_name = OrderStatus.get_status_name(order.status)

            text += f"<b>{i}. –ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
            text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {format_phone(order.client_phone)}\n"
            text += f"üè† <b>–ê–¥—Ä–µ—Å:</b> {order.client_address}\n"
            text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.client_name}\n"
            text += f"üîß <b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {order.equipment_type}\n"
            text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description[:100]}{'...' if len(order.description) > 100 else ''}\n"
            text += f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_name}\n"

            if order.master_name:
                text += f"üë®‚Äçüîß <b>–ú–∞—Å—Ç–µ—Ä:</b> {order.master_name}\n"

            if order.created_at:
                text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {format_datetime(order.created_at)}\n"

            text += "\n" + "‚îÄ" * 30 + "\n\n"

        return text

    def _normalize_phone(self, phone: str) -> Optional[str]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

        Args:
            phone: –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ None
        """
        if not phone:
            return None

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        digits_only = re.sub(r"\D", "", phone)

        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
        if digits_only.startswith("8") and len(digits_only) == 11:
            digits_only = "7" + digits_only[1:]

        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if digits_only.startswith("7") and len(digits_only) == 11:
            return digits_only

        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∏–º–µ–µ—Ç 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 7
        if len(digits_only) == 10:
            return "7" + digits_only

        return None

    def _normalize_address(self, address: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

        Args:
            address: –ò—Å—Ö–æ–¥–Ω—ã–π –∞–¥—Ä–µ—Å

        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        """
        if not address:
            return ""

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized = address.lower().strip()

        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        normalized = re.sub(r"\s+", " ", normalized)

        # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
        normalized = re.sub(r"[.,;:!?]+$", "", normalized)
        
        # –£–±–∏—Ä–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –ø–æ–ª–Ω—ã–µ —Ñ–æ—Ä–º—ã
        replacements = {
            '—É–ª.': '—É–ª–∏—Ü–∞',
            '—É–ª ': '—É–ª–∏—Ü–∞ ',
            '–¥.': '–¥–æ–º',
            '–¥ ': '–¥–æ–º ',
            '–∫–≤.': '–∫–≤–∞—Ä—Ç–∏—Ä–∞',
            '–∫–≤ ': '–∫–≤–∞—Ä—Ç–∏—Ä–∞ ',
            '–ø—Ä.': '–ø—Ä–æ—Å–ø–µ–∫—Ç',
            '–ø—Ä ': '–ø—Ä–æ—Å–ø–µ–∫—Ç ',
            '–ø–µ—Ä.': '–ø–µ—Ä–µ—É–ª–æ–∫',
            '–ø–µ—Ä ': '–ø–µ—Ä–µ—É–ª–æ–∫ ',
            '–Ω–∞–±.': '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è',
            '–Ω–∞–± ': '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è ',
        }
        
        for short, full in replacements.items():
            normalized = normalized.replace(short, full)
        
        return normalized

    async def _search_orders_by_address_in_db(self, address: str) -> list[Order]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        Args:
            address: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        if hasattr(self.db, "session_factory"):
            # ORMDatabase
            return await self._search_orders_by_address_orm(address)
        # Legacy Database
        return await self._search_orders_by_address_legacy(address)

    async def _search_orders_by_address_orm(self, address: str) -> list[Order]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ ORM

        Args:
            address: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        from sqlalchemy import func, select
        from sqlalchemy.orm import joinedload

        from app.database.orm_models import Master, User
        from app.database.orm_models import Order as ORMOrder

        async with self.db.session_factory() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ Python (–∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å func.lower() –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
            query = (
                select(ORMOrder)
                .options(
                    joinedload(ORMOrder.assigned_master).joinedload(Master.user),
                    joinedload(ORMOrder.dispatcher)
                )
                .order_by(ORMOrder.created_at.desc())
            )

            result = await session.execute(query)
            all_orders = result.unique().scalars().all()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤ Python
            orm_orders = []
            for order in all_orders:
                if address in order.client_address.lower():
                    orm_orders.append(order)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ORM –º–æ–¥–µ–ª–∏ –≤ dataclass –º–æ–¥–µ–ª–∏
            orders = []
            for orm_order in orm_orders:
                order = Order(
                    id=orm_order.id,
                    equipment_type=orm_order.equipment_type,
                    description=orm_order.description,
                    client_name=orm_order.client_name,
                    client_address=orm_order.client_address,
                    client_phone=orm_order.client_phone,
                    status=orm_order.status,
                    assigned_master_id=orm_order.assigned_master_id,
                    dispatcher_id=orm_order.dispatcher_id,
                    notes=orm_order.notes,
                    scheduled_time=orm_order.scheduled_time,
                    total_amount=orm_order.total_amount,
                    materials_cost=orm_order.materials_cost,
                    master_profit=orm_order.master_profit,
                    company_profit=orm_order.company_profit,
                    has_review=orm_order.has_review,
                    out_of_city=orm_order.out_of_city,
                    created_at=orm_order.created_at,
                    updated_at=orm_order.updated_at,
                    rescheduled_count=orm_order.rescheduled_count,
                    last_rescheduled_at=orm_order.last_rescheduled_at,
                    reschedule_reason=orm_order.reschedule_reason,
                    estimated_completion_date=orm_order.estimated_completion_date,
                    prepayment_amount=orm_order.prepayment_amount,
                )

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
                if orm_order.assigned_master:
                    master = orm_order.assigned_master
                    if master.user:
                        if master.user.first_name and master.user.last_name:
                            order.master_name = f"{master.user.first_name} {master.user.last_name}"
                        elif master.user.first_name:
                            order.master_name = master.user.first_name
                        elif master.user.username:
                            order.master_name = f"@{master.user.username}"

                if orm_order.dispatcher:
                    dispatcher = orm_order.dispatcher
                    if dispatcher.first_name and dispatcher.last_name:
                        order.dispatcher_name = f"{dispatcher.first_name} {dispatcher.last_name}"
                    elif dispatcher.first_name:
                        order.dispatcher_name = dispatcher.first_name
                    elif dispatcher.username:
                        order.dispatcher_name = f"@{dispatcher.username}"

                orders.append(order)

            return orders

    async def _search_orders_by_address_legacy(self, address: str) -> list[Order]:
        """
        –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ legacy Database

        Args:
            address: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        if not self.db.connection:
            await self.db.connect()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LIKE –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        cursor = await self.db.connection.execute(
            """
            SELECT o.*,
                   m.first_name as master_first_name, m.last_name as master_last_name, m.username as master_username,
                   u.first_name as dispatcher_first_name, u.last_name as dispatcher_last_name, u.username as dispatcher_username
            FROM orders o
            LEFT JOIN masters m ON o.assigned_master_id = m.id
            LEFT JOIN users u ON o.dispatcher_id = u.telegram_id
            WHERE LOWER(o.client_address) LIKE ? AND o.deleted_at IS NULL
            ORDER BY o.created_at DESC
            """,
            (f"%{address}%",),
        )
        rows = await cursor.fetchall()

        orders = []
        for row in rows:
            order = Order(
                id=row["id"],
                equipment_type=row["equipment_type"],
                description=row["description"],
                client_name=row["client_name"],
                client_address=row["client_address"],
                client_phone=row["client_phone"],
                status=row["status"],
                assigned_master_id=row["assigned_master_id"],
                dispatcher_id=row["dispatcher_id"],
                notes=row["notes"],
                scheduled_time=row["scheduled_time"],
                total_amount=row["total_amount"],
                materials_cost=row["materials_cost"],
                master_profit=row["master_profit"],
                company_profit=row["company_profit"],
                has_review=bool(row["has_review"]) if row["has_review"] is not None else None,
                out_of_city=bool(row["out_of_city"]) if row["out_of_city"] is not None else None,
                created_at=row["created_at"],
                updated_at=row["updated_at"],
                rescheduled_count=row["rescheduled_count"],
                last_rescheduled_at=row["last_rescheduled_at"],
                reschedule_reason=row["reschedule_reason"],
                estimated_completion_date=row["estimated_completion_date"],
                prepayment_amount=row["prepayment_amount"],
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –º–∞—Å—Ç–µ—Ä–∞
            if row["master_first_name"] and row["master_last_name"]:
                order.master_name = f"{row['master_first_name']} {row['master_last_name']}"
            elif row["master_first_name"]:
                order.master_name = row["master_first_name"]
            elif row["master_username"]:
                order.master_name = f"@{row['master_username']}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            if row["dispatcher_first_name"] and row["dispatcher_last_name"]:
                order.dispatcher_name = (
                    f"{row['dispatcher_first_name']} {row['dispatcher_last_name']}"
                )
            elif row["dispatcher_first_name"]:
                order.dispatcher_name = row["dispatcher_first_name"]
            elif row["dispatcher_username"]:
                order.dispatcher_name = f"@{row['dispatcher_username']}"

            orders.append(order)

        return orders

    def _remove_duplicate_orders(self, orders: list[Order]) -> list[Order]:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞

        Args:
            orders: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        seen_ids = set()
        unique_orders = []

        for order in orders:
            if order.id not in seen_ids:
                seen_ids.add(order.id)
                unique_orders.append(order)

        return unique_orders
