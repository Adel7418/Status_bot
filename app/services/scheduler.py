"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
"""
import logging
from datetime import datetime, timedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from app.config import Config, OrderStatus
from app.database import Database


logger = logging.getLogger(__name__)


class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –±–æ—Ç–∞"""

    def __init__(self, bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.db = Database()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        await self.db.connect()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SLA –∑–∞—è–≤–æ–∫ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        self.scheduler.add_job(
            self.check_order_sla,
            trigger=IntervalTrigger(minutes=30),
            id="check_order_sla",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ SLA –∑–∞—è–≤–æ–∫",
            replace_existing=True
        )

        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–≤ 9:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
        self.scheduler.add_job(
            self.send_daily_summary,
            trigger=CronTrigger(hour=9, minute=0),
            id="daily_summary",
            name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞",
            replace_existing=True
        )

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–∫–∞—Ö (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        self.scheduler.add_job(
            self.remind_assigned_orders,
            trigger=IntervalTrigger(minutes=5),
            id="remind_assigned_orders",
            name="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–∫–∞—Ö",
            replace_existing=True
        )

        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()
        await self.db.disconnect()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def check_order_sla(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ SLA –∑–∞—è–≤–æ–∫
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞—è–≤–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è
        –≤ –æ–¥–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
            orders = await self.db.get_all_orders()

            now = datetime.utcnow()
            alerts = []

            for order in orders:
                if order.status in [OrderStatus.CLOSED, OrderStatus.REFUSED]:
                    continue

                if not order.updated_at:
                    continue

                time_in_status = now - order.updated_at

                # SLA –ø—Ä–∞–≤–∏–ª–∞
                sla_rules = {
                    OrderStatus.NEW: timedelta(hours=2),      # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ > 2 —á–∞—Å–æ–≤
                    OrderStatus.ASSIGNED: timedelta(hours=4), # –ù–∞–∑–Ω–∞—á–µ–Ω–∞ > 4 —á–∞—Å–æ–≤
                    OrderStatus.ACCEPTED: timedelta(hours=8), # –ü—Ä–∏–Ω—è—Ç–∞ > 8 —á–∞—Å–æ–≤
                    OrderStatus.ONSITE: timedelta(hours=12),  # –ù–∞ –æ–±—ä–µ–∫—Ç–µ > 12 —á–∞—Å–æ–≤
                }

                sla_limit = sla_rules.get(order.status)

                if sla_limit and time_in_status > sla_limit:
                    alerts.append({
                        "order": order,
                        "time": time_in_status
                    })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            if alerts:
                for admin_id in Config.ADMIN_IDS:
                    try:
                        text = "‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ SLA</b>\n\n"
                        text += f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º SLA: {len(alerts)}\n\n"

                        for alert in alerts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            order = alert["order"]
                            hours = int(alert["time"].total_seconds() / 3600)

                            status_name = OrderStatus.get_status_name(order.status)
                            text += (
                                f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n"
                                f"   –°—Ç–∞—Ç—É—Å: {status_name}\n"
                                f"   –í —Å—Ç–∞—Ç—É—Å–µ: {hours} —á.\n\n"
                            )

                        if len(alerts) > 5:
                            text += f"<i>–ò –µ—â–µ {len(alerts) - 5} –∑–∞—è–≤–æ–∫...</i>"

                        await self.bot.send_message(
                            admin_id,
                            text,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"Failed to send SLA alert to admin {admin_id}: {e}")

            logger.info(f"SLA check completed. Found {len(alerts)} alerts")

        except Exception as e:
            logger.error(f"Error in check_order_sla: {e}")

    async def send_daily_summary(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.db.get_statistics()

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            all_orders = await self.db.get_all_orders()
            yesterday = datetime.utcnow() - timedelta(days=1)

            new_orders = [
                o for o in all_orders
                if o.created_at and o.created_at > yesterday
            ]

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
            active_orders = [
                o for o in all_orders
                if o.status not in [OrderStatus.CLOSED, OrderStatus.REFUSED]
            ]

            text = (
                "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n"
                f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n\n"
                f"<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {len(new_orders)}\n\n"
                f"<b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(active_orders)}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats.get('total_orders', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {stats.get('active_masters', 0)}\n\n"
            )

            # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
            orders_by_status = stats.get("orders_by_status", {})
            if orders_by_status:
                text += "<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
                for status in [OrderStatus.NEW, OrderStatus.ASSIGNED, OrderStatus.ACCEPTED, OrderStatus.ONSITE]:
                    if status in orders_by_status:
                        emoji = OrderStatus.get_status_emoji(status)
                        name = OrderStatus.get_status_name(status)
                        count = orders_by_status[status]
                        text += f"{emoji} {name}: {count}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in Config.ADMIN_IDS:
                try:
                    await self.bot.send_message(
                        admin_id,
                        text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to send daily summary to admin {admin_id}: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
            for dispatcher_id in Config.DISPATCHER_IDS:
                try:
                    await self.bot.send_message(
                        dispatcher_id,
                        text,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to send daily summary to dispatcher {dispatcher_id}: {e}")

            logger.info("Daily summary sent")

        except Exception as e:
            logger.error(f"Error in send_daily_summary: {e}")

    async def remind_assigned_orders(self):
        """
        –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º –æ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–∫–∞—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ASSIGNED —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç
            orders = await self.db.get_all_orders(status=OrderStatus.ASSIGNED)

            now = datetime.utcnow()
            remind_threshold = timedelta(minutes=15)

            for order in orders:
                if not order.updated_at:
                    continue

                time_assigned = now - order.updated_at

                logger.debug(f"Order #{order.id}: updated_at={order.updated_at}, now={now}, time_assigned={time_assigned}")

                if time_assigned > remind_threshold and order.assigned_master_id:
                    master = await self.db.get_master_by_id(order.assigned_master_id)

                    if master:
                        try:
                            minutes = int(time_assigned.total_seconds() / 60)

                            logger.info(f"Sending reminder for order #{order.id}: assigned {minutes} minutes ago")

                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                            # –ï—Å–ª–∏ –µ—Å—Ç—å work_chat_id - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
                            # –ò–Ω–∞—á–µ - –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É
                            target_chat_id = master.work_chat_id if master.work_chat_id else master.telegram_id

                            if master.work_chat_id:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä–∞
                                reminder_text = (
                                    f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                                    f"–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞ #{order.id}\n"
                                    f"üîß {order.equipment_type}\n"
                                    f"‚è± –ù–∞–∑–Ω–∞—á–µ–Ω–∞ {minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥\n\n"
                                )

                                # –£–ø–æ–º–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ
                                if master.username:
                                    reminder_text += f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: @{master.username}\n\n"
                                else:
                                    reminder_text += f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n\n"

                                reminder_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."

                                await self.bot.send_message(
                                    target_chat_id,
                                    reminder_text,
                                    parse_mode="HTML"
                                )

                                logger.info(f"Reminder sent to group {target_chat_id} for master {master.telegram_id}")
                            else:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                await self.bot.send_message(
                                    target_chat_id,
                                    f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                                    f"–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞ #{order.id}\n"
                                    f"üîß {order.equipment_type}\n"
                                    f"‚è± –ù–∞–∑–Ω–∞—á–µ–Ω–∞ {minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥\n\n"
                                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
                                    parse_mode="HTML"
                                )

                                logger.info(f"Reminder sent to DM {target_chat_id} for master {master.telegram_id}")

                        except Exception as e:
                            logger.error(f"Failed to send reminder to master {master.telegram_id}: {e}")

            logger.info(f"Reminders check completed. Found {len(orders)} assigned orders, threshold: 15 minutes")

        except Exception as e:
            logger.error(f"Error in remind_assigned_orders: {e}")

