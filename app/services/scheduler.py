"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
"""

import logging
from datetime import datetime, timedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from app.config import Config, OrderStatus
from app.database import Database
from app.utils import get_now, safe_send_message
from app.utils.helpers import MOSCOW_TZ


logger = logging.getLogger(__name__)


class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –±–æ—Ç–∞"""

    def __init__(self, bot, db: Database):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            db: Shared Database instance (–∏–∑–±–µ–≥–∞–µ–º race conditions)
        """
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.db = db

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        # –ë–î —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –≤ main(), –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SLA –∑–∞—è–≤–æ–∫
        self.scheduler.add_job(
            self.check_order_sla,
            trigger=IntervalTrigger(minutes=Config.SLA_CHECK_INTERVAL),
            id="check_order_sla",
            name="–ü—Ä–æ–≤–µ—Ä–∫–∞ SLA –∑–∞—è–≤–æ–∫",
            replace_existing=True,
        )

        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç (–≤ 8:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
        self.scheduler.add_job(
            self.send_daily_report,
            trigger=CronTrigger(hour=8, minute=0),
            id="daily_report",
            name="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç",
            replace_existing=True,
        )

        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00)
        self.scheduler.add_job(
            self.send_weekly_report,
            trigger=CronTrigger(day_of_week=0, hour=9, minute=0),
            id="weekly_report",
            name="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç",
            replace_existing=True,
        )

        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç (1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 10:00)
        self.scheduler.add_job(
            self.send_monthly_report,
            trigger=CronTrigger(day=1, hour=10, minute=0),
            id="monthly_report",
            name="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç",
            replace_existing=True,
        )

        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–≤ 9:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
        self.scheduler.add_job(
            self.send_daily_summary,
            trigger=CronTrigger(hour=9, minute=0),
            id="daily_summary",
            name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞",
            replace_existing=True,
        )

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–∫–∞—Ö
        self.scheduler.add_job(
            self.remind_assigned_orders,
            trigger=IntervalTrigger(minutes=Config.REMINDER_INTERVAL),
            id="remind_assigned_orders",
            name="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–∫–∞—Ö",
            replace_existing=True,
        )

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö
        self.scheduler.add_job(
            self.remind_unassigned_orders,
            trigger=IntervalTrigger(minutes=Config.REMINDER_INTERVAL),
            id="remind_unassigned_orders",
            name="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö",
            replace_existing=True,
        )

        # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π, 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 02:00)
        self.scheduler.add_job(
            self.archive_master_reports,
            trigger=CronTrigger(day=1, hour=2, minute=0),
            id="archive_master_reports",
            name="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–æ–≤",
            replace_existing=True,
        )

        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown(wait=True)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∂–æ–±
        # –ë–î –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ main(), –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–¥–µ—Å—å
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _send_scheduled_time_reminder(self, order, scheduled_datetime: datetime):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞ –¥–æ –≤–∏–∑–∏—Ç–∞

        Args:
            order: –ó–∞—è–≤–∫–∞
            scheduled_datetime: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
            master = await self.db.get_master_by_id(order.assigned_master_id)
            if not master:
                return

            reminder_text = (
                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n"
                f"üîß {order.equipment_type}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.client_address}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.client_phone}\n\n"
                f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {scheduled_datetime.strftime('%H:%M')}\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤—ã–µ–∑–¥—É!"
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            target_chat_id = master.work_chat_id if master.work_chat_id else master.telegram_id

            await safe_send_message(
                self.bot, target_chat_id, reminder_text, parse_mode="HTML", max_attempts=3
            )

            logger.info(
                f"2-hour reminder sent for order #{order.id} to {'group' if master.work_chat_id else 'DM'} {target_chat_id}"
            )

        except Exception as e:
            logger.error(f"Failed to send scheduled time reminder for order #{order.id}: {e}")

    def _check_scheduled_time_alert(self, order, now: datetime) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –≤–∏–∑–∏—Ç–∞.

        Args:
            order: –ó–∞—è–≤–∫–∞
            now: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

        Returns:
            True –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        """
        import re
        from datetime import datetime, timedelta

        scheduled_time = order.scheduled_time.lower().strip()

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        time_pattern = r"(\d{1,2}):(\d{2})"
        time_match = re.search(time_pattern, scheduled_time)

        if not time_match:
            return False  # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è

        hour = int(time_match.group(1))
        minute = int(time_match.group(2))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
        target_date = now.date()

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã
        if "–∑–∞–≤—Ç—Ä–∞" in scheduled_time:
            target_date = (now + timedelta(days=1)).date()
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in scheduled_time:
            target_date = (now + timedelta(days=2)).date()
        elif "—á–µ—Ä–µ–∑" in scheduled_time and "–¥–Ω" in scheduled_time:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            days_match = re.search(r"—á–µ—Ä–µ–∑\s+(\d+)\s+–¥–Ω", scheduled_time)
            if days_match:
                days = int(days_match.group(1))
                target_date = (now + timedelta(days=days)).date()

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        date_pattern = r"(\d{1,2})\.(\d{1,2})\.(\d{4})"
        date_match = re.search(date_pattern, scheduled_time)
        if date_match:
            day = int(date_match.group(1))
            month = int(date_match.group(2))
            year = int(date_match.group(3))
            try:
                target_date = datetime(year, month, day).date()
            except ValueError:
                pass  # –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞

        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞
        try:
            scheduled_datetime = datetime.combine(
                target_date, datetime.min.time().replace(hour=hour, minute=minute)
            )
            # –î–æ–±–∞–≤–ª—è–µ–º timezone –∫–∞–∫ —É now
            scheduled_datetime = scheduled_datetime.replace(tzinfo=now.tzinfo)
        except ValueError:
            return False  # –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if scheduled_datetime <= now:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ –º–µ–Ω–µ–µ 2 —á–∞—Å–æ–≤ –¥–æ –≤–∏–∑–∏—Ç–∞
        time_until_visit = scheduled_datetime - now

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç 1:30 –¥–æ 2:30 —á–∞—Å–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if timedelta(hours=1, minutes=30) <= time_until_visit <= timedelta(hours=2, minutes=30):
            logger.info(
                f"Sending 2-hour reminder for rescheduled order #{order.id}, scheduled at {scheduled_datetime}"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            import asyncio

            try:
                asyncio.create_task(self._send_scheduled_time_reminder(order, scheduled_datetime))
            except Exception as e:
                logger.error(f"Failed to create reminder task: {e}")
            return True

        # –ï—Å–ª–∏ –¥–æ –≤–∏–∑–∏—Ç–∞ –±–æ–ª—å—à–µ 2:30 —á–∞—Å–æ–≤ - –∂–¥–µ–º
        if time_until_visit > timedelta(hours=2, minutes=30):
            return True  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É SLA

        return False

    async def check_order_sla(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ SLA –∑–∞—è–≤–æ–∫
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞—è–≤–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è
        –≤ –æ–¥–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
            orders = await self.db.get_all_orders()

            now = get_now()
            alerts = []

            for order in orders:
                if order.status in [OrderStatus.CLOSED, OrderStatus.REFUSED]:
                    continue

                if not order.updated_at:
                    continue

                time_in_status = now - order.updated_at

                # SLA –ø—Ä–∞–≤–∏–ª–∞
                sla_rules = {
                    OrderStatus.NEW: timedelta(hours=2),  # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ > 2 —á–∞—Å–æ–≤
                    OrderStatus.ASSIGNED: timedelta(hours=4),  # –ù–∞–∑–Ω–∞—á–µ–Ω–∞ > 4 —á–∞—Å–æ–≤
                    OrderStatus.ACCEPTED: timedelta(hours=8),  # –ü—Ä–∏–Ω—è—Ç–∞ > 8 —á–∞—Å–æ–≤
                    OrderStatus.ONSITE: timedelta(hours=12),  # –ù–∞ –æ–±—ä–µ–∫—Ç–µ > 12 —á–∞—Å–æ–≤
                }

                sla_limit = sla_rules.get(order.status)

                # –î–ª—è –∑–∞—è–≤–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–±—ã—Ç–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                # –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ ASSIGNED –∏ ACCEPTED
                if order.scheduled_time and order.status in [
                    OrderStatus.ASSIGNED,
                    OrderStatus.ACCEPTED,
                ]:
                    scheduled_alert_sent = self._check_scheduled_time_alert(order, now)
                    if scheduled_alert_sent:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É SLA –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏

                if sla_limit and time_in_status > sla_limit:
                    alerts.append({"order": order, "time": time_in_status})

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            if alerts:
                for admin_id in Config.ADMIN_IDS:
                    text = "‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ SLA</b>\n\n"
                    text += f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º SLA: {len(alerts)}\n\n"

                    for alert in alerts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        order = alert["order"]
                        hours = int(alert["time"].total_seconds() / 3600)

                        status_name = OrderStatus.get_status_name(order.status)
                        text += (
                            f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n"
                            f"   –°—Ç–∞—Ç—É—Å: {status_name}\n"
                            f"   –í —Å—Ç–∞—Ç—É—Å–µ: {hours} —á.\n\n"
                        )

                    if len(alerts) > 5:
                        text += f"<i>–ò –µ—â–µ {len(alerts) - 5} –∑–∞—è–≤–æ–∫...</i>"

                    await safe_send_message(
                        self.bot, admin_id, text, parse_mode="HTML", max_attempts=5
                    )

            logger.info(f"SLA check completed. Found {len(alerts)} alerts")

        except Exception as e:
            logger.error(f"Error in check_order_sla: {e}")

    async def send_daily_summary(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.db.get_statistics()

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            all_orders = await self.db.get_all_orders()
            yesterday = get_now() - timedelta(days=1)

            new_orders = [o for o in all_orders if o.created_at and o.created_at > yesterday]

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
            active_orders = [
                o for o in all_orders if o.status not in [OrderStatus.CLOSED, OrderStatus.REFUSED]
            ]

            text = (
                "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n"
                f"üìÖ {get_now().strftime('%d.%m.%Y')}\n\n"
                f"<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {len(new_orders)}\n\n"
                f"<b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(active_orders)}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats.get('total_orders', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: {stats.get('active_masters', 0)}\n\n"
            )

            # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
            orders_by_status = stats.get("orders_by_status", {})
            if orders_by_status:
                text += "<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
                for status in [
                    OrderStatus.NEW,
                    OrderStatus.ASSIGNED,
                    OrderStatus.ACCEPTED,
                    OrderStatus.ONSITE,
                ]:
                    if status in orders_by_status:
                        emoji = OrderStatus.get_status_emoji(status)
                        name = OrderStatus.get_status_name(status)
                        count = orders_by_status[status]
                        text += f"{emoji} {name}: {count}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in Config.ADMIN_IDS:
                await safe_send_message(self.bot, admin_id, text, parse_mode="HTML", max_attempts=5)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
            for dispatcher_id in Config.DISPATCHER_IDS:
                await safe_send_message(
                    self.bot, dispatcher_id, text, parse_mode="HTML", max_attempts=5
                )

            logger.info("Daily summary sent")

        except Exception as e:
            logger.error(f"Error in send_daily_summary: {e}")

    async def remind_assigned_orders(self):
        """
        –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º –æ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–∫–∞—Ö
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ASSIGNED —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç
            orders = await self.db.get_all_orders(status=OrderStatus.ASSIGNED)

            now = get_now()
            # –î–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ 30 –º–∏–Ω—É—Ç
            base_remind_threshold = timedelta(minutes=15)

            for order in orders:
                if not order.updated_at:
                    continue

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º naive datetime –≤ aware –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                order_updated_at = order.updated_at
                if order_updated_at.tzinfo is None:
                    order_updated_at = order_updated_at.replace(tzinfo=MOSCOW_TZ)

                time_assigned = now - order_updated_at

                # –î–ª—è –∑–∞—è–≤–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–±—ã—Ç–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if order.scheduled_time:
                    scheduled_alert_sent = self._check_scheduled_time_alert(order, now)
                    if scheduled_alert_sent:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                remind_threshold = base_remind_threshold

                logger.debug(
                    f"Order #{order.id}: updated_at={order.updated_at}, now={now}, time_assigned={time_assigned}, "
                    f"rescheduled={order.rescheduled_count}, threshold={remind_threshold}"
                )

                if time_assigned > remind_threshold and order.assigned_master_id:
                    master = await self.db.get_master_by_id(order.assigned_master_id)

                    if master:
                        minutes = int(time_assigned.total_seconds() / 60)

                        logger.info(
                            f"Sending reminder for order #{order.id}: assigned {minutes} minutes ago"
                        )

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        # –ï—Å–ª–∏ –µ—Å—Ç—å work_chat_id - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
                        # –ò–Ω–∞—á–µ - –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É
                        target_chat_id = (
                            master.work_chat_id if master.work_chat_id else master.telegram_id
                        )

                        if master.work_chat_id:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä–∞
                            reminder_text = (
                                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                                f"–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞ #{order.id}\n"
                                f"üîß {order.equipment_type}\n"
                                f"‚è± –ù–∞–∑–Ω–∞—á–µ–Ω–∞ {minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥\n\n"
                            )

                            # –£–ø–æ–º–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ (ORM: —á–µ—Ä–µ–∑ master.user)
                            master_username = master.user.username if hasattr(master, 'user') and master.user else None
                            if master_username:
                                reminder_text += f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: @{master_username}\n\n"
                            else:
                                reminder_text += f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_display_name()}\n\n"

                            reminder_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."

                            result = await safe_send_message(
                                self.bot,
                                target_chat_id,
                                reminder_text,
                                parse_mode="HTML",
                                max_attempts=5,
                            )

                            if result:
                                logger.info(
                                    f"Reminder sent to group {target_chat_id} for master {master.telegram_id}"
                                )
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                            result = await safe_send_message(
                                self.bot,
                                target_chat_id,
                                f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                                f"–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞ #{order.id}\n"
                                f"üîß {order.equipment_type}\n"
                                f"‚è± –ù–∞–∑–Ω–∞—á–µ–Ω–∞ {minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥\n\n"
                                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
                                parse_mode="HTML",
                                max_attempts=5,
                            )

                            if result:
                                logger.info(
                                    f"Reminder sent to DM {target_chat_id} for master {master.telegram_id}"
                                )

            logger.info(
                f"Reminders check completed. Found {len(orders)} assigned orders, threshold: 15 minutes"
            )

        except Exception as e:
            logger.error(f"Error in remind_assigned_orders: {e}")

    async def remind_unassigned_orders(self):
        """
        –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö (—Å—Ç–∞—Ç—É—Å NEW —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç)
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW
            orders = await self.db.get_all_orders(status=OrderStatus.NEW)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_now() –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            now = get_now()
            remind_threshold = timedelta(minutes=15)
            unassigned_alerts = []

            for order in orders:
                if not order.created_at:
                    continue

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º naive datetime –≤ aware –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                order_created_at = order.created_at
                if order_created_at.tzinfo is None:
                    order_created_at = order_created_at.replace(tzinfo=MOSCOW_TZ)

                time_unassigned = now - order_created_at

                if time_unassigned > remind_threshold:
                    unassigned_alerts.append({"order": order, "time": time_unassigned})

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            if unassigned_alerts:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
                admins_and_dispatchers = await self.db.get_admins_and_dispatchers()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                text = "‚ö†Ô∏è <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏!</b>\n\n"
                text += f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –±–µ–∑ –º–∞—Å—Ç–µ—Ä–∞: {len(unassigned_alerts)}\n\n"

                for alert in unassigned_alerts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    order = alert["order"]
                    minutes = int(alert["time"].total_seconds() / 60)

                    text += (
                        f"üìã <b>–ó–∞—è–≤–∫–∞ #{order.id}</b>\n"
                        f"   üîß {order.equipment_type}\n"
                        f"   üë§ {order.client_name}\n"
                        f"   ‚è± –°–æ–∑–¥–∞–Ω–∞ {minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥\n\n"
                    )

                if len(unassigned_alerts) > 5:
                    text += f"<i>–ò –µ—â–µ {len(unassigned_alerts) - 5} –∑–∞—è–≤–æ–∫...</i>\n\n"

                text += "‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤!</b>"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º
                for user in admins_and_dispatchers:
                    try:
                        await safe_send_message(
                            self.bot, user.telegram_id, text, parse_mode="HTML", max_attempts=3
                        )
                        logger.info(f"Unassigned order reminder sent to {user.telegram_id}")
                    except Exception as e:
                        logger.error(f"Failed to send reminder to {user.telegram_id}: {e}")

                logger.info(
                    f"Unassigned orders check completed. Found {len(unassigned_alerts)} unassigned orders older than 15 minutes"
                )
            else:
                logger.debug("No unassigned orders older than 15 minutes")

        except Exception as e:
            logger.error(f"Error in remind_unassigned_orders: {e}")

    # ==================== –û–¢–ß–ï–¢–´ ====================

    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            from app.services.reports_notifier import ReportsNotifier

            notifier = ReportsNotifier(self.bot)
            await notifier.send_daily_report()

            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def send_weekly_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            from app.services.reports_notifier import ReportsNotifier

            notifier = ReportsNotifier(self.bot)
            await notifier.send_weekly_report()

            logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def send_monthly_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            from app.services.reports_notifier import ReportsNotifier

            notifier = ReportsNotifier(self.bot)
            await notifier.send_monthly_report()

            logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def archive_master_reports(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ (—Ä–∞–∑ –≤ 30 –¥–Ω–µ–π)"""
        try:
            from datetime import timedelta
            from app.services.master_reports import MasterReportsService
            
            logger.info("–ù–∞—á–∞–ª–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
            masters = await self.db.get_all_masters(only_approved=True)
            
            if not masters:
                logger.info("–ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤")
                return
            
            reports_service = MasterReportsService(self.db)
            
            # –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            now = get_now()
            period_end = now
            period_start = now - timedelta(days=30)
            
            archived_count = 0
            failed_count = 0
            
            for master in masters:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –∞—Ä—Ö–∏–≤
                    await reports_service.generate_master_report_excel(
                        master_id=master.id,
                        save_to_archive=True,
                        period_start=period_start,
                        period_end=period_end
                    )
                    
                    archived_count += 1
                    logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master.id} ({master.get_display_name()}) –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
                    notification = (
                        f"üìö <b>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
                        f"–°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥:\n"
                        f"üìÖ {period_start.strftime('%d.%m.%Y')} - {period_end.strftime('%d.%m.%Y')}\n\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑:\n"
                        f"üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Üí üìö –ê—Ä—Ö–∏–≤ –æ—Ç—á–µ—Ç–æ–≤"
                    )
                    
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —É –º–∞—Å—Ç–µ—Ä–∞ –µ—Å—Ç—å telegram_id)
                    if hasattr(master, 'telegram_id') and master.telegram_id:
                        try:
                            await safe_send_message(
                                self.bot,
                                master.telegram_id,
                                notification,
                                parse_mode="HTML",
                                max_attempts=2
                            )
                        except Exception as notify_error:
                            logger.warning(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {master.id}: {notify_error}"
                            )
                    
                except Exception as master_error:
                    failed_count += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master.id}: {master_error}")
            
            logger.info(
                f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. "
                f"–£—Å–ø–µ—à–Ω–æ: {archived_count}, –û—à–∏–±–æ–∫: {failed_count}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            try:
                admins = await self.db.get_users_by_role("ADMIN")
                
                admin_notification = (
                    f"üìä <b>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–æ–≤</b>\n\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {archived_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_start.strftime('%d.%m.%Y')} - {period_end.strftime('%d.%m.%Y')}"
                )
                
                for admin in admins:
                    try:
                        await safe_send_message(
                            self.bot,
                            admin.telegram_id,
                            admin_notification,
                            parse_mode="HTML",
                            max_attempts=2
                        )
                    except Exception:
                        pass
                        
            except Exception as admin_notify_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º: {admin_notify_error}")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
