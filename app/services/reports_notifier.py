"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram
"""

import logging

from aiogram import Bot
from aiogram.types import FSInputFile

from app.database import Database


logger = logging.getLogger(__name__)


class ReportsNotifier:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()

    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            from app.services.reports_service import ReportsService

            reports_service = ReportsService()
            report = await reports_service.generate_daily_report()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            text = reports_service.format_report_to_text(report)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
            excel_path = await reports_service.save_report_to_excel(report)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
            recipients = await self._get_report_recipients()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            for recipient_id in recipients:
                try:
                    await self.bot.send_message(chat_id=recipient_id, text=text, parse_mode="HTML")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                    document = FSInputFile(excel_path)
                    await self.bot.send_document(
                        chat_id=recipient_id,
                        document=document,
                        caption=f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {report['period']}",
                    )

                    logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}"
                    )

            logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def send_weekly_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            from app.services.reports_service import ReportsService

            reports_service = ReportsService()
            report = await reports_service.generate_weekly_report()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            text = reports_service.format_report_to_text(report)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
            excel_path = await reports_service.save_report_to_excel(report)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
            recipients = await self._get_report_recipients()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            for recipient_id in recipients:
                try:
                    await self.bot.send_message(chat_id=recipient_id, text=text, parse_mode="HTML")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                    document = FSInputFile(excel_path)
                    await self.bot.send_document(
                        chat_id=recipient_id,
                        document=document,
                        caption=f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {report['period']}",
                    )

                    logger.info(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}"
                    )

            logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def send_monthly_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            from app.services.reports_service import ReportsService

            reports_service = ReportsService()
            report = await reports_service.generate_monthly_report()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            text = reports_service.format_report_to_text(report)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
            excel_path = await reports_service.save_report_to_excel(report)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
            recipients = await self._get_report_recipients()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            for recipient_id in recipients:
                try:
                    await self.bot.send_message(chat_id=recipient_id, text=text, parse_mode="HTML")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                    document = FSInputFile(excel_path)
                    await self.bot.send_document(
                        chat_id=recipient_id,
                        document=document,
                        caption=f"üìä –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {report['period']}",
                    )

                    logger.info(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}"
                    )

            logger.info("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def _get_report_recipients(self) -> list[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ—Ç—á–µ—Ç–æ–≤ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ã)"""
        await self.db.connect()

        try:
            cursor = await self.db.connection.execute(
                """
                SELECT telegram_id
                FROM users
                WHERE role LIKE '%ADMIN%' OR role LIKE '%DISPATCHER%'
            """
            )

            rows = await cursor.fetchall()
            recipients = [row["telegram_id"] for row in rows]

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ—Ç—á–µ—Ç–æ–≤")
            return recipients

        finally:
            await self.db.disconnect()

    async def send_custom_report(
        self, start_date: str, end_date: str, recipients: list[int] = None
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            from app.services.reports_service import ReportsService

            reports_service = ReportsService()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–Ω–µ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç)
            report = await reports_service.generate_daily_report()
            report["period"] = f"{start_date} - {end_date}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            text = reports_service.format_report_to_text(report)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
            file_path = await reports_service.save_report_to_file(
                report, f"custom_report_{start_date}_{end_date}.txt"
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–ª–∏ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
            if not recipients:
                recipients = await self._get_report_recipients()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            for recipient_id in recipients:
                try:
                    await self.bot.send_message(chat_id=recipient_id, text=text, parse_mode="HTML")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    document = FSInputFile(file_path)
                    await self.bot.send_document(
                        chat_id=recipient_id,
                        document=document,
                        caption=f"üìä –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {start_date} - {end_date}",
                    )

                    logger.info(f"–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}"
                    )

            logger.info("–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
