"""
–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
"""

import logging
from datetime import UTC, datetime, timedelta
from io import BytesIO

from aiogram.types import BufferedInputFile
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font, PatternFill

from app.config import OrderStatus
from app.database import Database
from app.utils import format_date, format_datetime


logger = logging.getLogger(__name__)


class ReportsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""

    def __init__(self, db: Database):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        Args:
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = db

    async def generate_masters_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º

        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        masters = await self.db.get_all_masters(only_approved=True)

        text = "üìä <b>–û—Ç—á–µ—Ç –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º</b>\n\n"

        if not masters:
            return text + "–ú–∞—Å—Ç–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç."

        text += f"<b>–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤:</b> {len(masters)}\n\n"

        for master in masters:
            orders = await self.db.get_orders_by_master(master.id, exclude_closed=False)
            total = len(orders)
            completed = len([o for o in orders if o.status == OrderStatus.CLOSED])
            active = len(
                [o for o in orders if o.status not in [OrderStatus.CLOSED, OrderStatus.REFUSED]]
            )

            status = "üü¢" if master.is_active else "üî¥"

            text += (
                f"{status} <b>{master.get_display_name()}</b>\n"
                f"   üîß {master.specialization}\n"
                f"   üìä –ó–∞—è–≤–æ–∫: {total} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {active})\n\n"
            )

        return text

    async def generate_statuses_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞—è–≤–æ–∫

        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        stats = await self.db.get_statistics()
        orders_by_status = stats.get("orders_by_status", {})
        total = stats.get("total_orders", 0)

        text = (
            "üìä <b>–û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞—è–≤–æ–∫</b>\n\n"
            f"<b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {total}\n\n"
            "<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        )

        for status in OrderStatus.all_statuses():
            count = orders_by_status.get(status, 0)
            emoji = OrderStatus.get_status_emoji(status)
            name = OrderStatus.get_status_name(status)
            percentage = (count / total * 100) if total > 0 else 0

            text += f"{emoji} {name}: {count} ({percentage:.1f}%)\n"

        return text

    async def generate_equipment_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏

        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        orders = await self.db.get_all_orders()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
        by_equipment = {}
        for order in orders:
            by_equipment[order.equipment_type] = by_equipment.get(order.equipment_type, 0) + 1

        text = (
            "üìä <b>–û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏</b>\n\n"
            f"<b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {len(orders)}\n\n"
            "<b>–ü–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏:</b>\n"
        )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_equipment = sorted(by_equipment.items(), key=lambda x: x[1], reverse=True)

        for equipment, count in sorted_equipment:
            percentage = (count / len(orders) * 100) if len(orders) > 0 else 0
            text += f"üîß {equipment}: {count} ({percentage:.1f}%)\n"

        return text

    async def generate_period_report(self, start_date: datetime, end_date: datetime) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥

        Args:
            start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞

        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        all_orders = await self.db.get_all_orders()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
        orders = [o for o in all_orders if o.created_at and start_date <= o.created_at <= end_date]

        text = (
            f"üìä <b>–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n"
            f"üìÖ {format_date(start_date)} - {format_date(end_date)}\n\n"
            f"<b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {len(orders)}\n\n"
        )

        if not orders:
            return text + "–ó–∞—è–≤–æ–∫ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç."

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        by_status = {}
        for order in orders:
            by_status[order.status] = by_status.get(order.status, 0) + 1

        text += "<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        for status in OrderStatus.all_statuses():
            if status in by_status:
                emoji = OrderStatus.get_status_emoji(status)
                name = OrderStatus.get_status_name(status)
                text += f"{emoji} {name}: {by_status[status]}\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º
        by_master = {}
        for order in orders:
            if order.assigned_master_id:
                by_master[order.master_name] = by_master.get(order.master_name, 0) + 1

        if by_master:
            text += "\n<b>–ü–æ –º–∞—Å—Ç–µ—Ä–∞–º:</b>\n"
            for master, count in sorted(by_master.items(), key=lambda x: x[1], reverse=True):
                text += f"üë®‚Äçüîß {master}: {count}\n"

        return text

    async def generate_excel_report(
        self,
        report_type: str = "all",
        start_date: datetime | None = None,
        end_date: datetime | None = None,
    ) -> BufferedInputFile:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel

        Args:
            report_type: –¢–∏–ø –æ—Ç—á–µ—Ç–∞ (all, masters, statuses, equipment)
            start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∞)
            end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∞)

        Returns:
            –§–∞–π–ª Excel
        """
        wb = Workbook()
        ws = wb.active
        ws.title = "–û—Ç—á–µ—Ç"

        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, size=12)
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")

        if report_type == "masters":
            await self._fill_masters_sheet(ws, header_font, header_fill, header_alignment)
        elif report_type == "statuses":
            await self._fill_statuses_sheet(ws, header_font, header_fill, header_alignment)
        elif report_type == "equipment":
            await self._fill_equipment_sheet(ws, header_font, header_fill, header_alignment)
        else:  # all
            await self._fill_all_orders_sheet(
                ws, header_font, header_fill, header_alignment, start_date, end_date
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        excel_file = BytesIO()
        wb.save(excel_file)
        excel_file.seek(0)

        filename = f"report_{report_type}_{datetime.now(UTC).strftime('%Y%m%d_%H%M%S')}.xlsx"

        return BufferedInputFile(excel_file.read(), filename=filename)

    async def _fill_masters_sheet(self, ws, header_font, header_fill, header_alignment):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º"""
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            "ID",
            "–ò–º—è",
            "–¢–µ–ª–µ—Ñ–æ–Ω",
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
            "–°—Ç–∞—Ç—É—Å",
            "–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö",
        ]
        ws.append(headers)

        for cell in ws[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment

        # –î–∞–Ω–Ω—ã–µ
        masters = await self.db.get_all_masters(only_approved=True)

        for master in masters:
            orders = await self.db.get_orders_by_master(master.id, exclude_closed=False)
            total = len(orders)
            completed = len([o for o in orders if o.status == OrderStatus.CLOSED])
            active = len(
                [o for o in orders if o.status not in [OrderStatus.CLOSED, OrderStatus.REFUSED]]
            )

            ws.append(
                [
                    master.id,
                    master.get_display_name(),
                    master.phone,
                    master.specialization,
                    "–ê–∫—Ç–∏–≤–µ–Ω" if master.is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
                    total,
                    completed,
                    active,
                ]
            )

        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column = list(column)
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(cell.value)
                except Exception:
                    pass
            adjusted_width = max_length + 2
            ws.column_dimensions[column[0].column_letter].width = adjusted_width

    async def _fill_statuses_sheet(self, ws, header_font, header_fill, header_alignment):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
        headers = ["–°—Ç–∞—Ç—É—Å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç"]
        ws.append(headers)

        for cell in ws[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment

        stats = await self.db.get_statistics()
        orders_by_status = stats.get("orders_by_status", {})
        total = stats.get("total_orders", 0)

        for status in OrderStatus.all_statuses():
            count = orders_by_status.get(status, 0)
            percentage = (count / total * 100) if total > 0 else 0

            ws.append([OrderStatus.get_status_name(status), count, f"{percentage:.1f}%"])

        for column in ws.columns:
            max_length = 0
            column = list(column)
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(cell.value)
                except Exception:
                    pass
            adjusted_width = max_length + 2
            ws.column_dimensions[column[0].column_letter].width = adjusted_width

    async def _fill_equipment_sheet(self, ws, header_font, header_fill, header_alignment):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Ö–Ω–∏–∫–∏"""
        headers = ["–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç"]
        ws.append(headers)

        for cell in ws[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment

        orders = await self.db.get_all_orders()

        by_equipment = {}
        for order in orders:
            by_equipment[order.equipment_type] = by_equipment.get(order.equipment_type, 0) + 1

        total = len(orders)
        sorted_equipment = sorted(by_equipment.items(), key=lambda x: x[1], reverse=True)

        for equipment, count in sorted_equipment:
            percentage = (count / total * 100) if total > 0 else 0
            ws.append([equipment, count, f"{percentage:.1f}%"])

        for column in ws.columns:
            max_length = 0
            column = list(column)
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(cell.value)
                except Exception:
                    pass
            adjusted_width = max_length + 2
            ws.column_dimensions[column[0].column_letter].width = adjusted_width

    async def _fill_all_orders_sheet(
        self, ws, header_font, header_fill, header_alignment, start_date, end_date
    ):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –∑–∞—è–≤–∫–∞–º–∏"""
        headers = [
            "ID",
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
            "–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏",
            "–û–ø–∏—Å–∞–Ω–∏–µ",
            "–ö–ª–∏–µ–Ω—Ç",
            "–¢–µ–ª–µ—Ñ–æ–Ω",
            "–ê–¥—Ä–µ—Å",
            "–°—Ç–∞—Ç—É—Å",
            "–ú–∞—Å—Ç–µ—Ä",
            "–î–∏—Å–ø–µ—Ç—á–µ—Ä",
        ]
        ws.append(headers)

        for cell in ws[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment

        all_orders = await self.db.get_all_orders()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if start_date and end_date:
            orders = [
                o for o in all_orders if o.created_at and start_date <= o.created_at <= end_date
            ]
        else:
            orders = all_orders

        for order in orders:
            ws.append(
                [
                    order.id,
                    format_datetime(order.created_at) if order.created_at else "",
                    order.equipment_type,
                    order.description,
                    order.client_name,
                    order.client_phone,
                    order.client_address,
                    OrderStatus.get_status_name(order.status),
                    order.master_name or "",
                    order.dispatcher_name or "",
                ]
            )

        for column in ws.columns:
            max_length = 0
            column = list(column)
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(cell.value)
                except Exception:
                    pass
            adjusted_width = min((max_length + 2), 50)
            ws.column_dimensions[column[0].column_letter].width = adjusted_width

    @staticmethod
    def get_period_dates(period: str) -> tuple[datetime, datetime]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞

        Args:
            period: –ü–µ—Ä–∏–æ–¥ (today, yesterday, week, month, year)

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (start_date, end_date)
        """
        now = datetime.now()

        if period == "today":
            start = now.replace(hour=0, minute=0, second=0, microsecond=0)
            end = now.replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period == "yesterday":
            yesterday = now - timedelta(days=1)
            start = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
            end = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period == "week":
            start = now - timedelta(days=7)
            end = now
        elif period == "month":
            start = now - timedelta(days=30)
            end = now
        elif period == "year":
            start = now - timedelta(days=365)
            end = now
        else:
            start = now - timedelta(days=30)
            end = now

        return start, end
