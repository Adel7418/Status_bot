"""
–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
"""

import logging
import os
from datetime import UTC, datetime
from pathlib import Path

import aiofiles
from aiogram.types import BufferedInputFile
from openpyxl import Workbook
from openpyxl.styles import Alignment, Border, Font, PatternFill, Side
from openpyxl.utils import get_column_letter

from app.config import OrderStatus
from app.database import Database
from app.utils import format_datetime


logger = logging.getLogger(__name__)


class MasterReportsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–æ–≤"""

    def __init__(self, db: Database):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        Args:
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.db = db
        self.reports_dir = Path("reports/masters")
        self.reports_dir.mkdir(parents=True, exist_ok=True)

    async def generate_master_report_excel(
        self,
        master_id: int,
        save_to_archive: bool = False,
        period_start: datetime | None = None,
        period_end: datetime | None = None,
    ) -> BufferedInputFile:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å –¥–≤—É–º—è –ª–∏—Å—Ç–∞–º–∏

        –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ.

        Args:
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
            save_to_archive: –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—É—é –∫–æ–ø–∏—é —Å timestamp
            period_start: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (–¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤)
            period_end: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (–¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤)

        Returns:
            BufferedInputFile: Excel —Ñ–∞–π–ª
        """
        master = await self.db.get_master_by_id(master_id)
        if not master:
            raise ValueError(f"–ú–∞—Å—Ç–µ—Ä —Å ID {master_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        all_orders = await self.db.get_orders_by_master(master_id, exclude_closed=False)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if period_start and period_end:
            all_orders = [o for o in all_orders if period_start <= o.created_at <= period_end]

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        active_orders = [
            o for o in all_orders if o.status not in [OrderStatus.CLOSED, OrderStatus.REFUSED]
        ]
        completed_orders = [o for o in all_orders if o.status == OrderStatus.CLOSED]

        # –°–æ–∑–¥–∞–µ–º Excel workbook
        wb = Workbook()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Å—Ç
        if "Sheet" in wb.sheetnames:
            del wb["Sheet"]

        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
        ws_active = wb.create_sheet("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", 0)
        ws_completed = wb.create_sheet("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", 1)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç—ã
        await self._fill_active_orders_sheet(ws_active, active_orders, master)
        await self._fill_completed_orders_sheet(ws_completed, completed_orders, master)

        # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ timestamp) - –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        filename = f"master_{master_id}_report.xlsx"
        file_path = self.reports_dir / filename

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
        wb.save(file_path)
        logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {filename}")

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∞—Ä—Ö–∏–≤–Ω–∞—è –∫–æ–ø–∏—è (–¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤)
        if save_to_archive:
            timestamp = datetime.now(UTC).strftime("%Y%m%d_%H%M%S")
            archive_filename = f"master_{master_id}_report_{timestamp}.xlsx"
            archive_path = self.reports_dir / archive_filename
            wb.save(archive_path)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_revenue = sum(o.total_amount or 0 for o in completed_orders)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            archive_data = {
                "master_id": master_id,
                "period_start": period_start or all_orders[-1].created_at
                if all_orders
                else datetime.now(UTC),
                "period_end": period_end or datetime.now(UTC),
                "file_path": str(archive_path),
                "file_name": archive_filename,
                "file_size": os.path.getsize(archive_path),
                "total_orders": len(all_orders),
                "active_orders": len(active_orders),
                "completed_orders": len(completed_orders),
                "total_revenue": total_revenue,
                "created_at": datetime.now(UTC),
                "notes": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥",
            }

            await self.db.save_master_report_archive(archive_data)

            logger.info(
                f"–ê—Ä—Ö–∏–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {archive_filename}"
            )

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        async with aiofiles.open(file_path, "rb") as f:
            file_data = await f.read()

        return BufferedInputFile(file_data, filename=filename)

    async def _fill_active_orders_sheet(self, ws, orders, master):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""

        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, size=11, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        border = Border(
            left=Side(style="thin"),
            right=Side(style="thin"),
            top=Side(style="thin"),
            bottom=Side(style="thin"),
        )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws.merge_cells("A1:H1")
        ws["A1"] = f"–ê–ö–¢–ò–í–ù–´–ï –ó–ê–Ø–í–ö–ò - {master.get_display_name()}"
        ws["A1"].font = Font(bold=True, size=14)
        ws["A1"].alignment = Alignment(horizontal="center", vertical="center")

        # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ws.merge_cells("A2:H2")
        ws["A2"] = f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now(UTC).strftime('%d.%m.%Y %H:%M')} (UTC)"
        ws["A2"].alignment = Alignment(horizontal="center")
        ws["A2"].font = Font(italic=True, color="666666")

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = [
            "‚Ññ –ó–∞—è–≤–∫–∏",
            "–°—Ç–∞—Ç—É—Å",
            "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "–ö–ª–∏–µ–Ω—Ç",
            "–¢–µ–ª–µ—Ñ–æ–Ω",
            "–ê–¥—Ä–µ—Å",
            "–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è",
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
        ]

        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=4, column=col_num)
            cell.value = header
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
            cell.border = border

        # –î–∞–Ω–Ω—ã–µ
        row_num = 5
        for order in orders:
            ws.cell(row=row_num, column=1, value=order.id).border = border
            ws.cell(
                row=row_num, column=2, value=OrderStatus.get_status_name(order.status)
            ).border = border
            ws.cell(row=row_num, column=3, value=order.equipment_type or "").border = border
            ws.cell(row=row_num, column=4, value=order.client_name or "").border = border
            ws.cell(row=row_num, column=5, value=order.client_phone or "").border = border
            ws.cell(row=row_num, column=6, value=order.client_address or "").border = border
            ws.cell(row=row_num, column=7, value=order.scheduled_time or "").border = border
            ws.cell(
                row=row_num,
                column=8,
                value=format_datetime(order.created_at) if order.created_at else "",
            ).border = border
            row_num += 1

        # –ò—Ç–æ–≥–æ
        ws.cell(row=row_num + 1, column=1, value="–ò–¢–û–ì–û:").font = Font(bold=True)
        ws.cell(row=row_num + 1, column=2, value=f"{len(orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫").font = Font(
            bold=True
        )

        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col_num in range(1, 9):
            ws.column_dimensions[get_column_letter(col_num)].width = 15
        ws.column_dimensions["C"].width = 20  # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        ws.column_dimensions["F"].width = 30  # –ê–¥—Ä–µ—Å

    async def _fill_completed_orders_sheet(self, ws, orders, master):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""

        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, size=11, color="FFFFFF")
        header_fill = PatternFill(start_color="28a745", end_color="28a745", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        border = Border(
            left=Side(style="thin"),
            right=Side(style="thin"),
            top=Side(style="thin"),
            bottom=Side(style="thin"),
        )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws.merge_cells("A1:J1")
        ws["A1"] = f"–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–Ø–í–ö–ò - {master.get_display_name()}"
        ws["A1"].font = Font(bold=True, size=14, color="28a745")
        ws["A1"].alignment = Alignment(horizontal="center", vertical="center")

        # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ws.merge_cells("A2:J2")
        ws["A2"] = f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now(UTC).strftime('%d.%m.%Y %H:%M')} (UTC)"
        ws["A2"].alignment = Alignment(horizontal="center")
        ws["A2"].font = Font(italic=True, color="666666")

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = [
            "‚Ññ –ó–∞—è–≤–∫–∏",
            "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "–ö–ª–∏–µ–Ω—Ç",
            "–¢–µ–ª–µ—Ñ–æ–Ω",
            "–ê–¥—Ä–µ—Å",
            "–û–±—â–∞—è —Å—É–º–º–∞",
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "–ü—Ä–∏–±—ã–ª—å –º–∞—Å—Ç–µ—Ä–∞",
            "–ü—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏",
            "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        ]

        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=4, column=col_num)
            cell.value = header
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
            cell.border = border

        # –î–∞–Ω–Ω—ã–µ
        row_num = 5
        total_amount = 0
        total_materials = 0
        total_master_profit = 0
        total_company_profit = 0

        for order in orders:
            ws.cell(row=row_num, column=1, value=order.id).border = border
            ws.cell(row=row_num, column=2, value=order.equipment_type or "").border = border
            ws.cell(row=row_num, column=3, value=order.client_name or "").border = border
            ws.cell(row=row_num, column=4, value=order.client_phone or "").border = border
            ws.cell(row=row_num, column=5, value=order.client_address or "").border = border

            amount = order.total_amount or 0
            materials = order.materials_cost or 0
            master_profit = order.master_profit or 0
            company_profit = order.company_profit or 0

            ws.cell(row=row_num, column=6, value=f"{amount:.2f}").border = border
            ws.cell(row=row_num, column=7, value=f"{materials:.2f}").border = border
            ws.cell(row=row_num, column=8, value=f"{master_profit:.2f}").border = border
            ws.cell(row=row_num, column=9, value=f"{company_profit:.2f}").border = border
            ws.cell(
                row=row_num,
                column=10,
                value=format_datetime(order.updated_at) if order.updated_at else "",
            ).border = border

            total_amount += amount
            total_materials += materials
            total_master_profit += master_profit
            total_company_profit += company_profit

            row_num += 1

        # –ò—Ç–æ–≥–æ
        row_num += 1
        ws.cell(row=row_num, column=1, value="–ò–¢–û–ì–û:").font = Font(bold=True)
        ws.cell(row=row_num, column=2, value=f"{len(orders)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö").font = Font(bold=True)
        ws.cell(row=row_num, column=6, value=f"{total_amount:.2f} ‚ÇΩ").font = Font(bold=True)
        ws.cell(row=row_num, column=7, value=f"{total_materials:.2f} ‚ÇΩ").font = Font(bold=True)
        ws.cell(row=row_num, column=8, value=f"{total_master_profit:.2f} ‚ÇΩ").font = Font(
            bold=True, color="28a745"
        )
        ws.cell(row=row_num, column=9, value=f"{total_company_profit:.2f} ‚ÇΩ").font = Font(bold=True)

        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col_num in range(1, 11):
            ws.column_dimensions[get_column_letter(col_num)].width = 15
        ws.column_dimensions["B"].width = 20  # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        ws.column_dimensions["E"].width = 30  # –ê–¥—Ä–µ—Å

    async def get_master_archived_reports(self, master_id: int, limit: int = 10):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞

        Args:
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞
            limit: –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        """
        return await self.db.get_master_archived_reports(master_id, limit)

    async def get_archived_report_file(self, report_id: int, master_id: int):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ ID

        Args:
            report_id: ID –æ—Ç—á–µ—Ç–∞
            master_id: ID –º–∞—Å—Ç–µ—Ä–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)

        Returns:
            BufferedInputFile –∏–ª–∏ None
        """
        report = await self.db.get_master_report_archive_by_id(report_id)

        if not report or report.master_id != master_id:
            return None

        file_path = Path(report.file_path)
        if not file_path.exists():
            logger.error(f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None

        async with aiofiles.open(file_path, "rb") as f:
            file_data = await f.read()

        return BufferedInputFile(file_data, filename=report.file_name)
