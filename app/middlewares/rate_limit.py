"""
Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (Rate Limiting)
"""

import logging
import time
from collections.abc import Awaitable, Callable
from typing import Any, TypedDict

from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery, Message


logger = logging.getLogger(__name__)


class RateLimitBucket(TypedDict):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    tokens: float
    last_update: float
    violations: int
    violation_timestamps: list[float]
    banned_until: float | None
    last_warning_sent: float


class RateLimitMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç spam –∏ DoS –∞—Ç–∞–∫

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º Token Bucket –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    def __init__(
        self,
        rate: int = 3,  # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥
        period: int = 1,  # –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        burst: int = 5,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π burst (–≤—Å–ø–ª–µ—Å–∫)
        max_violations: int = 30,  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–∞–Ω–æ–º
        violation_window: int = 60,  # –û–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π (—Å–µ–∫—É–Ω–¥—ã)
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rate Limiter

        Args:
            rate: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥
            period: –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            burst: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π burst (—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ä–∞–∑—É)
            max_violations: –ú–∞–∫—Å–∏–º—É–º –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
            violation_window: –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π (—Å–µ–∫—É–Ω–¥—ã)

        –ü—Ä–∏–º–µ—Ä:
            rate=3, period=1, burst=5
            ‚Üí 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É, –Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ 5 –ø–æ–¥—Ä—è–¥
        """
        super().__init__()
        self.rate = rate
        self.period = period
        self.burst = burst
        self.max_violations = max_violations
        self.violation_window = violation_window

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.buckets: dict[int, RateLimitBucket] = {}

    def _get_tokens(self, user_id: int) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        """
        now = time.time()

        if user_id not in self.buckets:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –¥–∞—ë–º –ø–æ–ª–Ω—ã–π burst
            self.buckets[user_id] = {
                "tokens": float(self.burst),
                "last_update": now,
                "violations": 0,
                "violation_timestamps": [],
                "banned_until": None,
                "last_warning_sent": 0,  # Timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            }
            return float(self.burst)

        bucket = self.buckets[user_id]

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
        time_passed = now - bucket["last_update"]
        tokens_to_add = time_passed * (self.rate / self.period)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–µ –±–æ–ª—å—à–µ burst)
        new_tokens = min(self.burst, bucket["tokens"] + tokens_to_add)
        bucket["tokens"] = new_tokens
        bucket["last_update"] = now

        return float(new_tokens)

    def _clean_old_violations(self, user_id: int) -> int:
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
        """
        if user_id not in self.buckets:
            return 0

        now = time.time()
        bucket = self.buckets[user_id]

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞
        cutoff_time = now - self.violation_window
        bucket["violation_timestamps"] = [
            ts for ts in bucket["violation_timestamps"] if ts > cutoff_time
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        violations_count = len(bucket["violation_timestamps"])
        bucket["violations"] = violations_count

        return violations_count

    def _add_violation(self, user_id: int) -> int:
        """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        """
        now = time.time()
        bucket = self.buckets[user_id]

        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –Ω–∞—Ä—É—à–µ–Ω–∏—è
        bucket["violation_timestamps"].append(now)
        violations_count = len(bucket["violation_timestamps"])
        bucket["violations"] = violations_count

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –ª–∏–º–∏—Ç
        if violations_count >= self.max_violations:
            # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–∞–Ω –Ω–∞ 1 —á–∞—Å
            bucket["banned_until"] = now + 3600
            logger.critical(
                f"üö´ User {user_id} PERMANENTLY BANNED for {self.max_violations}+ violations"
            )

        return violations_count

    def _consume_token(self, user_id: int) -> bool:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω

        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        """
        tokens = self._get_tokens(user_id)

        if tokens >= 1:
            self.buckets[user_id]["tokens"] -= 1
            return True

        return False

    async def __call__(
        self,
        handler: Callable[[Message | CallbackQuery, dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: dict[str, Any],
    ) -> Any:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π rate limit

        Args:
            handler: –°–ª–µ–¥—É—é—â–∏–π handler
            event: –°–æ–±—ã—Ç–∏–µ (Message –∏–ª–∏ CallbackQuery)
            data: –î–∞–Ω–Ω—ã–µ

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è handler –∏–ª–∏ None –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        """
        user = event.from_user

        if not user:
            # –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return await handler(event, data)

        user_id = user.id
        now = time.time()

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º bucket
        if user_id not in self.buckets:
            self._get_tokens(user_id)

        bucket = self.buckets[user_id]

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É bucket –µ—Å—Ç—å –ø–æ–ª–µ last_warning_sent (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if "last_warning_sent" not in bucket:
            bucket["last_warning_sent"] = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if bucket.get("banned_until") and bucket["banned_until"] > now:
            remaining_ban = int(bucket["banned_until"] - now)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
            last_warning = bucket.get("last_warning_sent", 0)
            should_send_warning = (now - last_warning) >= 10

            if should_send_warning:
                logger.error(
                    f"üö´ BANNED user {user_id} (@{user.username}) tried to access. "
                    f"Ban remaining: {remaining_ban}s"
                )

                if isinstance(event, Message):
                    await event.answer(
                        f"üö´ <b>–í–´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´</b>\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: –ß—Ä–µ–∑–º–µ—Ä–Ω—ã–π —Å–ø–∞–º ({self.max_violations}+ –Ω–∞—Ä—É—à–µ–Ω–∏–π)\n"
                        f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {remaining_ban // 60} –º–∏–Ω {remaining_ban % 60} —Å–µ–∫\n\n"
                        f"<i>–î–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.</i>",
                        parse_mode="HTML",
                    )
                elif isinstance(event, CallbackQuery):
                    await event.answer(
                        f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º –Ω–∞ {remaining_ban // 60} –º–∏–Ω", show_alert=True
                    )

                bucket["last_warning_sent"] = now
            else:
                # –ú–æ–ª—á–∞ –±–ª–æ–∫–∏—Ä—É–µ–º –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
                logger.debug(f"üö´ BANNED user {user_id} blocked silently (warning cooldown)")

            return None

        # –ï—Å–ª–∏ –±–∞–Ω –∏—Å—Ç—ë–∫ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        if bucket.get("banned_until") and bucket["banned_until"] <= now:
            bucket["banned_until"] = None
            bucket["violations"] = 0
            bucket["violation_timestamps"] = []
            logger.info(f"‚úÖ Ban expired for user {user_id}. Reset violations.")

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        self._clean_old_violations(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        if not self._consume_token(user_id):
            # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            violations = self._add_violation(user_id)
            current_tokens = bucket["tokens"]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            tokens_needed = 1.0 - current_tokens
            base_wait_time = max(10, int((tokens_needed / self.rate) * self.period))

            # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
            if violations <= 3:
                wait_time = base_wait_time
            elif violations <= 10:
                # 4-10 –Ω–∞—Ä—É—à–µ–Ω–∏–π: √ó 2-5
                wait_time = base_wait_time * min(violations - 1, 5)
            elif violations <= 20:
                # 11-20 –Ω–∞—Ä—É—à–µ–Ω–∏–π: √ó 6-15
                wait_time = base_wait_time * (violations - 5)
            else:
                # 21-29 –Ω–∞—Ä—É—à–µ–Ω–∏–π: √ó 20-30
                wait_time = base_wait_time * (violations)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
            last_warning = bucket.get("last_warning_sent", 0)
            should_send_warning = (now - last_warning) >= 5

            if should_send_warning:
                logger.warning(
                    f"‚ö†Ô∏è Rate limit exceeded for user {user_id} (@{user.username}). "
                    f"Wait time: {wait_time}s, violations: {violations}/{self.max_violations}, tokens: {current_tokens:.2f}"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if isinstance(event, Message):
                    warning_text = (
                        f"‚ö†Ô∏è <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
                        f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫. –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                    )

                    if violations > 5:
                        warning_text += (
                            f"üî¥ <b>–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º!</b>\n"
                            f"–ù–∞—Ä—É—à–µ–Ω–∏–π: {violations}/{self.max_violations}\n"
                            f"–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–æ.\n\n"
                        )

                    if violations > 20:
                        warning_text += (
                            f"‚ö†Ô∏è <b>–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!</b>\n"
                            f"–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {self.max_violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π - –±–∞–Ω –Ω–∞ 1 —á–∞—Å!\n\n"
                        )

                    warning_text += "<i>–î–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.</i>"

                    await event.answer(warning_text, parse_mode="HTML")
                elif isinstance(event, CallbackQuery):
                    await event.answer(
                        f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫.\n–ù–∞—Ä—É—à–µ–Ω–∏–π: {violations}/{self.max_violations}",
                        show_alert=True,
                    )

                bucket["last_warning_sent"] = now
            else:
                # –ú–æ–ª—á–∞ –±–ª–æ–∫–∏—Ä—É–µ–º –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
                logger.debug(
                    f"‚ö†Ô∏è User {user_id} rate limited silently. "
                    f"Violations: {violations}/{self.max_violations} (warning cooldown)"
                )

            # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º handler - –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            return None

        # –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å
        logger.debug(
            f"Rate limit OK for user {user_id}. "
            f"Remaining tokens: {bucket['tokens']:.2f}, violations: {bucket['violations']}"
        )

        return await handler(event, data)

    def get_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ rate limiting

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        banned_users = sum(
            1
            for bucket in self.buckets.values()
            if bucket.get("banned_until") and bucket["banned_until"] > time.time()
        )

        users_with_violations = sum(
            1 for bucket in self.buckets.values() if bucket.get("violations", 0) > 0
        )

        return {
            "total_users": len(self.buckets),
            "banned_users": banned_users,
            "users_with_violations": users_with_violations,
            "rate": self.rate,
            "period": self.period,
            "burst": self.burst,
            "max_violations": self.max_violations,
            "violation_window": self.violation_window,
        }
