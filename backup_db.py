"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python backup_db.py
"""
import os
import shutil
from datetime import datetime, timedelta
import sys
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    return f"{size_bytes / 1024:.2f} KB"


def backup_database(keep_days=30):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        keep_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    """
    
    db_file = "bot_database.db"
    backup_dir = "backups"
    
    print("\n" + "="*80)
    print("  üì¶ –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*80 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î
    if not os.path.exists(db_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è backup
    if not os.path.exists(backup_dir):
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {backup_dir}")
        os.makedirs(backup_dir)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
    db_size = os.path.getsize(db_file)
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_file}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {format_size(db_size)}\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    backup_file = os.path.join(backup_dir, f"bot_database_{timestamp}.db")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    print("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    try:
        shutil.copy2(db_file, backup_file)
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
        print(f"üìÅ –§–∞–π–ª: {backup_file}\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ø–∏–∏: {e}")
        return False
    
    # –ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_files = [f for f in os.listdir(backup_dir) if f.startswith("bot_database_") and f.endswith(".db")]
    backup_files.sort(reverse=True)
    
    print(f"üìä –í—Å–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backup_files)}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π
    cutoff_date = datetime.now() - timedelta(days=keep_days)
    deleted_count = 0
    
    print(f"\nüóëÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π (—Å—Ç–∞—Ä—à–µ {keep_days} –¥–Ω–µ–π)...")
    
    for backup_filename in backup_files:
        backup_path = os.path.join(backup_dir, backup_filename)
        file_time = datetime.fromtimestamp(os.path.getmtime(backup_path))
        
        if file_time < cutoff_date:
            print(f"   –£–¥–∞–ª–µ–Ω–∏–µ: {backup_filename}")
            try:
                os.remove(backup_path)
                deleted_count += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {backup_filename}: {e}")
    
    if deleted_count > 0:
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π: {deleted_count}")
    else:
        print("‚ÑπÔ∏è  –°—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
    print("-" * 80)
    
    recent_backups = backup_files[:5]
    for backup_filename in recent_backups:
        backup_path = os.path.join(backup_dir, backup_filename)
        size = os.path.getsize(backup_path)
        mtime = datetime.fromtimestamp(os.path.getmtime(backup_path))
        print(f"   {backup_filename:40} {format_size(size):>12} {mtime.strftime('%Y-%m-%d %H:%M:%S')}")
    
    print("\n" + "="*80)
    print("            ‚úÖ –ì–û–¢–û–í–û!")
    print("="*80 + "\n")
    
    return True


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--keep-days', type=int, default=30,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')
    
    args = parser.parse_args()
    
    success = backup_database(keep_days=args.keep_days)
    
    if not success:
        sys.exit(1)

