#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_all_masters() - –ø–æ—á–µ–º—É –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è work_chat_id
"""

import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

async def main():
    """–û—Ç–ª–∞–¥–∫–∞ get_all_masters"""
    print("=" * 80)
    print("–û–¢–õ–ê–î–ö–ê GET_ALL_MASTERS()")
    print("=" * 80)
    print()

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ path
    from app.database.db import Database

    db = Database()
    await db.connect()

    try:
        # –í—ã–ø–æ–ª–Ω–∏–º —Ç–æ—Ç –∂–µ SQL –∑–∞–ø—Ä–æ—Å, —á—Ç–æ –∏ –≤ get_all_masters()
        query = """
            SELECT m.*, u.username, u.first_name, u.last_name
            FROM masters m
            LEFT JOIN users u ON m.telegram_id = u.telegram_id
            WHERE 1=1
            ORDER BY m.created_at DESC
        """

        cursor = await db.connection.execute(query)
        rows = await cursor.fetchall()

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}")
        print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ
        if rows:
            first_row = rows[0]
            print("üîç –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (raw):")
            print(f"   –¢–∏–ø: {type(first_row)}")
            print(f"   –ö–ª—é—á–∏: {first_row.keys()}")
            print()

            print("üìã –ó–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π:")
            for key in first_row.keys():
                value = first_row[key]
                print(f"   {key}: {value} (type: {type(value).__name__})")
            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ work_chat_id
            if "work_chat_id" in first_row.keys():
                print(f"‚úÖ 'work_chat_id' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")
                print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {first_row['work_chat_id']}")
            else:
                print(f"‚ùå 'work_chat_id' –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")
                print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(first_row.keys())}")

            print()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∏–∑ get_all_masters()
            print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –∏–∑ get_all_masters():")
            print(f"   'work_chat_id' in row: {'work_chat_id' in first_row}")
            print(f"   row['work_chat_id']: {first_row.get('work_chat_id', 'KEY NOT FOUND')}")
            print(f"   row['work_chat_id'] is not None: {first_row.get('work_chat_id') is not None}")

            work_chat_id_value = (
                first_row["work_chat_id"]
                if "work_chat_id" in first_row and first_row["work_chat_id"] is not None
                else None
            )
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ª–æ–≤–∏—è: {work_chat_id_value}")

    finally:
        await db.disconnect()

    print()
    print("=" * 80)
    print("–û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(main())
