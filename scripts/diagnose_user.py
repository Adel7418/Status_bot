#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
"""
import asyncio
import sys
from pathlib import Path


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.config import UserRole
from app.database.db import Database


async def diagnose_user(telegram_id: int):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user_by_telegram_id(telegram_id)

        if not user:
            print(f"\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("\nüí° –†–µ—à–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n")
            return

        print("\n" + "=" * 60)
        print("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
        print("=" * 60)

        print("\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ID –≤ –±–∞–∑–µ: {user.id}")
        print(f"   Telegram ID: {user.telegram_id}")
        print(f"   –ò–º—è: {user.first_name} {user.last_name or ''}")
        if user.username:
            print(f"   Username: @{user.username}")

        print("\nüîë –†–û–õ–ò:")
        print(f"   –ü–æ–ª–µ 'role' –≤ –ë–î: '{user.role}'")
        print(f"   –û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å (get_primary_role): '{user.get_primary_role()}'")
        print(f"   –í—Å–µ —Ä–æ–ª–∏ (get_roles): {user.get_roles()}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
        primary_role = user.get_primary_role()
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê:")
        print(
            f"   –†–æ–ª—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ: {primary_role == primary_role.upper()} {'‚úÖ' if primary_role == primary_role.upper() else '‚ùå'}"
        )
        print("   –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–æ–ª–∏:")
        print(f"      - {UserRole.ADMIN} (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")
        print(f"      - {UserRole.DISPATCHER} (–¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞)")
        print(f"      - {UserRole.MASTER} (–¥–ª—è –º–∞—Å—Ç–µ—Ä–∞)")
        print(f"      - {UserRole.UNKNOWN} (–±–µ–∑ –¥–æ—Å—Ç—É–ø–∞)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á–µ—Ç–∞–º
        print("\nüìä –î–û–°–¢–£–ü –ö –û–¢–ß–ï–¢–ê–ú:")
        has_reports_access = primary_role in [UserRole.ADMIN, UserRole.DISPATCHER]
        print(f"   –û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å: {primary_role}")
        print(f"   –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏: {UserRole.ADMIN} –∏–ª–∏ {UserRole.DISPATCHER}")
        print(f"   –î–æ—Å—Ç—É–ø –∫ –æ—Ç—á–µ—Ç–∞–º: {'‚úÖ –ï–°–¢–¨' if has_reports_access else '‚ùå –ù–ï–¢'}")

        if has_reports_access:
            print("\n   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–û–õ–ñ–ï–ù –≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫—É 'üìä –û—Ç—á–µ—Ç—ã' –≤ –º–µ–Ω—é")
            print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –î–û–õ–ñ–ï–ù –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Ç—á–µ—Ç–∞–º")
        else:
            print("\n   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫—É 'üìä –û—Ç—á–µ—Ç—ã'")
            print("   ‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—á–µ—Ç–∞–º")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
        all_roles = user.get_roles()
        print("\nüë• –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –†–û–õ–ï–ô:")
        for role in all_roles:
            is_valid = role in [
                UserRole.ADMIN,
                UserRole.DISPATCHER,
                UserRole.MASTER,
                UserRole.UNKNOWN,
            ]
            print(f"   - {role}: {'‚úÖ –≤–∞–ª–∏–¥–Ω–∞—è' if is_valid else '‚ùå –ù–ï–í–ê–õ–ò–î–ù–ê–Ø!'}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if not has_reports_access and primary_role != UserRole.DISPATCHER:
            print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–æ–ª—å DISPATCHER –∫–æ–º–∞–Ω–¥–æ–π:")
            print(f"      python scripts/set_user_role.py {telegram_id} dispatcher")

        if primary_role != primary_role.upper():
            print("   ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –†–æ–ª—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ!")
            print(f"      –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞: {primary_role.upper()}")

        print("\n   2. –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
        print("      /start")

        print("\n   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ 'üìä –û—Ç—á–µ—Ç—ã':")
        print(f"      docker logs telegram_repair_bot_prod -f | grep {telegram_id}")

        print("\n" + "=" * 60 + "\n")

    finally:
        await db.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python diagnose_user.py <telegram_id>")
        print("–ü—Ä–∏–º–µ—Ä: python diagnose_user.py 123456789")
        sys.exit(1)

    try:
        telegram_id = int(sys.argv[1])
        await diagnose_user(telegram_id)
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
