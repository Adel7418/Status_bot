#!/bin/bash

# ========================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPS
# –ó–∞–ø—É—Å–∫–∞—Ç—å –í–ù–£–¢–†–ò VPS —Å–µ—Ä–≤–µ—Ä–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./setup_vps.sh
# ========================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info "=========================================="
print_info "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPS –¥–ª—è Telegram Bot"
print_info "=========================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [ "$EUID" -eq 0 ]; then 
    print_warning "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç root"
    IS_ROOT=true
else
    print_info "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $USER"
    IS_ROOT=false
fi

# –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
print_info "–®–∞–≥ 1/6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
if [ "$IS_ROOT" = true ]; then
    apt update && apt upgrade -y
else
    sudo apt update && sudo apt upgrade -y
fi
print_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

# –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç
print_info "–®–∞–≥ 2/6: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç..."
if [ "$IS_ROOT" = true ]; then
    apt install -y git curl wget nano htop net-tools
else
    sudo apt install -y git curl wget nano htop net-tools
fi
print_success "–ë–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
print_info "–®–∞–≥ 3/6: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker
if command -v docker &> /dev/null; then
    print_warning "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è $(docker --version))"
else
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    if [ "$IS_ROOT" = true ]; then
        apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    else
        sudo apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [ "$IS_ROOT" = true ]; then
        apt install -y ca-certificates curl gnupg lsb-release
    else
        sudo apt install -y ca-certificates curl gnupg lsb-release
    fi
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ GPG –∫–ª—é—á–∞ Docker
    if [ "$IS_ROOT" = true ]; then
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
    else
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
    fi
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if [ "$IS_ROOT" = true ]; then
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    else
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    if [ "$IS_ROOT" = true ]; then
        apt update
        apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    else
        sudo apt update
        sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    fi
    
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
docker --version
docker compose version

# –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print_info "–®–∞–≥ 4/6: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
if [ "$IS_ROOT" = false ]; then
    if groups $USER | grep &>/dev/null '\bdocker\b'; then
        print_warning "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ docker"
    else
        sudo usermod -aG docker $USER
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
        print_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–π—Ç–∏ –∏ –∑–∞–π—Ç–∏ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã!"
        print_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: exit, –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –ø–æ SSH"
    fi
fi

# –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
print_info "–®–∞–≥ 5/6: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞..."
mkdir -p ~/telegram_repair_bot/{data,logs,backups}
print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ ~/telegram_repair_bot"

# –®–∞–≥ 6: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
print_info "–®–∞–≥ 6/6: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
if command -v ufw &> /dev/null; then
    if [ "$IS_ROOT" = true ]; then
        # –†–∞–∑—Ä–µ—à–∏—Ç—å SSH
        ufw allow OpenSSH
        # –í–∫–ª—é—á–∏—Ç—å firewall
        ufw --force enable
        ufw status
    else
        sudo ufw allow OpenSSH 2>/dev/null || true
        sudo ufw --force enable 2>/dev/null || true
        sudo ufw status
    fi
    print_success "Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
else
    print_warning "ufw –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (firewall –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
fi

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
print_success "=========================================="
print_success "‚úÖ VPS –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
print_success "=========================================="
echo ""
print_info "üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ü–û:"
echo "  ‚Ä¢ Git: $(git --version)"
echo "  ‚Ä¢ Docker: $(docker --version)"
echo "  ‚Ä¢ Docker Compose: $(docker compose version)"
echo ""
print_info "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ~/telegram_repair_bot"
echo ""
print_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û:"
if [ "$IS_ROOT" = false ]; then
    echo "1. –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å –ø—Ä–∞–≤–∞ Docker, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "   exit"
    echo "   (–∑–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ –ø–æ SSH)"
    echo ""
fi
echo "2. –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"
echo "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç deploy_to_vps.sh —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã"
echo "   ‚Ä¢ –ò–ª–∏ –∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ –∏–∑ GitHub:"
echo "     git clone https://github.com/Adel7418/Status_bot.git ~/telegram_repair_bot"
echo ""
print_info "üìñ –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: DEPLOY_VPS_LINUX_GUIDE.md"
echo ""

