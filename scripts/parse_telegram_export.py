#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–∏–Ω–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON –∏–∑ Telegram –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
"""

import asyncio
import json
import re
import sys
from datetime import datetime
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

from app.database import Database


def parse_order_confirmation(text: str) -> dict | None:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏

    –§–æ—Ä–º–∞—Ç:
    üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:

    üîß –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: –°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã
    üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    üë§ –ö–ª–∏–µ–Ω—Ç: –ö–∞–ª–∏–Ω–æ–≤ –ò–ª—å–¥–∞—Ä –≥–µ–Ω–∞–¥—å–µ–≤–∏—á
    üìç –ê–¥—Ä–µ—Å: –ü—Ä –ø–æ–±–µ–¥—ã 27 28
    üìû –¢–µ–ª–µ—Ñ–æ–Ω: +79872242323

    üìù –ó–∞–º–µ—Ç–∫–∏: –ö 10:00
    """
    if "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:" not in text:
        return None

    order = {}

    # –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏
    match = re.search(r"üîß\s*–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:\s*(.+?)(?:\n|$)", text)
    if match:
        order["equipment_type"] = match.group(1).strip()

    # –û–ø–∏—Å–∞–Ω–∏–µ
    match = re.search(r"üìù\s*–û–ø–∏—Å–∞–Ω–∏–µ:\s*(.+?)(?:\n|$)", text)
    if match:
        order["description"] = match.group(1).strip()

    # –ö–ª–∏–µ–Ω—Ç
    match = re.search(r"üë§\s*–ö–ª–∏–µ–Ω—Ç:\s*(.+?)(?:\n|$)", text)
    if match:
        order["client_name"] = match.group(1).strip()

    # –ê–¥—Ä–µ—Å
    match = re.search(r"üìç\s*–ê–¥—Ä–µ—Å:\s*(.+?)(?:\n|$)", text)
    if match:
        order["client_address"] = match.group(1).strip()

    # –¢–µ–ª–µ—Ñ–æ–Ω
    match = re.search(r"üìû\s*–¢–µ–ª–µ—Ñ–æ–Ω:\s*(.+?)(?:\n|$)", text)
    if match:
        phone = match.group(1).strip()
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        phone = re.sub(r'[^\d+]', '', phone)
        if not phone.startswith('+'):
            phone = '+' + phone
        order["client_phone"] = phone

    # –ó–∞–º–µ—Ç–∫–∏
    match = re.search(r"üìù\s*–ó–∞–º–µ—Ç–∫–∏:\s*(.+?)(?:\n|$)", text)
    if match:
        order["notes"] = match.group(1).strip()
    else:
        order["notes"] = ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
    required = ["equipment_type", "description", "client_name", "client_address", "client_phone"]
    if all(field in order for field in required):
        return order

    return None


def extract_order_number(text: str) -> int | None:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    match = re.search(r"–ó–∞—è–≤–∫–∞\s*#(\d+)", text)
    if match:
        return int(match.group(1))
    return None


async def parse_and_restore(json_file: str, dispatcher_id: int, start_from: int = 1):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫

    Args:
        json_file: –ü—É—Ç—å –∫ result.json
        dispatcher_id: Telegram ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–∫—Ç–æ —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞—è–≤–∫–∏)
        start_from: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º >= —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    print("=" * 80)
    print("–ü–ê–†–°–ò–ù–ì –≠–ö–°–ü–û–†–¢–ê TELEGRAM –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö")
    print("=" * 80)
    print()

    # –ß–∏—Ç–∞–µ–º JSON
    with open(json_file, 'r', encoding='utf-8') as f:
        data = json.load(f)

    messages = data.get("messages", [])
    print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ: {len(messages)}")
    print()

    # –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
    orders_to_restore = []
    restored_order_numbers = set()

    for i, msg in enumerate(messages):
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
        text_parts = msg.get("text", "")
        if isinstance(text_parts, list):
            text = ""
            for part in text_parts:
                if isinstance(part, str):
                    text += part
                elif isinstance(part, dict) and "text" in part:
                    text += part["text"]
        else:
            text = str(text_parts)

        # –ü–∞—Ä—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        order_data = parse_order_confirmation(text)
        if order_data:
            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            date_str = msg.get("date", "")
            try:
                created_at = datetime.fromisoformat(date_str.replace('T', ' '))
                order_data["created_at"] = created_at.strftime("%Y-%m-%d %H:%M:%S")
            except:
                order_data["created_at"] = None

            # –ò—â–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            order_number = None
            for next_msg in messages[i+1:i+5]:  # –°–º–æ—Ç—Ä–∏–º —Å–ª–µ–¥—É—é—â–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                next_text_parts = next_msg.get("text", "")
                if isinstance(next_text_parts, list):
                    next_text = ""
                    for part in next_text_parts:
                        if isinstance(part, str):
                            next_text += part
                        elif isinstance(part, dict) and "text" in part:
                            next_text += part["text"]
                else:
                    next_text = str(next_text_parts)

                num = extract_order_number(next_text)
                if num:
                    order_number = num
                    break

            if order_number and order_number not in restored_order_numbers:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏
                if order_number >= start_from:
                    order_data["order_number"] = order_number
                    orders_to_restore.append(order_data)
                    restored_order_numbers.add(order_number)

    print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (>= #{start_from}): {len(orders_to_restore)}")
    print()

    if not orders_to_restore:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:")
    print("-" * 80)
    for order in orders_to_restore:
        print(f"\n#{order.get('order_number', '?')} - {order['equipment_type']}")
        print(f"   –ö–ª–∏–µ–Ω—Ç: {order['client_name']}")
        print(f"   –ê–¥—Ä–µ—Å: {order['client_address']}")
        print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {order['client_phone']}")
        if order.get('created_at'):
            print(f"   –î–∞—Ç–∞: {order['created_at']}")
    print()

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    answer = input("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–∏ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (yes/no): ")
    if answer.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
        print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—è–≤–∫–∏
    db = Database()
    await db.connect()

    try:
        restored_count = 0
        for order in orders_to_restore:
            try:
                new_order = await db.create_order(
                    equipment_type=order["equipment_type"],
                    description=order["description"],
                    client_name=order["client_name"],
                    client_address=order["client_address"],
                    client_phone=order["client_phone"],
                    dispatcher_id=dispatcher_id,
                    notes=order.get("notes", ""),
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if order.get("created_at"):
                    await db.connection.execute(
                        "UPDATE orders SET created_at = ? WHERE id = ?",
                        (order["created_at"], new_order.id),
                    )
                    await db.connection.commit()

                print(f"OK: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{new_order.id} (–±—ã–ª–æ #{order.get('order_number', '?')})")
                restored_count += 1

            except Exception as e:
                print(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{order.get('order_number', '?')}: {e}")

        print()
        print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {restored_count}/{len(orders_to_restore)}")

    finally:
        await db.disconnect()

    print()
    print("=" * 80)
    print("–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys

    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  python {sys.argv[0]} <–ø—É—Ç—å_–∫_result.json> <dispatcher_telegram_id> [start_from]")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print(f"  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏:")
        print(f"  python {sys.argv[0]} docs/history_telegram/ChatExport_2025-10-21/result.json 5765136457")
        print()
        print(f"  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ >= #45:")
        print(f"  python {sys.argv[0]} docs/history_telegram/ChatExport_2025-10-21/result.json 5765136457 45")
        return

    json_file = sys.argv[1]
    dispatcher_id = int(sys.argv[2])
    start_from = int(sys.argv[3]) if len(sys.argv) > 3 else 1

    if not Path(json_file).exists():
        print(f"ERROR: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
        return

    await parse_and_restore(json_file, dispatcher_id, start_from)


if __name__ == "__main__":
    asyncio.run(main())

