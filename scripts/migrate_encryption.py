#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

–í–ù–ò–ú–ê–ù–ò–ï: –°–¥–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!
"""

import asyncio
import logging
import sys
from pathlib import Path


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.database.db import Database
from app.utils.encryption import decrypt, encrypt


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def migrate_orders_encryption(db: Database, dry_run: bool = True):
    """
    –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫

    Args:
        db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
    """
    logger.info("=" * 60)
    logger.info("üîê –ú–∏–≥—Ä–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
    logger.info(f"üìã –†–µ–∂–∏–º: {'DRY RUN (—Ç–µ—Å—Ç–æ–≤—ã–π)' if dry_run else '–†–ï–ê–õ–¨–ù–´–ô'}")
    logger.info("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    cursor = await db.connection.execute(
        """
        SELECT id, client_name, client_phone, client_address
        FROM orders
        WHERE deleted_at IS NULL
        """
    )
    orders = await cursor.fetchall()

    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(orders)}")

    if not orders:
        logger.info("‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É
    success_count = 0
    error_count = 0

    for order in orders:
        order_id = order["id"]
        client_name = order["client_name"]
        client_phone = order["client_phone"]
        client_address = order["client_address"]

        try:
            # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            encrypted_name = encrypt(client_name) if client_name else None
            encrypted_phone = encrypt(client_phone) if client_phone else None
            encrypted_address = encrypt(client_address) if client_address else None

            logger.info(f"\nüìã –ó–∞—è–≤–∫–∞ #{order_id}:")
            logger.info(f"  –ò–º—è: {client_name[:20]}... ‚Üí {encrypted_name[:30]}...")
            logger.info(f"  –¢–µ–ª–µ—Ñ–æ–Ω: {client_phone} ‚Üí {encrypted_phone[:30]}...")
            logger.info(f"  –ê–¥—Ä–µ—Å: {client_address[:30]}... ‚Üí {encrypted_address[:30]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            decrypted_name = decrypt(encrypted_name) if encrypted_name else None
            decrypted_phone = decrypt(encrypted_phone) if encrypted_phone else None
            decrypted_address = decrypt(encrypted_address) if encrypted_address else None

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if decrypted_name != client_name:
                logger.error("  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏!")
                error_count += 1
                continue

            if decrypted_phone != client_phone:
                logger.error("  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
                error_count += 1
                continue

            if decrypted_address != client_address:
                logger.error("  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞!")
                error_count += 1
                continue

            logger.info("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î (–µ—Å–ª–∏ –Ω–µ dry_run)
            if not dry_run:
                await db.connection.execute(
                    """
                    UPDATE orders
                    SET client_name = ?,
                        client_phone = ?,
                        client_address = ?,
                        version = version + 1
                    WHERE id = ?
                    """,
                    (encrypted_name, encrypted_phone, encrypted_address, order_id),
                )
                logger.info("  üíæ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")

            success_count += 1

        except Exception as e:
            logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ #{order_id}: {e}")
            error_count += 1

    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if not dry_run:
        await db.connection.commit()
        logger.info("\nüíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
    else:
        logger.info("\nüîç DRY RUN –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    logger.info(f"  ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    logger.info(f"  üìã –í—Å–µ–≥–æ: {len(orders)}")
    logger.info("=" * 60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("üîê –°–ö–†–ò–ü–¢ –ú–ò–ì–†–ê–¶–ò–ò –®–ò–§–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:")
    print("  1. –°–¥–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("  2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ENCRYPTION_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
    print("  3. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ä–µ–∂–∏–º–µ DRY RUN")
    print()

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (dry/real): ").strip().lower()

    if mode not in ["dry", "real"]:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'dry' –∏–ª–∏ 'real'")
        return

    dry_run = mode == "dry"

    if not dry_run:
        print("\n‚ö†Ô∏è  –í–´ –í–´–ë–†–ê–õ–ò –†–ï–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú!")
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ").strip()
        if confirm != "YES":
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    logger.info("\nüì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    db = Database()
    await db.connect()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        await migrate_orders_encryption(db, dry_run=dry_run)

    finally:
        await db.disconnect()
        logger.info("\nüëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î")

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")


if __name__ == "__main__":
    asyncio.run(main())
