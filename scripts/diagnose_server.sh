#!/bin/bash

# ===================================================================
# Скрипт диагностики production сервера
# ===================================================================
# Использование: bash scripts/diagnose_server.sh
#
# Проверяет:
# - Статус контейнеров
# - Подключение к базе данных
# - Конфигурацию мастеров
# - Логи ошибок
# ===================================================================

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🔍 ДИАГНОСТИКА PRODUCTION СЕРВЕРА"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# ===================================================================
# 1. Проверка статуса контейнеров
# ===================================================================
echo "📦 1. Статус Docker контейнеров:"
echo "─────────────────────────────────────────────────────────────────"
docker compose -f docker/docker-compose.prod.yml ps
echo ""

# ===================================================================
# 2. Проверка переменных окружения
# ===================================================================
echo "⚙️  2. Переменные окружения:"
echo "─────────────────────────────────────────────────────────────────"
docker exec telegram_repair_bot_prod env | grep -E "USE_ORM|DATABASE_PATH|BOT_TOKEN|LOG_LEVEL" | sort
echo ""

# ===================================================================
# 3. Проверка базы данных
# ===================================================================
echo "🗄️  3. Проверка базы данных:"
echo "─────────────────────────────────────────────────────────────────"
docker exec telegram_repair_bot_prod ls -lh /app/data/bot_database.db* 2>/dev/null || echo "❌ База данных не найдена!"
echo ""

# ===================================================================
# 4. Проверка мастеров и их групп
# ===================================================================
echo "👥 4. Мастера и их рабочие группы:"
echo "─────────────────────────────────────────────────────────────────"
docker exec telegram_repair_bot_prod sqlite3 /app/data/bot_database.db \
  "SELECT
    m.telegram_id,
    COALESCE(u.first_name || ' ' || u.last_name, u.first_name, 'Unknown') as name,
    m.specialization,
    CASE
      WHEN m.work_chat_id IS NULL THEN '[❌ НЕТ ГРУППЫ]'
      ELSE '[✅ ID: ' || m.work_chat_id || ']'
    END as work_chat,
    CASE WHEN m.is_active = 1 THEN '✅' ELSE '❌' END as active,
    CASE WHEN m.is_approved = 1 THEN '✅' ELSE '❌' END as approved
  FROM masters m
  LEFT JOIN users u ON m.telegram_id = u.telegram_id
  ORDER BY m.id;" 2>/dev/null || echo "❌ Ошибка запроса к БД"
echo ""

# ===================================================================
# 5. Проверка подключения через Python
# ===================================================================
echo "🐍 5. Проверка подключения через Python:"
echo "─────────────────────────────────────────────────────────────────"
docker exec telegram_repair_bot_prod python -c "
import asyncio
from app.database import Database

async def test():
    try:
        db = Database()
        await db.connect()
        print('✅ Подключение к БД успешно')

        # Проверяем USE_ORM
        from app.core.config import Config
        print(f'   USE_ORM: {Config.USE_ORM}')
        print(f'   DATABASE_PATH: {Config.DATABASE_PATH}')

        await db.disconnect()
    except Exception as e:
        print(f'❌ Ошибка подключения: {e}')

asyncio.run(test())
" 2>/dev/null || echo "❌ Ошибка выполнения Python скрипта"
echo ""

# ===================================================================
# 6. Последние логи с ошибками
# ===================================================================
echo "📋 6. Последние ошибки в логах:"
echo "─────────────────────────────────────────────────────────────────"
docker logs telegram_repair_bot_prod 2>&1 | grep -i "error\|warning\|exception" | tail -5 || echo "✅ Ошибок не найдено"
echo ""

# ===================================================================
# 7. Проверка Redis
# ===================================================================
echo "💾 7. Статус Redis:"
echo "─────────────────────────────────────────────────────────────────"
docker exec telegram_bot_redis_prod redis-cli ping 2>/dev/null || echo "❌ Redis не отвечает"
echo ""

# ===================================================================
# 8. Использование диска
# ===================================================================
echo "💿 8. Использование диска (data/, logs/, backups/):"
echo "─────────────────────────────────────────────────────────────────"
du -sh data/ logs/ backups/ 2>/dev/null || echo "❌ Директории не найдены"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ Диагностика завершена!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
