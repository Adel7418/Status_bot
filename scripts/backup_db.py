"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python backup_db.py
"""

import io
import os
import shutil
import sys
from datetime import datetime, timedelta


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")


def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    return f"{size_bytes / 1024:.2f} KB"


def backup_database(keep_days=30):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Args:
        keep_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    """

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Docker: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    db_file = os.environ.get("DATABASE_PATH", "bot_database.db")
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ DATABASE_PATH, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è backups
    if os.path.isabs(db_file):
        # –í Docker: /app/data/bot_database.db -> backups –≤ /app/backups
        backup_dir = "/app/backups"
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ: bot_database.db -> backups –≤ ./backups
        backup_dir = "backups"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î
    if not os.path.exists(db_file):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_file}")
        return False
    
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_file}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è backup
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {backup_dir}")
    else:
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {backup_dir}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
    os.path.getsize(db_file)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    backup_file = os.path.join(backup_dir, f"bot_database_{timestamp}.db")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    try:
        shutil.copy2(db_file, backup_file)
        db_size = os.path.getsize(backup_file)
        print(f"‚úÖ Backup —Å–æ–∑–¥–∞–Ω: {backup_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {format_size(db_size)}")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ backup: {e}")
        return False

    # –ü–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_files = [
        f for f in os.listdir(backup_dir) if f.startswith("bot_database_") and f.endswith(".db")
    ]
    backup_files.sort(reverse=True)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π
    cutoff_date = datetime.now() - timedelta(days=keep_days)
    deleted_count = 0

    for backup_filename in backup_files:
        backup_path = os.path.join(backup_dir, backup_filename)
        file_time = datetime.fromtimestamp(os.path.getmtime(backup_path))

        if file_time < cutoff_date:
            try:
                os.remove(backup_path)
                deleted_count += 1
            except Exception:
                pass

    if deleted_count > 0:
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö backups: {deleted_count}")

    # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    print(f"\nüì¶ –í—Å–µ–≥–æ backups: {len(backup_files)}")
    recent_backups = backup_files[:5]
    if recent_backups:
        print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 backups:")
        for backup_filename in recent_backups:
            backup_path = os.path.join(backup_dir, backup_filename)
            size = os.path.getsize(backup_path)
            mtime = datetime.fromtimestamp(os.path.getmtime(backup_path))
            print(f"  - {backup_filename} ({format_size(size)}) - {mtime.strftime('%Y-%m-%d %H:%M:%S')}")

    return True


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument(
        "--keep-days",
        type=int,
        default=30,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)",
    )

    args = parser.parse_args()

    success = backup_database(keep_days=args.keep_days)

    if not success:
        sys.exit(1)
