"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
"""

import io
import sqlite3
import sys


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    conn = sqlite3.connect("bot_database.db")
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute(
        """
        SELECT id, telegram_id, username, first_name, last_name, role, created_at
        FROM users
        ORDER BY created_at DESC
    """
    )
    users = cursor.fetchall()

    print("\n" + "=" * 80)
    print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò")
    print("=" * 80)

    if users:
        print(f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n")
        for user in users:
            print(f"ID: {user['id']} | TG: {user['telegram_id']}")
            print(f"   Username: @{user['username'] or '-'}")
            print(f"   –ò–º—è: {user['first_name'] or '-'} {user['last_name'] or '-'}")
            print(f"   –†–æ–ª—å: {user['role']}")
            print(f"   –°–æ–∑–¥–∞–Ω: {user['created_at']}")
            print()
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
    cursor.execute(
        """
        SELECT m.id, m.telegram_id, u.first_name, u.last_name,
               m.phone, m.specialization, m.is_active, m.is_approved,
               m.work_chat_id
        FROM masters m
        LEFT JOIN users u ON m.telegram_id = u.telegram_id
        ORDER BY m.created_at DESC
    """
    )
    masters = cursor.fetchall()

    print("\n" + "=" * 80)
    print("üë®‚Äçüîß –ú–ê–°–¢–ï–†–ê")
    print("=" * 80)

    if masters:
        print(f"\n–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(masters)}\n")
        for master in masters:
            name = f"{master['first_name'] or ''} {master['last_name'] or ''}".strip() or "-"
            status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if master["is_approved"] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if master["is_active"] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            work_chat = master["work_chat_id"] if master["work_chat_id"] else "-"

            print(f"ID: {master['id']} | TG: {master['telegram_id']}")
            print(f"   –ò–º—è: {name}")
            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {master['phone']}")
            print(f"   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {master['specialization']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {status} | {active}")
            print(f"   –†–∞–±–æ—á–∏–π —á–∞—Ç: {work_chat}")
            print()
    else:
        print("–ú–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ—Ç\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫
    cursor.execute(
        """
        SELECT o.id, o.equipment_type, o.client_name, o.status,
               u1.first_name || ' ' || COALESCE(u1.last_name, '') as dispatcher_name,
               u2.first_name || ' ' || COALESCE(u2.last_name, '') as master_name,
               o.total_amount, o.notes, o.scheduled_time, o.created_at,
               o.dispatcher_id, o.assigned_master_id
        FROM orders o
        LEFT JOIN users u1 ON o.dispatcher_id = u1.telegram_id
        LEFT JOIN masters m ON o.assigned_master_id = m.id
        LEFT JOIN users u2 ON m.telegram_id = u2.telegram_id
        ORDER BY o.created_at DESC
        LIMIT 20
    """
    )
    orders = cursor.fetchall()

    print("\n" + "=" * 80)
    print("üìã –ó–ê–Ø–í–ö–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)")
    print("=" * 80)

    if orders:
        print(f"\n–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –≤—ã–±–æ—Ä–∫–µ: {len(orders)}\n")
        for order in orders:
            status_emoji = {
                "NEW": "üÜï",
                "ASSIGNED": "üë®‚Äçüîß",
                "ACCEPTED": "‚úÖ",
                "ONSITE": "üè†",
                "CLOSED": "üí∞",
                "REFUSED": "‚ùå",
                "DR": "‚è≥",
            }.get(order["status"], "‚ùì")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Å fallback –Ω–∞ ID
            dispatcher_display = (
                order["dispatcher_name"].strip()
                if order["dispatcher_name"] and order["dispatcher_name"].strip()
                else f"ID: {order['dispatcher_id']}"
                if order["dispatcher_id"]
                else "-"
            )
            master_display = (
                order["master_name"].strip()
                if order["master_name"] and order["master_name"].strip()
                else f"Master ID: {order['assigned_master_id']}"
                if order["assigned_master_id"]
                else "-"
            )

            print(f"–ó–∞—è–≤–∫–∞ #{order['id']} | {status_emoji} {order['status']}")
            print(f"   –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {order['equipment_type']}")
            print(f"   –ö–ª–∏–µ–Ω—Ç: {order['client_name']}")
            print(f"   –î–∏—Å–ø–µ—Ç—á–µ—Ä: {dispatcher_display}")
            print(f"   –ú–∞—Å—Ç–µ—Ä: {master_display}")
            if order["notes"]:
                print(f"   üìù –ó–∞–º–µ—Ç–∫–∏: {order['notes']}")
            if order["scheduled_time"]:
                print(f"   ‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {order['scheduled_time']}")
            if order["total_amount"]:
                print(f"   üí∞ –°—É–º–º–∞: {order['total_amount']:.0f} ‚ÇΩ")
            print(f"   –°–æ–∑–¥–∞–Ω–∞: {order['created_at']}")
            print()
    else:
        print("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç\n")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
    cursor.execute(
        """
        SELECT status, COUNT(*) as count
        FROM orders
        GROUP BY status
        ORDER BY count DESC
    """
    )
    stats = cursor.fetchall()

    print("\n" + "=" * 80)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–Ø–í–ö–ê–ú")
    print("=" * 80)

    if stats:
        print()
        for stat in stats:
            status_names = {
                "NEW": "üÜï –ù–æ–≤—ã–µ",
                "ASSIGNED": "üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–µ–Ω—ã",
                "ACCEPTED": "‚úÖ –ü—Ä–∏–Ω—è—Ç—ã",
                "ONSITE": "üè† –ù–∞ –æ–±—ä–µ–∫—Ç–µ",
                "CLOSED": "üí∞ –ó–∞–≤–µ—Ä—à–µ–Ω—ã",
                "REFUSED": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã",
                "DR": "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
            }
            status_name = status_names.get(stat["status"], stat["status"])
            print(f"   {status_name}: {stat['count']}")
        print()
    else:
        print("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    cursor.execute(
        """
        SELECT telegram_id, username, first_name, last_name, role
        FROM users
        WHERE role LIKE '%,%'
        ORDER BY created_at DESC
    """
    )
    multi_role_users = cursor.fetchall()

    if multi_role_users:
        print("\n" + "=" * 80)
        print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –†–û–õ–Ø–ú–ò")
        print("=" * 80)
        print()

        for user in multi_role_users:
            name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip() or "-"
            roles = user["role"].split(",")
            role_names = {
                "ADMIN": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "DISPATCHER": "üìã –î–∏—Å–ø–µ—Ç—á–µ—Ä",
                "MASTER": "üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä",
                "UNKNOWN": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            }
            roles_str = ", ".join([role_names.get(r.strip(), r) for r in roles])

            print(f"TG: {user['telegram_id']} | @{user['username'] or '-'}")
            print(f"   –ò–º—è: {name}")
            print(f"   –†–æ–ª–∏: {roles_str}")
            print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
    cursor.execute(
        """
        SELECT
            h.id,
            h.order_id,
            h.old_status,
            h.new_status,
            h.changed_by,
            u.first_name || ' ' || COALESCE(u.last_name, '') as changed_by_name,
            h.changed_at,
            h.notes
        FROM order_status_history h
        LEFT JOIN users u ON h.changed_by = u.telegram_id
        ORDER BY h.changed_at DESC
        LIMIT 20
    """
    )
    history = cursor.fetchall()

    if history:
        print("\n" + "=" * 80)
        print("üìú –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–ê–¢–£–°–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)")
        print("=" * 80)
        print()

        for h in history:
            changed_by_name = (
                h["changed_by_name"].strip() if h["changed_by_name"] else f"ID: {h['changed_by']}"
            )
            status_names = {
                "NEW": "üÜï –ù–æ–≤–∞—è",
                "ASSIGNED": "üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–µ–Ω–∞",
                "ACCEPTED": "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞",
                "ONSITE": "üè† –ù–∞ –æ–±—ä–µ–∫—Ç–µ",
                "CLOSED": "üí∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
                "REFUSED": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                "DR": "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
            }
            old = status_names.get(h["old_status"], h["old_status"]) if h["old_status"] else "-"
            new = status_names.get(h["new_status"], h["new_status"])

            print(f"–ó–∞—è–≤–∫–∞ #{h['order_id']} | {old} ‚Üí {new}")
            print(f"   –ò–∑–º–µ–Ω–∏–ª: {changed_by_name}")
            print(f"   –í—Ä–µ–º—è: {h['changed_at']}")
            if h["notes"]:
                print(f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {h['notes']}")
            print()

    conn.close()


if __name__ == "__main__":
    try:
        check_database()
    except Exception:
        import traceback

        traceback.print_exc()
