#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
"""

import asyncio
import sys
import io
from pathlib import Path
from datetime import datetime

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.services.reports_service import ReportsService


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞")
    print("=" * 60)

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤...")
        reports_service = ReportsService()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        report = await reports_service.generate_daily_report()

        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"   –¢–∏–ø: {report['type']}")
        print(f"   –ü–µ—Ä–∏–æ–¥: {report['period']}")
        print(f"   –ó–∞–∫–∞–∑–æ–≤ –≤—Å–µ–≥–æ: {report['orders']['total_orders']}")
        print(f"   –ó–∞–∫—Ä—ã—Ç—ã—Ö: {report['orders']['closed_orders']}")
        print(f"   –ú–∞—Å—Ç–µ—Ä–æ–≤: {len(report['masters'])}")

        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è Excel (—Ç.–∫. generate_daily_report –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
        await reports_service.db.connect()

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel...")
            excel_path = await reports_service.save_report_to_excel(
                report,
                filename=f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            )
        finally:
            await reports_service.db.disconnect()

        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Å—Ç–æ–≤ –≤ Excel...")
        try:
            from openpyxl import load_workbook

            wb = load_workbook(excel_path)
            sheet_names = wb.sheetnames

            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(sheet_names)}")
            for i, name in enumerate(sheet_names, 1):
                print(f"   {i}. {name}")

            wb.close()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –ª–∏—Å—Ç–æ–≤
            expected_sheets = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ó–∞–∫–∞–∑—ã", "–ú–∞—Å—Ç–µ—Ä–∞", "–ó–∞—è–≤–∫–∏ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º"]
            found_all = all(s in sheet_names for s in expected_sheets)

            if found_all:
                print("\nüéâ –í–°–ï 4 –õ–ò–°–¢–ê –ù–ê –ú–ï–°–¢–ï!")
            else:
                print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ª–∏—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:")
                for s in expected_sheets:
                    status = "‚úÖ" if s in sheet_names else "‚ùå"
                    print(f"   {status} {s}")

        except ImportError:
            print("‚ö†Ô∏è  openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Å—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            print("   –§–∞–π–ª —Å–æ–∑–¥–∞–Ω, –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ Excel –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 60)
        print(f"\nüìÇ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: {excel_path}")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ 4 –ª–∏—Å—Ç–∞!")
        print()

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
