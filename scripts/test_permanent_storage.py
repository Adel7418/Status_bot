#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
"""

import asyncio
import io
import sys
from pathlib import Path


# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding="utf-8")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from datetime import datetime

from app.database.db import Database


async def test_soft_delete_schema():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–µ–π soft delete –≤ —Å—Ö–µ–º–µ"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î")
    print("=" * 60)

    db = Database()
    await db.connect()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ deleted_at –≤ orders
        cursor = await db.connection.execute(
            "SELECT sql FROM sqlite_master WHERE type='table' AND name='orders'"
        )
        schema = await cursor.fetchone()

        if schema and "deleted_at" in schema["sql"]:
            print("‚úÖ –ü–æ–ª–µ deleted_at –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ orders")
        else:
            print("‚ùå –ü–æ–ª–µ deleted_at –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ orders")
            print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: alembic upgrade head")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor = await db.connection.execute(
            """
            SELECT name FROM sqlite_master
            WHERE type='index' AND tbl_name='orders'
            AND name LIKE '%deleted%'
            """
        )
        indexes = await cursor.fetchall()

        if indexes:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è deleted_at: {len(indexes)} —à—Ç.")
            for idx in indexes:
                print(f"   - {idx['name']}")
        else:
            print("‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è deleted_at –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    finally:
        await db.disconnect()


async def test_history_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∏—Å—Ç–æ—Ä–∏–∏"""
    print("\n" + "=" * 60)
    print("üìä –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∏—Å—Ç–æ—Ä–∏–∏")
    print("=" * 60)

    db = Database()
    await db.connect()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º order_status_history
        cursor = await db.connection.execute(
            "SELECT name FROM sqlite_master WHERE type='table' AND name='order_status_history'"
        )
        table = await cursor.fetchone()

        if table:
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
            cursor = await db.connection.execute("SELECT COUNT(*) as cnt FROM order_status_history")
            count = await cursor.fetchone()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ order_status_history –Ω–∞–π–¥–µ–Ω–∞ ({count['cnt']} –∑–∞–ø–∏—Å–µ–π)")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ order_status_history –ù–ï –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º entity_history
        cursor = await db.connection.execute(
            "SELECT name FROM sqlite_master WHERE type='table' AND name='entity_history'"
        )
        table = await cursor.fetchone()

        if table:
            cursor = await db.connection.execute("SELECT COUNT(*) as cnt FROM entity_history")
            count = await cursor.fetchone()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ entity_history –Ω–∞–π–¥–µ–Ω–∞ ({count['cnt']} –∑–∞–ø–∏—Å–µ–π)")
        else:
            print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ entity_history –ù–ï –Ω–∞–π–¥–µ–Ω–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º audit_log
        cursor = await db.connection.execute(
            "SELECT name FROM sqlite_master WHERE type='table' AND name='audit_log'"
        )
        table = await cursor.fetchone()

        if table:
            cursor = await db.connection.execute("SELECT COUNT(*) as cnt FROM audit_log")
            count = await cursor.fetchone()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ audit_log –Ω–∞–π–¥–µ–Ω–∞ ({count['cnt']} –∑–∞–ø–∏—Å–µ–π)")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ audit_log –ù–ï –Ω–∞–π–¥–µ–Ω–∞")

    finally:
        await db.disconnect()


async def test_orders_statistics():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º"""
    print("\n" + "=" * 60)
    print("üìà –¢–ï–°–¢ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫")
    print("=" * 60)

    db = Database()
    await db.connect()

    try:
        # –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫
        cursor = await db.connection.execute("SELECT COUNT(*) as cnt FROM orders")
        total = await cursor.fetchone()
        print(f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ: {total['cnt']}")

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
        cursor = await db.connection.execute(
            "SELECT COUNT(*) as cnt FROM orders WHERE deleted_at IS NULL"
        )
        active = await cursor.fetchone()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {active['cnt']}")

        # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        cursor = await db.connection.execute(
            "SELECT COUNT(*) as cnt FROM orders WHERE deleted_at IS NOT NULL"
        )
        deleted = await cursor.fetchone()
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {deleted['cnt']}")

        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
        cursor = await db.connection.execute(
            """
            SELECT status, COUNT(*) as cnt
            FROM orders
            WHERE deleted_at IS NULL
            GROUP BY status
            ORDER BY cnt DESC
            """
        )
        statuses = await cursor.fetchall()

        if statuses:
            print("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–∞–∫—Ç–∏–≤–Ω—ã–µ):")
            for row in statuses:
                print(f"   {row['status']}: {row['cnt']}")

    finally:
        await db.disconnect()


async def test_encryption():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "=" * 60)
    print("üîê –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)

    try:
        from app.utils.encryption import decrypt, encrypt

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            "79991234567",
            "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞ 1",
            "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ü–µ—Ç—Ä–æ–≤",
        ]

        all_ok = True
        for data in test_data:
            encrypted = encrypt(data)
            decrypted = decrypt(encrypted)

            if data == decrypted:
                print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω:")
                print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª:  {data[:30]}...")
                print(f"   –®–∏—Ñ—Ä:      {encrypted[:30]}...")
                print(f"   –î–µ—à–∏—Ñ—Ä:    {decrypted[:30]}...")
            else:
                print(f"‚ùå –¢–µ—Å—Ç –ù–ï –ø—Ä–æ–π–¥–µ–Ω: {data}")
                all_ok = False

        if all_ok:
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")

    except ImportError:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å encryption –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: app/utils/encryption.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ ENCRYPTION_KEY –≤ .env")


async def test_search_performance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
    print("\n" + "=" * 60)
    print("‚ö° –¢–ï–°–¢ 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞")
    print("=" * 60)

    db = Database()
    await db.connect()

    try:
        # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ ID (—Å –∏–Ω–¥–µ–∫—Å–æ–º)
        start = datetime.now()
        cursor = await db.connection.execute("SELECT * FROM orders WHERE id = 1")
        await cursor.fetchone()
        time1 = (datetime.now() - start).total_seconds() * 1000

        print(f"‚ö° –ü–æ–∏—Å–∫ –ø–æ ID: {time1:.2f} –º—Å")

        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É (—Å –∏–Ω–¥–µ–∫—Å–æ–º)
        start = datetime.now()
        cursor = await db.connection.execute(
            "SELECT * FROM orders WHERE deleted_at IS NULL AND status = 'NEW' LIMIT 10"
        )
        await cursor.fetchall()
        time2 = (datetime.now() - start).total_seconds() * 1000

        print(f"‚ö° –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {time2:.2f} –º—Å")

        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å JOIN
        start = datetime.now()
        cursor = await db.connection.execute(
            """
            SELECT o.*, u.first_name
            FROM orders o
            LEFT JOIN users u ON o.dispatcher_id = u.telegram_id
            WHERE o.deleted_at IS NULL
            LIMIT 10
            """
        )
        await cursor.fetchall()
        time3 = (datetime.now() - start).total_seconds() * 1000

        print(f"‚ö° –ü–æ–∏—Å–∫ —Å JOIN: {time3:.2f} –º—Å")

        # –û—Ü–µ–Ω–∫–∞
        if time3 < 100:
            print("\n‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è!")
        elif time3 < 500:
            print("\n‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è")
        else:
            print("\n‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    finally:
        await db.disconnect()


async def test_indexes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤")
    print("=" * 60)

    db = Database()
    await db.connect()

    try:
        cursor = await db.connection.execute(
            """
            SELECT name, tbl_name
            FROM sqlite_master
            WHERE type='index' AND tbl_name IN ('orders', 'users', 'masters')
            ORDER BY tbl_name, name
            """
        )
        indexes = await cursor.fetchall()

        if indexes:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}\n")

            current_table = None
            for idx in indexes:
                if idx["tbl_name"] != current_table:
                    current_table = idx["tbl_name"]
                    print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {current_table}")

                print(f"   - {idx['name']}")
        else:
            print("‚ùå –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    finally:
        await db.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–°–¢–û–Ø–ù–ù–û–ì–û –•–†–ê–ù–ï–ù–ò–Ø")
    print("=" * 60)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        await test_soft_delete_schema()
        await test_history_tables()
        await test_orders_statistics()
        await test_encryption()
        await test_search_performance()
        await test_indexes()

        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 60)
        print("\nüìö –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º.:")
        print("   - docs/–ü–û–°–¢–û–Ø–ù–ù–û–ï_–•–†–ê–ù–ï–ù–ò–ï_–ó–ê–Ø–í–û–ö.md")
        print("   - docs/QUICKSTART_PERMANENT_STORAGE.md")
        print("   - docs/PERMANENT_STORAGE_GUIDE.md")
        print()

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
