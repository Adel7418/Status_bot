#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–æ–≤—ã—Ö handlers
"""

import asyncio
import io
import sys
from pathlib import Path


# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding="utf-8")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))


def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π")
    print("=" * 60)

    try:
        print("–ò–º–ø–æ—Ä—Ç admin_history handler...", end=" ")
        print("‚úÖ")

        print("–ò–º–ø–æ—Ä—Ç OrderRepositoryExtended...", end=" ")
        print("‚úÖ")

        print("–ò–º–ø–æ—Ä—Ç SearchService...", end=" ")
        print("‚úÖ")

        print("–ò–º–ø–æ—Ä—Ç encryption (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)...", end=" ")
        try:
            from app.utils.encryption import decrypt, encrypt

            print("‚úÖ")
        except ImportError:
            print("‚ö†Ô∏è  (cryptography –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)")

        print("\n‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_router_registration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ router"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ router")
    print("=" * 60)

    try:
        from app.handlers import routers

        print(f"–í—Å–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(routers)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ admin_history_router
        from app.handlers.admin_history import router as admin_history_router

        if admin_history_router in routers:
            print("‚úÖ admin_history_router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå admin_history_router –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return False

        # –í aiogram 3.x –∞—Ç—Ä–∏–±—É—Ç handlers –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ observer (–Ω–æ–≤—ã–π API)
        if hasattr(admin_history_router, "observers"):
            print("‚úÖ Router observers –¥–æ—Å—Ç—É–ø–Ω—ã (aiogram 3.x)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ router - —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä Router
        from aiogram import Router

        if isinstance(admin_history_router, Router):
            print("‚úÖ admin_history_router - –≤–∞–ª–∏–¥–Ω—ã–π Router")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
        from app.handlers import admin_history

        functions = [
            "cmd_history",
            "cmd_deleted_orders",
            "cmd_search",
            "callback_history_status",
            "callback_deleted_orders",
        ]
        found = sum(1 for f in functions if hasattr(admin_history, f))
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π –≤ –º–æ–¥—É–ª–µ: {found}/{len(functions)}")

        print("\n‚úÖ Router –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_functions_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 60)

    try:
        from app.handlers import admin_history

        functions = [
            "cmd_history",
            "cmd_deleted_orders",
            "cmd_search",
            "cmd_restore_order",
            "callback_history_status",
            "callback_history_changes",
            "callback_history_audit",
            "callback_history_full",
            "callback_deleted_orders",
            "callback_restore_order",
            "callback_view_deleted",
        ]

        for func_name in functions:
            if hasattr(admin_history, func_name):
                print(f"‚úÖ {func_name}")
            else:
                print(f"‚ùå {func_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

        print("\n‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
        return True

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_keyboards_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("=" * 60)

    try:
        from app.handlers import admin_history

        keyboards = [
            "get_history_keyboard",
            "get_deleted_orders_keyboard",
            "get_restore_keyboard",
        ]

        for kb_name in keyboards:
            if hasattr(admin_history, kb_name):
                func = getattr(admin_history, kb_name)

                # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å
                if kb_name == "get_history_keyboard":
                    kb = func(order_id=1)
                elif kb_name == "get_deleted_orders_keyboard":
                    kb = func(page=0)
                elif kb_name == "get_restore_keyboard":
                    kb = func(order_id=1)

                buttons_count = sum(len(row) for row in kb.inline_keyboard)
                print(f"‚úÖ {kb_name} ({buttons_count} –∫–Ω–æ–ø–æ–∫)")
            else:
                print(f"‚ùå {kb_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

        print("\n‚úÖ –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        import traceback

        traceback.print_exc()
        return False


async def test_repository_methods():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    print("=" * 60)

    try:
        from app.database.db import Database
        from app.repositories.order_repository_extended import OrderRepositoryExtended

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        db = Database()
        await db.connect()

        try:
            repo = OrderRepositoryExtended(db.connection)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
            methods = [
                "soft_delete",
                "restore",
                "get_by_id",
                "get_all",
                "search_orders",
                "get_deleted_orders",
                "get_full_history",
                "get_statistics",
            ]

            for method_name in methods:
                if hasattr(repo, method_name):
                    print(f"‚úÖ {method_name}")
                else:
                    print(f"‚ùå {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await repo.get_statistics(include_deleted=True)
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}")
            print(f"   –£–¥–∞–ª–µ–Ω–æ: {stats['deleted']}")

            print("\n‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!")
            return True

        finally:
            await db.disconnect()

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
        import traceback

        traceback.print_exc()
        return False


async def test_search_service():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞")
    print("=" * 60)

    try:
        from app.database.db import Database
        from app.repositories.order_repository_extended import OrderRepositoryExtended
        from app.services.search_service import SearchService

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        db = Database()
        await db.connect()

        try:
            repo = OrderRepositoryExtended(db.connection)
            service = SearchService(repo)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
            methods = [
                "search",
                "search_by_id",
                "search_by_client_phone",
                "search_by_client_name",
                "search_by_date_range",
                "search_deleted_orders",
                "get_full_order_history",
                "get_statistics",
                "format_search_results",
            ]

            for method_name in methods:
                if hasattr(service, method_name):
                    print(f"‚úÖ {method_name}")
                else:
                    print(f"‚ùå {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

            # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫
            results = await service.search(limit=5)
            print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {len(results)} –∑–∞—è–≤–æ–∫")

            # –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            formatted = service.format_search_results(results[:2])
            print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(formatted)} —Å–∏–º–≤–æ–ª–æ–≤)")

            print("\n‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True

        finally:
            await db.disconnect()

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        import traceback

        traceback.print_exc()
        return False


def test_documentation_exists():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    print("=" * 60)

    docs = [
        ("docs/USAGE_HISTORY_FEATURES.md", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"),
        ("docs/–ü–û–°–¢–û–Ø–ù–ù–û–ï_–•–†–ê–ù–ï–ù–ò–ï_–ó–ê–Ø–í–û–ö.md", "–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"),
        ("docs/QUICKSTART_PERMANENT_STORAGE.md", "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"),
        ("docs/PERMANENT_STORAGE_GUIDE.md", "–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"),
        ("docs/PERMANENT_STORAGE_EXAMPLES.md", "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞"),
        ("PERMANENT_STORAGE_README.md", "README"),
        ("SUMMARY_PERMANENT_STORAGE.md", "–†–µ–∑—é–º–µ"),
        ("–î–û–†–ê–ë–û–¢–ö–ê_–°–ò–°–¢–ï–ú–´_–ì–û–¢–û–í–û.md", "–û—Ç—á–µ—Ç –æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"),
    ]

    found = 0
    for doc_path, doc_name in docs:
        if Path(doc_path).exists():
            size = Path(doc_path).stat().st_size
            print(f"‚úÖ {doc_name} ({size} –±–∞–π—Ç)")
            found += 1
        else:
            print(f"‚ùå {doc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_path}")

    print(f"\nüìö –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {found}/{len(docs)}")

    if found == len(docs):
        print("‚úÖ –í—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –º–µ—Å—Ç–µ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–†–ê–ë–û–¢–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)

    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_imports),
        ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è router", test_router_registration),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π", test_functions_exist),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä", test_keyboards_exist),
        ("–ú–µ—Ç–æ–¥—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", test_repository_methods),
        ("–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞", test_search_service),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", test_documentation_exists),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ {test_name}: {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")

    print("\n" + "=" * 60)
    print(f"–£—Å–ø–µ—à–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("=" * 60)
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüìö –ß–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:")
        print("   - docs/USAGE_HISTORY_FEATURES.md")
        print("   - docs/–ü–û–°–¢–û–Ø–ù–ù–û–ï_–•–†–ê–ù–ï–ù–ò–ï_–ó–ê–Ø–í–û–ö.md")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
        print("   python bot.py")
        print()
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("=" * 60)
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")

    print()


if __name__ == "__main__":
    asyncio.run(main())
