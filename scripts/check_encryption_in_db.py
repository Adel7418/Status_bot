"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
ROOT_DIR = Path(__file__).parent.parent
sys.path.insert(0, str(ROOT_DIR))

from dotenv import load_dotenv
from app.database import Database
from app.utils.encryption import is_encrypted, decrypt


def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70)


async def check_orders_encryption():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ orders"""
    print_section("–ü–†–û–í–ï–†–ö–ê –®–ò–§–†–û–í–ê–ù–ò–Ø –í –¢–ê–ë–õ–ò–¶–ï ORDERS")

    db = Database()
    await db.connect()

    try:
        cursor = await db.connection.execute(
            "SELECT id, phone, client_name, address FROM orders LIMIT 20"
        )
        rows = await cursor.fetchall()

        if not rows:
            print("‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ orders –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        stats = {
            'total': 0,
            'phone_encrypted': 0,
            'name_encrypted': 0,
            'address_encrypted': 0,
            'phone_total': 0,
            'name_total': 0,
            'address_total': 0,
        }

        print(f"\n–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(rows)}")
        print("-" * 70)

        for row in rows:
            order_id = row['id']
            phone = row['phone']
            client_name = row['client_name']
            address = row['address']

            stats['total'] += 1

            print(f"\nüìã –ó–∞—è–≤–∫–∞ #{order_id}:")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if phone:
                stats['phone_total'] += 1
                phone_enc = is_encrypted(phone)
                stats['phone_encrypted'] += 1 if phone_enc else 0

                if phone_enc:
                    decrypted = decrypt(phone)
                    print(f"  üì± –¢–µ–ª–µ—Ñ–æ–Ω: üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted})")
                else:
                    print(f"  üì± –¢–µ–ª–µ—Ñ–æ–Ω: ‚ö†Ô∏è  –ù–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω ({phone})")
            else:
                print(f"  üì± –¢–µ–ª–µ—Ñ–æ–Ω: (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
            if client_name:
                stats['name_total'] += 1
                name_enc = is_encrypted(client_name)
                stats['name_encrypted'] += 1 if name_enc else 0

                if name_enc:
                    decrypted = decrypt(client_name)
                    print(f"  üë§ –ò–º—è: üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted})")
                else:
                    print(f"  üë§ –ò–º—è: ‚ö†Ô∏è  –ù–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ ({client_name})")
            else:
                print(f"  üë§ –ò–º—è: (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞
            if address:
                stats['address_total'] += 1
                addr_enc = is_encrypted(address)
                stats['address_encrypted'] += 1 if addr_enc else 0

                if addr_enc:
                    decrypted = decrypt(address)
                    print(f"  üìç –ê–¥—Ä–µ—Å: üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted[:30]}...)")
                else:
                    print(f"  üìç –ê–¥—Ä–µ—Å: ‚ö†Ô∏è  –ù–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω ({address[:30]}...)")
            else:
                print(f"  üìç –ê–¥—Ä–µ—Å: (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print_section("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –®–ò–§–†–û–í–ê–ù–ò–Ø")

        print(f"\nüìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}")

        if stats['phone_total'] > 0:
            phone_percent = (stats['phone_encrypted'] / stats['phone_total']) * 100
            print(f"\nüì± –¢–µ–ª–µ—Ñ–æ–Ω—ã:")
            print(f"   –í—Å–µ–≥–æ: {stats['phone_total']}")
            print(f"   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {stats['phone_encrypted']} ({phone_percent:.1f}%)")
            print(f"   –ù–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {stats['phone_total'] - stats['phone_encrypted']}")

        if stats['name_total'] > 0:
            name_percent = (stats['name_encrypted'] / stats['name_total']) * 100
            print(f"\nüë§ –ò–º–µ–Ω–∞:")
            print(f"   –í—Å–µ–≥–æ: {stats['name_total']}")
            print(f"   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {stats['name_encrypted']} ({name_percent:.1f}%)")
            print(f"   –ù–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {stats['name_total'] - stats['name_encrypted']}")

        if stats['address_total'] > 0:
            addr_percent = (stats['address_encrypted'] / stats['address_total']) * 100
            print(f"\nüìç –ê–¥—Ä–µ—Å–∞:")
            print(f"   –í—Å–µ–≥–æ: {stats['address_total']}")
            print(f"   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {stats['address_encrypted']} ({addr_percent:.1f}%)")
            print(f"   –ù–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {stats['address_total'] - stats['address_encrypted']}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        total_fields = stats['phone_total'] + stats['name_total'] + stats['address_total']
        total_encrypted = stats['phone_encrypted'] + stats['name_encrypted'] + stats['address_encrypted']

        if total_fields > 0:
            overall_percent = (total_encrypted / total_fields) * 100
            print(f"\nüìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {overall_percent:.1f}%")

            if overall_percent < 100:
                print("\n‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                print("   –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã!")
                print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
                print("   –°–º. docs/ENCRYPTION_GUIDE.md —Ä–∞–∑–¥–µ–ª '–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö'")
            else:
                print("\n‚úÖ –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã!")

    finally:
        await db.disconnect()


async def check_users_encryption():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ users"""
    print_section("–ü–†–û–í–ï–†–ö–ê –®–ò–§–†–û–í–ê–ù–ò–Ø –í –¢–ê–ë–õ–ò–¶–ï USERS")

    db = Database()
    await db.connect()

    try:
        cursor = await db.connection.execute(
            "SELECT id, username, first_name, last_name FROM users LIMIT 10"
        )
        rows = await cursor.fetchall()

        if not rows:
            print("‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ users –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        print(f"\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(rows)}")
        print("-" * 70)

        for row in rows:
            user_id = row['id']
            username = row['username']
            first_name = row['first_name']
            last_name = row['last_name']

            print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}:")
            print(f"   Username: {username if username else '(–Ω–µ—Ç)'}")

            # –ò–º—è –æ–±—ã—á–Ω–æ –Ω–µ —à–∏—Ñ—Ä—É–µ—Ç—Å—è, —Ç.–∫. —ç—Ç–æ –ø—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Telegram
            print(f"   –ò–º—è: {first_name if first_name else '(–Ω–µ—Ç)'}")
            print(f"   –§–∞–º–∏–ª–∏—è: {last_name if last_name else '(–Ω–µ—Ç)'}")

        print("\n‚ÑπÔ∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram –æ–±—ã—á–Ω–æ –Ω–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è,")
        print("   —Ç.–∫. —ç—Ç–æ –ø—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –®–∏—Ñ—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("   –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∑–∞—è–≤–∫–∞—Ö (—Ç–µ–ª–µ—Ñ–æ–Ω—ã, –∞–¥—Ä–µ—Å–∞).")

    finally:
        await db.disconnect()


async def test_encryption_roundtrip():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –ë–î"""
    print_section("–¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –®–ò–§–†–û–í–ê–ù–ò–Ø –° –ë–î")

    from app.utils.encryption import encrypt, decrypt

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_phone = "+79991234567"
    test_name = "–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á"
    test_address = "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 123"

    print("\nüìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {test_phone}")
    print(f"   –ò–º—è: {test_name}")
    print(f"   –ê–¥—Ä–µ—Å: {test_address}")

    # –®–∏—Ñ—Ä—É–µ–º
    encrypted_phone = encrypt(test_phone)
    encrypted_name = encrypt(test_name)
    encrypted_address = encrypt(test_address)

    print("\nüîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {encrypted_phone[:50]}...")
    print(f"   –ò–º—è: {encrypted_name[:50]}...")
    print(f"   –ê–¥—Ä–µ—Å: {encrypted_address[:50]}...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db = Database()
    await db.connect()

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        cursor = await db.connection.execute(
            """
            INSERT INTO orders (
                phone, client_name, address,
                description, equipment_type, status,
                created_at
            ) VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
            """,
            (
                encrypted_phone,
                encrypted_name,
                encrypted_address,
                "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è",
                "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                "new",
            )
        )
        await db.connection.commit()
        order_id = cursor.lastrowid

        print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î (–∑–∞—è–≤–∫–∞ #{order_id})")

        # –ß–∏—Ç–∞–µ–º –∏–∑ –ë–î
        cursor = await db.connection.execute(
            "SELECT phone, client_name, address FROM orders WHERE id = ?",
            (order_id,)
        )
        row = await cursor.fetchone()

        # –î–µ—à–∏—Ñ—Ä—É–µ–º
        decrypted_phone = decrypt(row['phone'])
        decrypted_name = decrypt(row['client_name'])
        decrypted_address = decrypt(row['address'])

        print(f"\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:")
        print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {decrypted_phone}")
        print(f"   –ò–º—è: {decrypted_name}")
        print(f"   –ê–¥—Ä–µ—Å: {decrypted_address}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        success = (
            test_phone == decrypted_phone
            and test_name == decrypted_name
            and test_address == decrypted_address
        )

        if success:
            print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã!")
        else:
            print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
        await db.connection.execute("DELETE FROM orders WHERE id = ?", (order_id,))
        await db.connection.commit()
        print(f"\nüóëÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_id} —É–¥–∞–ª–µ–Ω–∞")

        return success

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

    finally:
        await db.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîê" * 35)
    print("  –ü–†–û–í–ï–†–ö–ê –®–ò–§–†–û–í–ê–ù–ò–Ø –î–ê–ù–ù–´–• –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("üîê" * 35)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        await check_orders_encryption()
        await check_users_encryption()

        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        test_result = await test_encryption_roundtrip()

        # –ò—Ç–æ–≥–∏
        print_section("–ò–¢–û–ì–ò")

        if test_result:
            print("\n‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º!")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

        print("\nüìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º.:")
        print("   docs/ENCRYPTION_GUIDE.md")

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

    print("\n" + "=" * 70)


if __name__ == "__main__":
    asyncio.run(main())
