#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º LONG_REPAIR (DR)
"""

import asyncio
import sys
from pathlib import Path


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from app.config import OrderStatus
from app.database import Database


async def delete_long_repair_order(order_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º LONG_REPAIR (DR)

    Args:
        order_id: ID –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        order = await db.get_order_by_id(order_id)

        if not order:
            print(f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        if order.status != OrderStatus.DR:
            print(
                f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ LONG_REPAIR (DR). –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {order.status}"
            )
            return False

        print(f"üìã –ó–∞—è–≤–∫–∞ #{order_id}:")
        print(f"   üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}")
        print(f"   üì± –¢–µ—Ö–Ω–∏–∫–∞: {order.equipment_type}")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {order.status}")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input(f"\n‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{order_id}? (yes/no): ")

        if confirm.lower() not in ["yes", "y", "–¥–∞", "–¥"]:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return False

        # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        success = await db.soft_delete_order(order_id)

        if success:
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞—É–¥–∏—Ç
            await db.add_audit_log(
                user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                action="DELETE_ORDER_SCRIPT",
                details=f"Order #{order_id} with LONG_REPAIR status deleted by script",
            )

            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{order_id}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

    finally:
        await db.disconnect()


async def list_long_repair_orders():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º LONG_REPAIR"""
    db = Database()
    await db.connect()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º DR
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
        async with db.get_session() as session:
            from sqlalchemy import text

            result = await session.execute(
                text("SELECT * FROM orders WHERE status = :status"), {"status": OrderStatus.DR}
            )
            orders = result.fetchall()

        if not orders:
            print("‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º LONG_REPAIR (DR)")
            return

        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º LONG_REPAIR: {len(orders)}\n")

        for order in orders:
            print(f"üìã –ó–∞—è–≤–∫–∞ #{order.id}:")
            print(f"   üë§ –ö–ª–∏–µ–Ω—Ç: {order.client_name}")
            print(f"   üì± –¢–µ—Ö–Ω–∏–∫–∞: {order.equipment_type}")
            print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order.description}")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {order.created_at}")
            print()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}")

    finally:
        await db.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("Script for deleting orders with LONG_REPAIR status\n")

    if len(sys.argv) > 1:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
        try:
            order_id = int(sys.argv[1])
            await delete_long_repair_order(order_id)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        await list_long_repair_orders()
        print("\nFor deleting specific order use:")
        print("   python delete_long_repair_order.py <ORDER_ID>")


if __name__ == "__main__":
    asyncio.run(main())
