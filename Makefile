# ========================================
# Makefile –¥–ª—è Telegram Repair Bot
# ========================================

.PHONY: help install test lint run

# ========================================
# HELP
# ========================================

help:  ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# ========================================
# LOCAL DEVELOPMENT
# ========================================

install:  ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install -r requirements.txt

install-dev:  ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install -r requirements-dev.txt
	pre-commit install

run:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
	python bot.py

test:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	pytest

test-cov:  ## –¢–µ—Å—Ç—ã —Å coverage
	pytest --cov=app --cov-report=html --cov-report=term-missing

lint:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥
	ruff check .
	mypy app/ --ignore-missing-imports

format:  ## –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	ruff check --fix .
	ruff format .

pre-commit:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit
	pre-commit run --all-files

# ========================================
# DATABASE MIGRATIONS (local)
# ========================================

migrate:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
	alembic upgrade head

migrate-create:  ## –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é (make migrate-create MSG="–æ–ø–∏—Å–∞–Ω–∏–µ")
	alembic revision --autogenerate -m "$(MSG)"

migrate-history:  ## –ò—Å—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
	alembic history

migrate-current:  ## –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ë–î
	alembic current

migrate-rollback:  ## –û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
	alembic downgrade -1

# ========================================
# PRODUCTION (Docker –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
# ========================================

prod-start:  ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å production –±–æ—Ç–∞
	@echo "üöÄ –ó–∞–ø—É—Å–∫ production –±–æ—Ç–∞..."
	docker compose -f docker/docker-compose.prod.yml up -d --build
	@echo "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"
	@echo "üìã –õ–æ–≥–∏: make prod-logs"

prod-stop:  ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
	docker compose -f docker/docker-compose.prod.yml down
	@echo "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

prod-restart:  ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å production
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
	docker compose -f docker/docker-compose.prod.yml restart
	@echo "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"

prod-logs:  ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ production
	docker compose -f docker/docker-compose.prod.yml logs -f --tail=50

prod-status:  ## –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker compose -f docker/docker-compose.prod.yml ps

prod-update:  ## –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
	@echo "üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
	git pull
	docker compose -f docker/docker-compose.prod.yml up -d --build
	@echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!"
	@echo ""
	@echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤:"
	@docker compose -f docker/docker-compose.prod.yml logs --tail=40
	@echo ""
	@echo "üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: make prod-logs"

prod-deploy:  ## –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
	@echo "üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π..."
	git pull
	docker compose -f docker/docker-compose.prod.yml down
	docker compose -f docker/docker-compose.prod.yml up -d --build
	@echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
	@echo ""
	@echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤:"
	@docker compose -f docker/docker-compose.prod.yml logs --tail=40
	@echo ""
	@echo "üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: make prod-logs"

prod-backup:  ## –°–æ–∑–¥–∞—Ç—å backup –ë–î
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup..."
	docker exec telegram_repair_bot_prod python scripts/backup_db.py
	@mkdir -p backups
	docker cp telegram_repair_bot_prod:/app/backups/. ./backups/
	@echo "‚úÖ Backup –≤ ./backups/"

prod-shell:  ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	docker exec -it telegram_repair_bot_prod /bin/sh

prod-env:  ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
	@docker exec telegram_repair_bot_prod env | grep -E "BOT_TOKEN|LOG_LEVEL|DEV_MODE|USE_ORM|ADMIN_IDS|DATABASE_PATH|REDIS_URL" | sort

# ========================================
# MULTIBOT (Docker: –¥–≤–∞ –±–æ—Ç–∞ + Redis)
# ========================================

MB_COMPOSE = docker/docker-compose.multibot.yml

mb-prepare:  ## –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö/–ª–æ–≥–æ–≤/–±—ç–∫–∞–ø–æ–≤ –∏ Redis
	@mkdir -p data/city1 data/city2 logs/city1 logs/city2 backups/city1 backups/city2 data/redis
	@echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: data/city1, data/city2, logs/*, backups/*, data/redis"

mb-env-fix:  ## –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ env.city1/env.city2 (–µ—Å–ª–∏ —Ç–∞–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
	@sed -i '1s/^/# /' env.city1 || true
	@sed -i '1s/^/# /' env.city2 || true
	@echo "‚úÖ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ env.city1/env.city2 –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é"

mb-start:  ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–∞ –±–æ—Ç–∞ –∏ Redis (–º—É–ª—å—Ç–∏–±–æ—Ç)
	@echo "üöÄ –ó–∞–ø—É—Å–∫ multibot..."
	@docker compose -f $(MB_COMPOSE) up -d --build
	@echo "‚úÖ Multibot –∑–∞–ø—É—â–µ–Ω!"
	@echo "üìã –õ–æ–≥–∏: make mb-logs-city1 | make mb-logs-city2"

mb-stop:  ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å multibot
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ multibot..."
	@docker compose -f $(MB_COMPOSE) down
	@echo "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

mb-restart:  ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å multibot
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ multibot..."
	@docker compose -f $(MB_COMPOSE) up -d --build
	@echo "‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"

mb-status:  ## –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ multibot
	@docker compose -f $(MB_COMPOSE) ps

mb-logs-city1:  ## –õ–æ–≥–∏ –±–æ—Ç–∞ city1
	@docker compose -f $(MB_COMPOSE) logs -f --tail=80 bot_city1

mb-logs-city2:  ## –õ–æ–≥–∏ –±–æ—Ç–∞ city2
	@docker compose -f $(MB_COMPOSE) logs -f --tail=80 bot_city2

mb-migrate-city1:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ë–î city1
	@docker compose -f $(MB_COMPOSE) run --rm bot_city1 alembic upgrade head

mb-migrate-city2:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ë–î city2
	@docker compose -f $(MB_COMPOSE) run --rm bot_city2 alembic upgrade head

mb-update:  ## –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å multibot
	@echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ multibot..."
	@git pull
	@docker compose -f $(MB_COMPOSE) up -d --build
	@echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –∑–∞–ø—É—â–µ–Ω–æ!"
	@docker compose -f $(MB_COMPOSE) ps

mb-update-city1:  ## –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ bot_city1
	@echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ bot_city1..."
	@git pull
	@docker compose -f $(MB_COMPOSE) up -d --build bot_city1
	@echo "‚úÖ bot_city1 –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∑–∞–ø—É—â–µ–Ω!"

mb-update-city2:  ## –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ bot_city2
	@echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ bot_city2..."
	@git pull
	@docker compose -f $(MB_COMPOSE) up -d --build bot_city2
	@echo "‚úÖ bot_city2 –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –∑–∞–ø—É—â–µ–Ω!"

mb-restart-city1:  ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ bot_city1 (–±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏)
	@docker compose -f $(MB_COMPOSE) restart bot_city1
	@echo "‚úÖ bot_city1 –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"

mb-restart-city2:  ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ bot_city2 (–±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏)
	@docker compose -f $(MB_COMPOSE) restart bot_city2
	@echo "‚úÖ bot_city2 –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"

# ========================================
# GIT SHORTCUTS
# ========================================

git-save:  ## –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (make git-save MSG="–æ–ø–∏—Å–∞–Ω–∏–µ")
	@if [ -z "$(MSG)" ]; then \
		echo "‚ùå –£–∫–∞–∂–∏—Ç–µ MSG=\"–æ–ø–∏—Å–∞–Ω–∏–µ\""; \
		exit 1; \
	fi
	git add -A
	git commit -m "$(MSG)"
	git push

git-pull:  ## –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
	git pull

git-status:  ## –°—Ç–∞—Ç—É—Å git
	git status

git-log:  ## –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–º–∏—Ç–æ–≤
	git log --oneline -10

# ========================================
# UTILITIES
# ========================================

backup:  ## Backup –ë–î –ª–æ–∫–∞–ª—å–Ω–æ
	python scripts/backup_db.py

check-db:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î
	python scripts/check_database.py

check-role:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å (make check-role ID=123456)
	python scripts/check_user_role.py $(ID)

set-role:  ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å (make set-role ID=123456 ROLE=ADMIN)
	python scripts/set_user_role.py $(ID) $(ROLE)

prod-install-deps:  ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
	docker exec telegram_repair_bot_prod pip install -r /app/requirements.txt
	@echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
