# Makefile –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

.PHONY: help install install-dev test lint format clean run migrate migrate-create docker-build docker-up docker-down docker-migrate

help:  ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install:  ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install -r requirements.txt

install-dev:  ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–≤–∫–ª—é—á–∞—è dev)
	pip install -r requirements-dev.txt
	pre-commit install

test:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	pytest

test-cov:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å coverage
	pytest --cov=app --cov-report=html --cov-report=term-missing

lint:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏
	ruff check .
	black --check .
	mypy app/ --ignore-missing-imports

format:  ## –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	black .
	ruff check --fix .
	isort .

pre-commit:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit hooks
	pre-commit run --all-files

clean:  ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name ".ruff_cache" -exec rm -rf {} +
	find . -type d -name ".mypy_cache" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name ".coverage" -delete
	rm -rf htmlcov/
	rm -rf dist/
	rm -rf build/

run:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
	python bot.py

migrate:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
	alembic upgrade head

migrate-create:  ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make migrate-create MSG="–æ–ø–∏—Å–∞–Ω–∏–µ")
	alembic revision --autogenerate -m "$(MSG)"

migrate-history:  ## –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
	alembic history

migrate-current:  ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î
	alembic current

migrate-downgrade:  ## –û—Ç–∫–∞—Ç–∏—Ç—å –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é
	alembic downgrade -1

backup:  ## –°–æ–∑–¥–∞—Ç—å backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	python backup_db.py

check-db:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	python check_database.py

sync-roles:  ## –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏ –∏–∑ .env
	python sync_roles_from_env.py

docker-build:  ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	docker build -f docker/Dockerfile -t telegram-repair-bot:latest .

docker-up:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Docker Compose (dev)
	cd docker && docker compose -f docker-compose.yml up -d

docker-up-dev:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ dev —Ä–µ–∂–∏–º–µ
	cd docker && docker compose -f docker-compose.dev.yml up

docker-down:  ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (dev)
	cd docker && docker compose -f docker-compose.yml down

docker-logs:  ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker (dev)
	cd docker && docker compose -f docker-compose.yml logs -f bot

docker-restart:  ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (dev)
	cd docker && docker compose -f docker-compose.yml restart

docker-migrate:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Docker
	cd docker && docker compose -f docker-compose.migrate.yml run --rm migrate

docker-clean:  ## –û—á–∏—Å—Ç–∏—Ç—å Docker (—É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ volumes)
	cd docker && docker compose -f docker-compose.yml down -v
	docker system prune -f

venv:  ## –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	python -m venv venv
	@echo "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:"
	@echo "  Windows: venv\\Scripts\\activate"
	@echo "  Linux/Mac: source venv/bin/activate"

deps-update:  ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install --upgrade pip
	pip install --upgrade -r requirements.txt

deps-check:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip list --outdated

security-check:  ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	pip install safety
	safety check
	bandit -r app/

# ========================================
# PRODUCTION SERVER COMMANDS
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ù–ê production —Å–µ—Ä–≤–µ—Ä–µ
# ========================================

prod-update:  ## –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏–∑ git (–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
	@echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ GitHub..."
	git fetch origin
	git pull origin main
	@echo "‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"

prod-migrate:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î –≤ production (Docker)
	@echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î..."
	cd docker && docker-compose -f docker-compose.prod.yml run --rm bot alembic upgrade head
	@echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"

prod-migrate-stamp:  ## –ü–æ–º–µ—Ç–∏—Ç—å –ë–î –∫–∞–∫ –≥–æ—Ç–æ–≤—É—é (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–π)
	@echo "üìå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î..."
	cd docker && docker-compose -f docker-compose.prod.yml run --rm bot alembic stamp head
	@echo "‚úÖ –ë–î –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–∞—è"
	@echo "‚ÑπÔ∏è  –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: make prod-migrate"

prod-migrate-check:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
	@echo "üîç –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:"
	cd docker && docker-compose -f docker-compose.prod.yml run --rm bot alembic current

prod-backup:  ## –°–æ–∑–¥–∞—Ç—å backup –ë–î –≤ production (Docker)
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –ë–î..."
	cd docker && docker-compose -f docker-compose.prod.yml run --rm bot python scripts/backup_db.py
	@echo "‚úÖ Backup —Å–æ–∑–¥–∞–Ω"

prod-restart:  ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ production –±–æ—Ç–∞ (Docker)
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
	cd docker && docker-compose -f docker-compose.prod.yml restart bot
	@echo "‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"

prod-logs:  ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ production (Docker)
	cd docker && docker-compose -f docker-compose.prod.yml logs -f bot

prod-status:  ## –°—Ç–∞—Ç—É—Å production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (Docker)
	cd docker && docker-compose -f docker-compose.prod.yml ps

prod-rebuild:  ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º
	@echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
	cd docker && docker-compose -f docker-compose.prod.yml build --no-cache bot
	@echo "‚úÖ –û–±—Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω"

prod-deploy:  ## –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π: pull + rebuild + restart (–ì–õ–ê–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø DOCKER!)
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è..."
	@echo "üì• 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–¥–∞..."
	git pull origin main
	@echo "üî® 2. –û—á–∏—Å—Ç–∫–∞ build cache..."
	docker builder prune -f
	@echo "üî® 3. –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
	cd docker && docker-compose -f docker-compose.prod.yml build --no-cache --pull bot
	@echo "üîÑ 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	cd docker && docker-compose -f docker-compose.prod.yml up -d bot
	@echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: make prod-logs"

prod-deploy-version:  ## –î–µ–ø–ª–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make prod-deploy-version VERSION=v1.2.3)
	@if [ -z "$(VERSION)" ]; then \
		echo "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é"; \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make prod-deploy-version VERSION=v1.2.3"; \
		echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏: make git-tags"; \
		exit 1; \
	fi
	@echo "üöÄ –î–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ $(VERSION)..."
	@echo "üì• 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ $(VERSION)..."
	git fetch --tags
	git checkout tags/$(VERSION)
	@echo "üî® 2. –û—á–∏—Å—Ç–∫–∞ build cache..."
	docker builder prune -f
	@echo "üî® 3. –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
	cd docker && docker-compose -f docker-compose.prod.yml build --no-cache --pull bot
	@echo "üîÑ 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	cd docker && docker-compose -f docker-compose.prod.yml up -d bot
	@echo "‚úÖ –í–µ—Ä—Å–∏—è $(VERSION) –∑–∞–¥–µ–ø–ª–æ–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: make prod-logs"
	@echo "‚ö†Ô∏è  –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ main: git checkout main"

prod-deploy-script:  ## –î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç (–¥–ª—è non-Docker —Ä–µ–∂–∏–º–∞)
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è..."
	chmod +x scripts/deploy_with_migrations.sh
	./scripts/deploy_with_migrations.sh

prod-diagnose:  ## –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	@echo "üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
	chmod +x scripts/diagnose_update.sh
	./scripts/diagnose_update.sh

prod-full-update:  ## [–£–°–¢–ê–†–ï–õ–û] –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ prod-deploy
	@echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∞!"
	@echo "‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–º–µ—Å—Ç–æ –Ω–µ—ë: make prod-deploy"
	@echo ""
	@echo "–ó–∞–ø—É—Å–∫–∞—é prod-deploy —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
	@sleep 3
	@make prod-deploy

all: clean install-dev lint test  ## –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë: –æ—á–∏—Å—Ç–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ª–∏–Ω—Ç, —Ç–µ—Å—Ç—ã

# ========================================
# GIT COMMANDS
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git
# ========================================

git-status:  ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Git
	@git status

git-add:  ## –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	@git add -A
	@echo "‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã"
	@git status

git-commit:  ## –ö–æ–º–º–∏—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make git-commit MSG="–æ–ø–∏—Å–∞–Ω–∏–µ")
	@if [ -z "$(MSG)" ]; then \
		echo "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"; \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make git-commit MSG=\"–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\""; \
		exit 1; \
	fi
	@git commit -m "$(MSG)"
	@echo "‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω"

git-push:  ## –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	@echo "üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ GitHub..."
	@git push origin main
	@echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"

git-pull:  ## –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	@echo "‚¨áÔ∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ GitHub..."
	@git pull origin main
	@echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã"

git-save:  ## –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: add + commit + push (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make git-save MSG="–æ–ø–∏—Å–∞–Ω–∏–µ")
	@if [ -z "$(MSG)" ]; then \
		echo "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"; \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make git-save MSG=\"–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\""; \
		exit 1; \
	fi
	@echo "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
	@git add -A
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞..."
	@git commit -m "$(MSG)"
	@echo "üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub..."
	@git push origin main
	@echo "‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ!"

git-log:  ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–º–∏—Ç–æ–≤
	@git log --oneline -10

git-diff:  ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
	@git diff

git-branch:  ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
	@git branch

git-tag:  ## –°–æ–∑–¥–∞—Ç—å —Ç—ç–≥ –≤–µ—Ä—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make git-tag VERSION=v1.2.3)
	@if [ -z "$(VERSION)" ]; then \
		echo "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é"; \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make git-tag VERSION=v1.2.3"; \
		exit 1; \
	fi
	@echo "üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç—ç–≥–∞ $(VERSION)..."
	@git tag -a $(VERSION) -m "Release $(VERSION)"
	@git push origin $(VERSION)
	@echo "‚úÖ –¢—ç–≥ $(VERSION) —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub"

git-tags:  ## –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—ç–≥–∏
	@echo "üè∑Ô∏è  –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π:"
	@git tag -l

git-release:  ## –ü–æ–ª–Ω—ã–π —Ä–µ–ª–∏–∑: add + commit + push + tag (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make git-release VERSION=v1.2.3 MSG="–æ–ø–∏—Å–∞–Ω–∏–µ")
	@if [ -z "$(VERSION)" ] || [ -z "$(MSG)" ]; then \
		echo "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"; \
		echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make git-release VERSION=v1.2.3 MSG=\"–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞\""; \
		exit 1; \
	fi
	@echo "üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ $(VERSION)..."
	@git add -A
	@git commit -m "$(MSG)"
	@git push origin main
	@git tag -a $(VERSION) -m "Release $(VERSION): $(MSG)"
	@git push origin $(VERSION)
	@echo "‚úÖ –†–µ–ª–∏–∑ $(VERSION) –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"

