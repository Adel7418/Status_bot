# Makefile –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

.PHONY: help install install-dev test lint format clean run migrate migrate-create docker-build docker-up docker-down docker-migrate

help:  ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install:  ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install -r requirements.txt

install-dev:  ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–≤–∫–ª—é—á–∞—è dev)
	pip install -r requirements-dev.txt
	pre-commit install

test:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	pytest

test-cov:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å coverage
	pytest --cov=app --cov-report=html --cov-report=term-missing

lint:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏
	ruff check .
	black --check .
	mypy app/ --ignore-missing-imports

format:  ## –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	black .
	ruff check --fix .
	isort .

pre-commit:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit hooks
	pre-commit run --all-files

clean:  ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name ".ruff_cache" -exec rm -rf {} +
	find . -type d -name ".mypy_cache" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name ".coverage" -delete
	rm -rf htmlcov/
	rm -rf dist/
	rm -rf build/

run:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
	python bot.py

migrate:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
	alembic upgrade head

migrate-create:  ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make migrate-create MSG="–æ–ø–∏—Å–∞–Ω–∏–µ")
	alembic revision --autogenerate -m "$(MSG)"

migrate-history:  ## –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
	alembic history

migrate-current:  ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î
	alembic current

migrate-downgrade:  ## –û—Ç–∫–∞—Ç–∏—Ç—å –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é
	alembic downgrade -1

backup:  ## –°–æ–∑–¥–∞—Ç—å backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	python backup_db.py

check-db:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	python check_database.py

sync-roles:  ## –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏ –∏–∑ .env
	python sync_roles_from_env.py

docker-build:  ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	docker build -f docker/Dockerfile -t telegram-repair-bot:latest .

docker-up:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Docker Compose (dev)
	cd docker && docker compose -f docker-compose.yml up -d

docker-up-dev:  ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ dev —Ä–µ–∂–∏–º–µ
	cd docker && docker compose -f docker-compose.dev.yml up

docker-down:  ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (dev)
	cd docker && docker compose -f docker-compose.yml down

docker-logs:  ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker (dev)
	cd docker && docker compose -f docker-compose.yml logs -f bot

docker-restart:  ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (dev)
	cd docker && docker compose -f docker-compose.yml restart

docker-migrate:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Docker
	cd docker && docker compose -f docker-compose.migrate.yml run --rm migrate

docker-clean:  ## –û—á–∏—Å—Ç–∏—Ç—å Docker (—É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ volumes)
	cd docker && docker compose -f docker-compose.yml down -v
	docker system prune -f

venv:  ## –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	python -m venv venv
	@echo "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:"
	@echo "  Windows: venv\\Scripts\\activate"
	@echo "  Linux/Mac: source venv/bin/activate"

deps-update:  ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install --upgrade pip
	pip install --upgrade -r requirements.txt

deps-check:  ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip list --outdated

security-check:  ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	pip install safety
	safety check
	bandit -r app/

# ========================================
# PRODUCTION SERVER COMMANDS
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ù–ê production —Å–µ—Ä–≤–µ—Ä–µ
# ========================================

prod-update:  ## –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏–∑ git (–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
	@echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ GitHub..."
	git fetch origin
	git pull origin main
	@echo "‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"

prod-migrate:  ## –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î –≤ production (Docker)
	@echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î..."
	cd docker && docker-compose -f docker-compose.prod.yml run --rm bot alembic upgrade head
	@echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"

prod-backup:  ## –°–æ–∑–¥–∞—Ç—å backup –ë–î –≤ production (Docker)
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –ë–î..."
	cd docker && docker-compose -f docker-compose.prod.yml exec bot python scripts/backup_db.py
	@echo "‚úÖ Backup —Å–æ–∑–¥–∞–Ω"

prod-restart:  ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ production –±–æ—Ç–∞ (Docker)
	@echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
	cd docker && docker-compose -f docker-compose.prod.yml restart bot
	@echo "‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"

prod-logs:  ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ production (Docker)
	cd docker && docker-compose -f docker-compose.prod.yml logs -f bot

prod-status:  ## –°—Ç–∞—Ç—É—Å production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (Docker)
	cd docker && docker-compose -f docker-compose.prod.yml ps

prod-full-update:  ## –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: backup + git pull + rebuild + migrate + restart
	@echo "üöÄ –ü–û–õ–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï PRODUCTION"
	@echo "1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ backup..."
	cd docker && docker-compose -f docker-compose.prod.yml exec -T bot python scripts/backup_db.py
	@echo "2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞..."
	git pull origin main
	@echo "3Ô∏è‚É£ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞..."
	cd docker && docker-compose -f docker-compose.prod.yml build --no-cache bot
	@echo "4Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
	cd docker && docker-compose -f docker-compose.prod.yml run --rm bot alembic upgrade head
	@echo "5Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫..."
	cd docker && docker-compose -f docker-compose.prod.yml up -d
	@echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
	@echo "üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: make prod-logs"

all: clean install-dev lint test  ## –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë: –æ—á–∏—Å—Ç–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ª–∏–Ω—Ç, —Ç–µ—Å—Ç—ã

