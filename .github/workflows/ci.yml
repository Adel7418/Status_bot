name: CI - Tests and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=html --cov-report=term
      continue-on-error: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive coverage report
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.11'
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  lint:
    name: Code Quality (Linting)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy types-python-dateutil

    - name: Run Ruff (linter)
      run: |
        ruff check app/ --output-format=github
      continue-on-error: true

    - name: Run Ruff (formatter check)
      run: |
        ruff format --check app/
      continue-on-error: true

    - name: Run MyPy (type checking)
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit (security linter)
      run: |
        bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json || true
      continue-on-error: true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
        retention-days: 30

  pii-protection-check:
    name: PII Protection Verification
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run PII masking tests
      run: |
        pytest tests/unit/test_pii_masking.py -v

    - name: Check for PII in logs (fail if found)
      run: |
        # Проверяем, что в коде нет прямого логирования PII
        ! grep -r "logger.*client_phone\|logger.*client_name\|logger.*client_address" app/handlers/ app/services/ || {
          echo "ERROR: Found potential PII logging in code!"
          exit 1
        }
        echo "OK: No direct PII logging found"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: telegram-repair-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security, pii-protection-check, docker-build]
    if: always()

    steps:
    - name: Check CI results
      run: |
        echo "Test: ${{ needs.test.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "PII Protection: ${{ needs.pii-protection-check.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"

        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Tests failed!"
          exit 1
        fi

        if [ "${{ needs.pii-protection-check.result }}" != "success" ]; then
          echo "❌ PII protection check failed!"
          exit 1
        fi

        if [ "${{ needs.docker-build.result }}" != "success" ]; then
          echo "❌ Docker build failed!"
          exit 1
        fi

        echo "✅ All critical checks passed!"
