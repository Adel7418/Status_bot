name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"

        # Проверка формата: type(scope): description
        # Примеры: feat(auth): add login, fix(bot): resolve crash, docs: update README
        if ! echo "$PR_TITLE" | grep -E '^(feat|fix|docs|style|refactor|test|chore|perf|ci)(\(.+\))?: .+'; then
          echo "❌ PR title must follow format: type(scope): description"
          echo "   Examples:"
          echo "     feat(orders): add export to Excel"
          echo "     fix(bot): resolve memory leak"
          echo "     docs: update installation guide"
          exit 1
        fi

        echo "✅ PR title format is valid"

    - name: Check for merge conflicts
      run: |
        git fetch origin ${{ github.event.pull_request.base.ref }}
        if git merge-base --is-ancestor origin/${{ github.event.pull_request.base.ref }} HEAD; then
          echo "✅ No merge conflicts"
        else
          echo "⚠️ Branch may have conflicts with base branch"
        fi

    - name: Check file changes
      run: |
        # Проверяем, что не изменены критичные файлы без необходимости
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)

        echo "Changed files:"
        echo "$CHANGED_FILES"

        # Предупреждение при изменении миграций
        if echo "$CHANGED_FILES" | grep -q "migrations/versions/"; then
          echo "⚠️ WARNING: Database migrations modified"
          echo "   Please ensure migrations are backward compatible"
        fi

        # Предупреждение при изменении requirements
        if echo "$CHANGED_FILES" | grep -q "requirements.txt"; then
          echo "⚠️ WARNING: Dependencies modified"
          echo "   Please update requirements-dev.txt if needed"
        fi

    - name: Check for TODO/FIXME comments
      run: |
        # Находим новые TODO/FIXME
        NEW_TODOS=$(git diff origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '^\+.*TODO|^\+.*FIXME' || true)

        if [ -n "$NEW_TODOS" ]; then
          echo "⚠️ New TODO/FIXME comments added:"
          echo "$NEW_TODOS"
          echo ""
          echo "Please create issues for these items"
        else
          echo "✅ No new TODO/FIXME comments"
        fi

  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check PR size
      run: |
        CHANGED_FILES_COUNT=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | wc -l)
        CHANGED_LINES=$(git diff --stat origin/${{ github.event.pull_request.base.ref }}...HEAD | tail -1)

        echo "Changed files: $CHANGED_FILES_COUNT"
        echo "Changed lines: $CHANGED_LINES"

        if [ "$CHANGED_FILES_COUNT" -gt 50 ]; then
          echo "⚠️ Large PR: $CHANGED_FILES_COUNT files changed"
          echo "   Consider splitting into smaller PRs"
        else
          echo "✅ PR size is reasonable"
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-3.0, AGPL-3.0

  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Label based on files changed
      uses: actions/labeler@v5
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        sync-labels: true

  comment-coverage:
    name: Coverage Comment
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=app --cov-report=term --cov-report=json

    - name: Comment coverage on PR
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 60
